const T = Math.PI*2;

var F = [500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500];
var r = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
var rv = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
var vt = 0.01;
var w = 80;
var wdelta = 5;
var wmin = 1;
var wmax = 500;
var opacity = 0.08;
var do_you_like_snow_question_mark = 'yes!';

const canvas = document.getElementById('screen');
const c = canvas.getContext('2d');

var running = 1;
var theta = t = 0;
var W,H;


window.onresize = ()=>{
	W =  canvas.width = document.body.clientWidth;
	H = canvas.height = document.body.clientHeight;
	c.translate(canvas.width/2, canvas.height/2);
}

window.onresize();

const grd = c.createLinearGradient(0, -H/2, 0, H);
grd.addColorStop(0, "rgb(0,0,0)");
grd.addColorStop(1, "rgb(100,100,100");

class Vertex {
	constructor(...x){
		this.pos = [];
		x.forEach((y)=>{
			this.pos.push(y);
		});
		this.n = x.length;
		this.loc = [];
	}
	rotate(r){
		r.slice(0,this.n).toReversed().forEach((s, k_)=>{
			let i,j;
			let k = this.n - k_ - 1;
			switch(k){
				case 0:
					i = 1, j = 2;
					break;
				case 1:
					i = 0, j = 2;
					break;
				case 2:
					i = 0, j = 1;
					break;
				default:
					i = 1, j = k;
			}
			let p = this.pos[i];
			this.pos[i] = p*Math.cos(s) - this.pos[j]*Math.sin(s);
			this.pos[j] = p*Math.sin(s) + this.pos[j]*Math.cos(s);
		});
	}
	project(){
		this.pos[this.n-1] += F[this.n-3];
		for(let i=this.n-1; i>=3; i--){
			for(let j=0; j<i; j++){
				this.pos[j] *= F[i-2]/this.pos[i];
			}
			this.pos[i-1] += F[i-3];
		}
		this.loc = [this.pos[0]*F[0]/this.pos[2], this.pos[1]*F[0]/this.pos[2]];
	}
}

class Face {
	constructor(color, ...v){
		this.v = v;
		this.color = color || "rgba(255,255,255,0.1)";
	}
	render(){
		c.beginPath();
		c.strokeStyle = "rgba(255,255,255,1)";
		c.moveTo(this.v[0].loc[0], this.v[0].loc[1]);
		c.lineWidth = 1;
		for(let i=1; i<this.v.length; i++) c.lineTo(this.v[i].loc[0], this.v[i].loc[1]);
		c.closePath();
		c.fillStyle = this.color;
		c.fill()
		c.stroke();
	}
}

window.onmousemove=function(e){
	if(e.ctrlKey) return;
	
	let v = 400;
	
	if(e.shiftKey){
		r[2] += e.movementX/v + e.movementY/v;
		r[2] %= T;
	}else{
		r[0] += e.movementY/v;
		r[0] %= T;
		r[1] += e.movementX/v;
		r[1] %= T;
	}
	
	if(e.altKey) {
		running = 0;
		return;
	}
	
	running = 1;
}

window.onwheel=function(e){
	if(e.deltaY<0){
		w = Math.min(w + wdelta, wmax);
	}else if(e.deltaY>0){
		w = Math.max(w - wdelta, wmin);
	}
}

window.onkeydown=function(e){
	if(e.keyCode==82){
		recording = !recording;
		if(recording){
			recorder.start();
		} else {
			recorder.stop();
		}
	}else if(e.keyCode==83){
		recorder.snap();
	}else if(do_you_like_snow_question_mark=='yes!'&&e.keyCode==32&&rate__){
		rate_=0;if(rate>-rate__){ra(1);}else{ra(-1);}
	}
}

function f(t){
	if(0<=t&&t<T/8){return t**4/(T/8)**3;}
	else if(T/8<=t&&t<T/4){return T/4 - (t-T/4)**4/(T/8)**3;}
	else if(T/4<=t&&t<=T*3/8){return T/4 + (t-T/4)**4/(T/8)**3;}
	else if(T*3/8<=t&&t<=T/2){return T/2 - (t-T/2)**4/(T/8)**3;}
	else if(t>T/2){return f(T-t);}
	else {return t;}
}

function bg(){
	c.fillStyle = grd;
	c.fillRect(-W/2, -H/2, W, H);
}


function snow(){
	
}

function auto(){
	if((x=t)>0&&x<vt*2) recorder.start();
	if((x=T-t)<vt*2&&x>0) recorder.stop();
}

function draw(){
	requestAnimationFrame(draw);
	
	bg();
	
	if(running){
		rv.forEach((s,i)=>{
			r[i] += s;
			r[i] %= T;
		});
		
		t += vt;
		t %= T;
		theta = f(t);
	}
	
	do_you_like_snow_question_mark=='yes!'?snow():0;
	
	let v1 = [], v2 = [], v3 = [], v4 = [], v5 = [], v6 = [], v7 = [], v8 = [], v9 = [], v10 = [], v11 = [], v12 = [], v13 = [], v14 = [], v15 = [], v16 = [], v17 = [], v18 = [], v19 = [], v20 = [], v21 = [], v22 = [], v23 = [], v24 = [];
	let faces = [];
	
	let color_a =  'rgba(255,   0,   0,         0.1)',
		color1  =  'rgba(255,   0,   0, '+opacity+')',
		color2  =  'rgba(  0, 255,   0, '+opacity+')',
		color3  =  'rgba(  0,   0, 255, '+opacity+')',
		color4  =  'rgba(255, 255,   0, '+opacity+')',
		color5  =  'rgba(255,   0, 255, '+opacity+')',
		color6  =  'rgba(  0, 255, 255, '+opacity+')',
		color7  =  'rgba(255, 255, 255, '+opacity+')',
		color8  =  'rgba(  0,   0,   0, '+opacity+')',
		color9  =  'rgba(  0,   0, 128, '+opacity+')',
		color10 =  'rgba(  0, 128,   0, '+opacity+')',
		color11 =  'rgba(  0, 128, 128, '+opacity+')',
		color12 =  'rgba(128,   0,   0, '+opacity+')';
		color13 =  'rgba(128,   0, 128, '+opacity+')',
		color14 =  'rgba(128, 128,   0, '+opacity+')',
		color15 =  'rgba(128, 128, 128, '+opacity+')',
		color16 =  'rgba(  0,   0,  64, '+opacity+')',
		color17 =  'rgba(  0,  64,   0, '+opacity+')',
		color18 =  'rgba(  0,  64,  64, '+opacity+')',
		color19 =  'rgba( 64,   0,   0, '+opacity+')',
		color20 =  'rgba( 64,   0,  64, '+opacity+')',
		color21 =  'rgba( 64,  64,   0, '+opacity+')',
		color22 =  'rgba( 64,  64,  64, '+opacity+')',
		color23 =  'rgba(255,   0, 128, '+opacity+')',
		color24 =  'rgba(255, 128,   0, '+opacity+')';
	
	    v1[0] = new Vertex(-w/2, -w/2, -w/2, -w/2, -w/2, -w/2, -w/2);
    v1[1] = new Vertex(-w/2-Math.sin(theta)*w, -w/2, -w/2, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v1[2] = new Vertex(-w/2, -w/2, -w/2, -w/2, -w/2, w/2, -w/2);
    v1[3] = new Vertex(-w/2-Math.sin(theta)*w, -w/2, -w/2, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v1[4] = new Vertex(-w/2, -w/2, -w/2, -w/2, w/2, -w/2, -w/2);
    v1[5] = new Vertex(-w/2-Math.sin(theta)*w, -w/2, -w/2, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v1[6] = new Vertex(-w/2, -w/2, -w/2, -w/2, w/2, w/2, -w/2);
    v1[7] = new Vertex(-w/2-Math.sin(theta)*w, -w/2, -w/2, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v1[8] = new Vertex(-w/2, -w/2, -w/2, w/2, -w/2, -w/2, -w/2);
    v1[9] = new Vertex(-w/2-Math.sin(theta)*w, -w/2, -w/2, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v1[10] = new Vertex(-w/2, -w/2, -w/2, w/2, -w/2, w/2, -w/2);
    v1[11] = new Vertex(-w/2-Math.sin(theta)*w, -w/2, -w/2, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v1[12] = new Vertex(-w/2, -w/2, -w/2, w/2, w/2, -w/2, -w/2);
    v1[13] = new Vertex(-w/2-Math.sin(theta)*w, -w/2, -w/2, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v1[14] = new Vertex(-w/2, -w/2, -w/2, w/2, w/2, w/2, -w/2);
    v1[15] = new Vertex(-w/2-Math.sin(theta)*w, -w/2, -w/2, w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v1[16] = new Vertex(-w/2, -w/2, w/2, -w/2, -w/2, -w/2, -w/2);
    v1[17] = new Vertex(-w/2-Math.sin(theta)*w, -w/2, w/2, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v1[18] = new Vertex(-w/2, -w/2, w/2, -w/2, -w/2, w/2, -w/2);
    v1[19] = new Vertex(-w/2-Math.sin(theta)*w, -w/2, w/2, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v1[20] = new Vertex(-w/2, -w/2, w/2, -w/2, w/2, -w/2, -w/2);
    v1[21] = new Vertex(-w/2-Math.sin(theta)*w, -w/2, w/2, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v1[22] = new Vertex(-w/2, -w/2, w/2, -w/2, w/2, w/2, -w/2);
    v1[23] = new Vertex(-w/2-Math.sin(theta)*w, -w/2, w/2, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v1[24] = new Vertex(-w/2, -w/2, w/2, w/2, -w/2, -w/2, -w/2);
    v1[25] = new Vertex(-w/2-Math.sin(theta)*w, -w/2, w/2, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v1[26] = new Vertex(-w/2, -w/2, w/2, w/2, -w/2, w/2, -w/2);
    v1[27] = new Vertex(-w/2-Math.sin(theta)*w, -w/2, w/2, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v1[28] = new Vertex(-w/2, -w/2, w/2, w/2, w/2, -w/2, -w/2);
    v1[29] = new Vertex(-w/2-Math.sin(theta)*w, -w/2, w/2, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v1[30] = new Vertex(-w/2, -w/2, w/2, w/2, w/2, w/2, -w/2);
    v1[31] = new Vertex(-w/2-Math.sin(theta)*w, -w/2, w/2, w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v1[32] = new Vertex(-w/2, w/2, -w/2, -w/2, -w/2, -w/2, -w/2);
    v1[33] = new Vertex(-w/2-Math.sin(theta)*w, w/2, -w/2, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v1[34] = new Vertex(-w/2, w/2, -w/2, -w/2, -w/2, w/2, -w/2);
    v1[35] = new Vertex(-w/2-Math.sin(theta)*w, w/2, -w/2, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v1[36] = new Vertex(-w/2, w/2, -w/2, -w/2, w/2, -w/2, -w/2);
    v1[37] = new Vertex(-w/2-Math.sin(theta)*w, w/2, -w/2, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v1[38] = new Vertex(-w/2, w/2, -w/2, -w/2, w/2, w/2, -w/2);
    v1[39] = new Vertex(-w/2-Math.sin(theta)*w, w/2, -w/2, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v1[40] = new Vertex(-w/2, w/2, -w/2, w/2, -w/2, -w/2, -w/2);
    v1[41] = new Vertex(-w/2-Math.sin(theta)*w, w/2, -w/2, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v1[42] = new Vertex(-w/2, w/2, -w/2, w/2, -w/2, w/2, -w/2);
    v1[43] = new Vertex(-w/2-Math.sin(theta)*w, w/2, -w/2, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v1[44] = new Vertex(-w/2, w/2, -w/2, w/2, w/2, -w/2, -w/2);
    v1[45] = new Vertex(-w/2-Math.sin(theta)*w, w/2, -w/2, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v1[46] = new Vertex(-w/2, w/2, -w/2, w/2, w/2, w/2, -w/2);
    v1[47] = new Vertex(-w/2-Math.sin(theta)*w, w/2, -w/2, w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v1[48] = new Vertex(-w/2, w/2, w/2, -w/2, -w/2, -w/2, -w/2);
    v1[49] = new Vertex(-w/2-Math.sin(theta)*w, w/2, w/2, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v1[50] = new Vertex(-w/2, w/2, w/2, -w/2, -w/2, w/2, -w/2);
    v1[51] = new Vertex(-w/2-Math.sin(theta)*w, w/2, w/2, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v1[52] = new Vertex(-w/2, w/2, w/2, -w/2, w/2, -w/2, -w/2);
    v1[53] = new Vertex(-w/2-Math.sin(theta)*w, w/2, w/2, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v1[54] = new Vertex(-w/2, w/2, w/2, -w/2, w/2, w/2, -w/2);
    v1[55] = new Vertex(-w/2-Math.sin(theta)*w, w/2, w/2, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v1[56] = new Vertex(-w/2, w/2, w/2, w/2, -w/2, -w/2, -w/2);
    v1[57] = new Vertex(-w/2-Math.sin(theta)*w, w/2, w/2, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v1[58] = new Vertex(-w/2, w/2, w/2, w/2, -w/2, w/2, -w/2);
    v1[59] = new Vertex(-w/2-Math.sin(theta)*w, w/2, w/2, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v1[60] = new Vertex(-w/2, w/2, w/2, w/2, w/2, -w/2, -w/2);
    v1[61] = new Vertex(-w/2-Math.sin(theta)*w, w/2, w/2, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v1[62] = new Vertex(-w/2, w/2, w/2, w/2, w/2, w/2, -w/2);
    v1[63] = new Vertex(-w/2-Math.sin(theta)*w, w/2, w/2, w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    faces.push(new Face(color1, v1[0], v1[1], v1[3], v1[2]));
    faces.push(new Face(color1, v1[0], v1[1], v1[5], v1[4]));
    faces.push(new Face(color1, v1[0], v1[1], v1[9], v1[8]));
    faces.push(new Face(color1, v1[0], v1[1], v1[17], v1[16]));
    faces.push(new Face(color1, v1[0], v1[1], v1[33], v1[32]));
    faces.push(new Face(color1, v1[0], v1[2], v1[6], v1[4]));
    faces.push(new Face(color1, v1[0], v1[2], v1[10], v1[8]));
    faces.push(new Face(color1, v1[0], v1[2], v1[18], v1[16]));
    faces.push(new Face(color1, v1[0], v1[2], v1[34], v1[32]));
    faces.push(new Face(color1, v1[0], v1[4], v1[12], v1[8]));
    faces.push(new Face(color1, v1[0], v1[4], v1[20], v1[16]));
    faces.push(new Face(color1, v1[0], v1[4], v1[36], v1[32]));
    faces.push(new Face(color1, v1[0], v1[8], v1[24], v1[16]));
    faces.push(new Face(color1, v1[0], v1[8], v1[40], v1[32]));
    faces.push(new Face(color1, v1[0], v1[16], v1[48], v1[32]));
    faces.push(new Face(color1, v1[1], v1[3], v1[7], v1[5]));
    faces.push(new Face(color1, v1[1], v1[3], v1[11], v1[9]));
    faces.push(new Face(color1, v1[1], v1[3], v1[19], v1[17]));
    faces.push(new Face(color1, v1[1], v1[3], v1[35], v1[33]));
    faces.push(new Face(color1, v1[1], v1[5], v1[13], v1[9]));
    faces.push(new Face(color1, v1[1], v1[5], v1[21], v1[17]));
    faces.push(new Face(color1, v1[1], v1[5], v1[37], v1[33]));
    faces.push(new Face(color1, v1[1], v1[9], v1[25], v1[17]));
    faces.push(new Face(color1, v1[1], v1[9], v1[41], v1[33]));
    faces.push(new Face(color1, v1[1], v1[17], v1[49], v1[33]));
    faces.push(new Face(color1, v1[2], v1[3], v1[7], v1[6]));
    faces.push(new Face(color1, v1[2], v1[3], v1[11], v1[10]));
    faces.push(new Face(color1, v1[2], v1[3], v1[19], v1[18]));
    faces.push(new Face(color1, v1[2], v1[3], v1[35], v1[34]));
    faces.push(new Face(color1, v1[2], v1[6], v1[14], v1[10]));
    faces.push(new Face(color1, v1[2], v1[6], v1[22], v1[18]));
    faces.push(new Face(color1, v1[2], v1[6], v1[38], v1[34]));
    faces.push(new Face(color1, v1[2], v1[10], v1[26], v1[18]));
    faces.push(new Face(color1, v1[2], v1[10], v1[42], v1[34]));
    faces.push(new Face(color1, v1[2], v1[18], v1[50], v1[34]));
    faces.push(new Face(color1, v1[3], v1[7], v1[15], v1[11]));
    faces.push(new Face(color1, v1[3], v1[7], v1[23], v1[19]));
    faces.push(new Face(color1, v1[3], v1[7], v1[39], v1[35]));
    faces.push(new Face(color1, v1[3], v1[11], v1[27], v1[19]));
    faces.push(new Face(color1, v1[3], v1[11], v1[43], v1[35]));
    faces.push(new Face(color1, v1[3], v1[19], v1[51], v1[35]));
    faces.push(new Face(color1, v1[4], v1[5], v1[7], v1[6]));
    faces.push(new Face(color1, v1[4], v1[5], v1[13], v1[12]));
    faces.push(new Face(color1, v1[4], v1[5], v1[21], v1[20]));
    faces.push(new Face(color1, v1[4], v1[5], v1[37], v1[36]));
    faces.push(new Face(color1, v1[4], v1[6], v1[14], v1[12]));
    faces.push(new Face(color1, v1[4], v1[6], v1[22], v1[20]));
    faces.push(new Face(color1, v1[4], v1[6], v1[38], v1[36]));
    faces.push(new Face(color1, v1[4], v1[12], v1[28], v1[20]));
    faces.push(new Face(color1, v1[4], v1[12], v1[44], v1[36]));
    faces.push(new Face(color1, v1[4], v1[20], v1[52], v1[36]));
    faces.push(new Face(color1, v1[5], v1[7], v1[15], v1[13]));
    faces.push(new Face(color1, v1[5], v1[7], v1[23], v1[21]));
    faces.push(new Face(color1, v1[5], v1[7], v1[39], v1[37]));
    faces.push(new Face(color1, v1[5], v1[13], v1[29], v1[21]));
    faces.push(new Face(color1, v1[5], v1[13], v1[45], v1[37]));
    faces.push(new Face(color1, v1[5], v1[21], v1[53], v1[37]));
    faces.push(new Face(color1, v1[6], v1[7], v1[15], v1[14]));
    faces.push(new Face(color1, v1[6], v1[7], v1[23], v1[22]));
    faces.push(new Face(color1, v1[6], v1[7], v1[39], v1[38]));
    faces.push(new Face(color1, v1[6], v1[14], v1[30], v1[22]));
    faces.push(new Face(color1, v1[6], v1[14], v1[46], v1[38]));
    faces.push(new Face(color1, v1[6], v1[22], v1[54], v1[38]));
    faces.push(new Face(color1, v1[7], v1[15], v1[31], v1[23]));
    faces.push(new Face(color1, v1[7], v1[15], v1[47], v1[39]));
    faces.push(new Face(color1, v1[7], v1[23], v1[55], v1[39]));
    faces.push(new Face(color1, v1[8], v1[9], v1[11], v1[10]));
    faces.push(new Face(color1, v1[8], v1[9], v1[13], v1[12]));
    faces.push(new Face(color1, v1[8], v1[9], v1[25], v1[24]));
    faces.push(new Face(color1, v1[8], v1[9], v1[41], v1[40]));
    faces.push(new Face(color1, v1[8], v1[10], v1[14], v1[12]));
    faces.push(new Face(color1, v1[8], v1[10], v1[26], v1[24]));
    faces.push(new Face(color1, v1[8], v1[10], v1[42], v1[40]));
    faces.push(new Face(color1, v1[8], v1[12], v1[28], v1[24]));
    faces.push(new Face(color1, v1[8], v1[12], v1[44], v1[40]));
    faces.push(new Face(color1, v1[8], v1[24], v1[56], v1[40]));
    faces.push(new Face(color1, v1[9], v1[11], v1[15], v1[13]));
    faces.push(new Face(color1, v1[9], v1[11], v1[27], v1[25]));
    faces.push(new Face(color1, v1[9], v1[11], v1[43], v1[41]));
    faces.push(new Face(color1, v1[9], v1[13], v1[29], v1[25]));
    faces.push(new Face(color1, v1[9], v1[13], v1[45], v1[41]));
    faces.push(new Face(color1, v1[9], v1[25], v1[57], v1[41]));
    faces.push(new Face(color1, v1[10], v1[11], v1[15], v1[14]));
    faces.push(new Face(color1, v1[10], v1[11], v1[27], v1[26]));
    faces.push(new Face(color1, v1[10], v1[11], v1[43], v1[42]));
    faces.push(new Face(color1, v1[10], v1[14], v1[30], v1[26]));
    faces.push(new Face(color1, v1[10], v1[14], v1[46], v1[42]));
    faces.push(new Face(color1, v1[10], v1[26], v1[58], v1[42]));
    faces.push(new Face(color1, v1[11], v1[15], v1[31], v1[27]));
    faces.push(new Face(color1, v1[11], v1[15], v1[47], v1[43]));
    faces.push(new Face(color1, v1[11], v1[27], v1[59], v1[43]));
    faces.push(new Face(color1, v1[12], v1[13], v1[15], v1[14]));
    faces.push(new Face(color1, v1[12], v1[13], v1[29], v1[28]));
    faces.push(new Face(color1, v1[12], v1[13], v1[45], v1[44]));
    faces.push(new Face(color1, v1[12], v1[14], v1[30], v1[28]));
    faces.push(new Face(color1, v1[12], v1[14], v1[46], v1[44]));
    faces.push(new Face(color1, v1[12], v1[28], v1[60], v1[44]));
    faces.push(new Face(color1, v1[13], v1[15], v1[31], v1[29]));
    faces.push(new Face(color1, v1[13], v1[15], v1[47], v1[45]));
    faces.push(new Face(color1, v1[13], v1[29], v1[61], v1[45]));
    faces.push(new Face(color1, v1[14], v1[15], v1[31], v1[30]));
    faces.push(new Face(color1, v1[14], v1[15], v1[47], v1[46]));
    faces.push(new Face(color1, v1[14], v1[30], v1[62], v1[46]));
    faces.push(new Face(color1, v1[15], v1[31], v1[63], v1[47]));
    faces.push(new Face(color1, v1[16], v1[17], v1[19], v1[18]));
    faces.push(new Face(color1, v1[16], v1[17], v1[21], v1[20]));
    faces.push(new Face(color1, v1[16], v1[17], v1[25], v1[24]));
    faces.push(new Face(color1, v1[16], v1[17], v1[49], v1[48]));
    faces.push(new Face(color1, v1[16], v1[18], v1[22], v1[20]));
    faces.push(new Face(color1, v1[16], v1[18], v1[26], v1[24]));
    faces.push(new Face(color1, v1[16], v1[18], v1[50], v1[48]));
    faces.push(new Face(color1, v1[16], v1[20], v1[28], v1[24]));
    faces.push(new Face(color1, v1[16], v1[20], v1[52], v1[48]));
    faces.push(new Face(color1, v1[16], v1[24], v1[56], v1[48]));
    faces.push(new Face(color1, v1[17], v1[19], v1[23], v1[21]));
    faces.push(new Face(color1, v1[17], v1[19], v1[27], v1[25]));
    faces.push(new Face(color1, v1[17], v1[19], v1[51], v1[49]));
    faces.push(new Face(color1, v1[17], v1[21], v1[29], v1[25]));
    faces.push(new Face(color1, v1[17], v1[21], v1[53], v1[49]));
    faces.push(new Face(color1, v1[17], v1[25], v1[57], v1[49]));
    faces.push(new Face(color1, v1[18], v1[19], v1[23], v1[22]));
    faces.push(new Face(color1, v1[18], v1[19], v1[27], v1[26]));
    faces.push(new Face(color1, v1[18], v1[19], v1[51], v1[50]));
    faces.push(new Face(color1, v1[18], v1[22], v1[30], v1[26]));
    faces.push(new Face(color1, v1[18], v1[22], v1[54], v1[50]));
    faces.push(new Face(color1, v1[18], v1[26], v1[58], v1[50]));
    faces.push(new Face(color1, v1[19], v1[23], v1[31], v1[27]));
    faces.push(new Face(color1, v1[19], v1[23], v1[55], v1[51]));
    faces.push(new Face(color1, v1[19], v1[27], v1[59], v1[51]));
    faces.push(new Face(color1, v1[20], v1[21], v1[23], v1[22]));
    faces.push(new Face(color1, v1[20], v1[21], v1[29], v1[28]));
    faces.push(new Face(color1, v1[20], v1[21], v1[53], v1[52]));
    faces.push(new Face(color1, v1[20], v1[22], v1[30], v1[28]));
    faces.push(new Face(color1, v1[20], v1[22], v1[54], v1[52]));
    faces.push(new Face(color1, v1[20], v1[28], v1[60], v1[52]));
    faces.push(new Face(color1, v1[21], v1[23], v1[31], v1[29]));
    faces.push(new Face(color1, v1[21], v1[23], v1[55], v1[53]));
    faces.push(new Face(color1, v1[21], v1[29], v1[61], v1[53]));
    faces.push(new Face(color1, v1[22], v1[23], v1[31], v1[30]));
    faces.push(new Face(color1, v1[22], v1[23], v1[55], v1[54]));
    faces.push(new Face(color1, v1[22], v1[30], v1[62], v1[54]));
    faces.push(new Face(color1, v1[23], v1[31], v1[63], v1[55]));
    faces.push(new Face(color1, v1[24], v1[25], v1[27], v1[26]));
    faces.push(new Face(color1, v1[24], v1[25], v1[29], v1[28]));
    faces.push(new Face(color1, v1[24], v1[25], v1[57], v1[56]));
    faces.push(new Face(color1, v1[24], v1[26], v1[30], v1[28]));
    faces.push(new Face(color1, v1[24], v1[26], v1[58], v1[56]));
    faces.push(new Face(color1, v1[24], v1[28], v1[60], v1[56]));
    faces.push(new Face(color1, v1[25], v1[27], v1[31], v1[29]));
    faces.push(new Face(color1, v1[25], v1[27], v1[59], v1[57]));
    faces.push(new Face(color1, v1[25], v1[29], v1[61], v1[57]));
    faces.push(new Face(color1, v1[26], v1[27], v1[31], v1[30]));
    faces.push(new Face(color1, v1[26], v1[27], v1[59], v1[58]));
    faces.push(new Face(color1, v1[26], v1[30], v1[62], v1[58]));
    faces.push(new Face(color1, v1[27], v1[31], v1[63], v1[59]));
    faces.push(new Face(color1, v1[28], v1[29], v1[31], v1[30]));
    faces.push(new Face(color1, v1[28], v1[29], v1[61], v1[60]));
    faces.push(new Face(color1, v1[28], v1[30], v1[62], v1[60]));
    faces.push(new Face(color1, v1[29], v1[31], v1[63], v1[61]));
    faces.push(new Face(color1, v1[30], v1[31], v1[63], v1[62]));
    faces.push(new Face(color1, v1[32], v1[33], v1[35], v1[34]));
    faces.push(new Face(color1, v1[32], v1[33], v1[37], v1[36]));
    faces.push(new Face(color1, v1[32], v1[33], v1[41], v1[40]));
    faces.push(new Face(color1, v1[32], v1[33], v1[49], v1[48]));
    faces.push(new Face(color1, v1[32], v1[34], v1[38], v1[36]));
    faces.push(new Face(color1, v1[32], v1[34], v1[42], v1[40]));
    faces.push(new Face(color1, v1[32], v1[34], v1[50], v1[48]));
    faces.push(new Face(color1, v1[32], v1[36], v1[44], v1[40]));
    faces.push(new Face(color1, v1[32], v1[36], v1[52], v1[48]));
    faces.push(new Face(color1, v1[32], v1[40], v1[56], v1[48]));
    faces.push(new Face(color1, v1[33], v1[35], v1[39], v1[37]));
    faces.push(new Face(color1, v1[33], v1[35], v1[43], v1[41]));
    faces.push(new Face(color1, v1[33], v1[35], v1[51], v1[49]));
    faces.push(new Face(color1, v1[33], v1[37], v1[45], v1[41]));
    faces.push(new Face(color1, v1[33], v1[37], v1[53], v1[49]));
    faces.push(new Face(color1, v1[33], v1[41], v1[57], v1[49]));
    faces.push(new Face(color1, v1[34], v1[35], v1[39], v1[38]));
    faces.push(new Face(color1, v1[34], v1[35], v1[43], v1[42]));
    faces.push(new Face(color1, v1[34], v1[35], v1[51], v1[50]));
    faces.push(new Face(color1, v1[34], v1[38], v1[46], v1[42]));
    faces.push(new Face(color1, v1[34], v1[38], v1[54], v1[50]));
    faces.push(new Face(color1, v1[34], v1[42], v1[58], v1[50]));
    faces.push(new Face(color1, v1[35], v1[39], v1[47], v1[43]));
    faces.push(new Face(color1, v1[35], v1[39], v1[55], v1[51]));
    faces.push(new Face(color1, v1[35], v1[43], v1[59], v1[51]));
    faces.push(new Face(color1, v1[36], v1[37], v1[39], v1[38]));
    faces.push(new Face(color1, v1[36], v1[37], v1[45], v1[44]));
    faces.push(new Face(color1, v1[36], v1[37], v1[53], v1[52]));
    faces.push(new Face(color1, v1[36], v1[38], v1[46], v1[44]));
    faces.push(new Face(color1, v1[36], v1[38], v1[54], v1[52]));
    faces.push(new Face(color1, v1[36], v1[44], v1[60], v1[52]));
    faces.push(new Face(color1, v1[37], v1[39], v1[47], v1[45]));
    faces.push(new Face(color1, v1[37], v1[39], v1[55], v1[53]));
    faces.push(new Face(color1, v1[37], v1[45], v1[61], v1[53]));
    faces.push(new Face(color1, v1[38], v1[39], v1[47], v1[46]));
    faces.push(new Face(color1, v1[38], v1[39], v1[55], v1[54]));
    faces.push(new Face(color1, v1[38], v1[46], v1[62], v1[54]));
    faces.push(new Face(color1, v1[39], v1[47], v1[63], v1[55]));
    faces.push(new Face(color1, v1[40], v1[41], v1[43], v1[42]));
    faces.push(new Face(color1, v1[40], v1[41], v1[45], v1[44]));
    faces.push(new Face(color1, v1[40], v1[41], v1[57], v1[56]));
    faces.push(new Face(color1, v1[40], v1[42], v1[46], v1[44]));
    faces.push(new Face(color1, v1[40], v1[42], v1[58], v1[56]));
    faces.push(new Face(color1, v1[40], v1[44], v1[60], v1[56]));
    faces.push(new Face(color1, v1[41], v1[43], v1[47], v1[45]));
    faces.push(new Face(color1, v1[41], v1[43], v1[59], v1[57]));
    faces.push(new Face(color1, v1[41], v1[45], v1[61], v1[57]));
    faces.push(new Face(color1, v1[42], v1[43], v1[47], v1[46]));
    faces.push(new Face(color1, v1[42], v1[43], v1[59], v1[58]));
    faces.push(new Face(color1, v1[42], v1[46], v1[62], v1[58]));
    faces.push(new Face(color1, v1[43], v1[47], v1[63], v1[59]));
    faces.push(new Face(color1, v1[44], v1[45], v1[47], v1[46]));
    faces.push(new Face(color1, v1[44], v1[45], v1[61], v1[60]));
    faces.push(new Face(color1, v1[44], v1[46], v1[62], v1[60]));
    faces.push(new Face(color1, v1[45], v1[47], v1[63], v1[61]));
    faces.push(new Face(color1, v1[46], v1[47], v1[63], v1[62]));
    faces.push(new Face(color1, v1[48], v1[49], v1[51], v1[50]));
    faces.push(new Face(color1, v1[48], v1[49], v1[53], v1[52]));
    faces.push(new Face(color1, v1[48], v1[49], v1[57], v1[56]));
    faces.push(new Face(color1, v1[48], v1[50], v1[54], v1[52]));
    faces.push(new Face(color1, v1[48], v1[50], v1[58], v1[56]));
    faces.push(new Face(color1, v1[48], v1[52], v1[60], v1[56]));
    faces.push(new Face(color1, v1[49], v1[51], v1[55], v1[53]));
    faces.push(new Face(color1, v1[49], v1[51], v1[59], v1[57]));
    faces.push(new Face(color1, v1[49], v1[53], v1[61], v1[57]));
    faces.push(new Face(color1, v1[50], v1[51], v1[55], v1[54]));
    faces.push(new Face(color1, v1[50], v1[51], v1[59], v1[58]));
    faces.push(new Face(color1, v1[50], v1[54], v1[62], v1[58]));
    faces.push(new Face(color1, v1[51], v1[55], v1[63], v1[59]));
    faces.push(new Face(color1, v1[52], v1[53], v1[55], v1[54]));
    faces.push(new Face(color1, v1[52], v1[53], v1[61], v1[60]));
    faces.push(new Face(color1, v1[52], v1[54], v1[62], v1[60]));
    faces.push(new Face(color1, v1[53], v1[55], v1[63], v1[61]));
    faces.push(new Face(color1, v1[54], v1[55], v1[63], v1[62]));
    faces.push(new Face(color1, v1[56], v1[57], v1[59], v1[58]));
    faces.push(new Face(color1, v1[56], v1[57], v1[61], v1[60]));
    faces.push(new Face(color1, v1[56], v1[58], v1[62], v1[60]));
    faces.push(new Face(color1, v1[57], v1[59], v1[63], v1[61]));
    faces.push(new Face(color1, v1[58], v1[59], v1[63], v1[62]));
    faces.push(new Face(color1, v1[60], v1[61], v1[63], v1[62]));
    for (let i = 0; i < v1.length; i++) {
        v1[i].rotate(r);
        v1[i].project();
    }

    v2[0] = new Vertex(-w/2, -w/2, -w/2, -w/2, -w/2, -w/2, -w/2);
    v2[1] = new Vertex(-w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v2[2] = new Vertex(-w/2, -w/2, -w/2, -w/2, -w/2, w/2, -w/2);
    v2[3] = new Vertex(-w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v2[4] = new Vertex(-w/2, -w/2, -w/2, -w/2, w/2, -w/2, -w/2);
    v2[5] = new Vertex(-w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v2[6] = new Vertex(-w/2, -w/2, -w/2, -w/2, w/2, w/2, -w/2);
    v2[7] = new Vertex(-w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v2[8] = new Vertex(-w/2, -w/2, -w/2, w/2, -w/2, -w/2, -w/2);
    v2[9] = new Vertex(-w/2, -w/2-Math.sin(theta)*w, -w/2, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v2[10] = new Vertex(-w/2, -w/2, -w/2, w/2, -w/2, w/2, -w/2);
    v2[11] = new Vertex(-w/2, -w/2-Math.sin(theta)*w, -w/2, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v2[12] = new Vertex(-w/2, -w/2, -w/2, w/2, w/2, -w/2, -w/2);
    v2[13] = new Vertex(-w/2, -w/2-Math.sin(theta)*w, -w/2, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v2[14] = new Vertex(-w/2, -w/2, -w/2, w/2, w/2, w/2, -w/2);
    v2[15] = new Vertex(-w/2, -w/2-Math.sin(theta)*w, -w/2, w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v2[16] = new Vertex(-w/2, -w/2, w/2, -w/2, -w/2, -w/2, -w/2);
    v2[17] = new Vertex(-w/2, -w/2-Math.sin(theta)*w, w/2, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v2[18] = new Vertex(-w/2, -w/2, w/2, -w/2, -w/2, w/2, -w/2);
    v2[19] = new Vertex(-w/2, -w/2-Math.sin(theta)*w, w/2, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v2[20] = new Vertex(-w/2, -w/2, w/2, -w/2, w/2, -w/2, -w/2);
    v2[21] = new Vertex(-w/2, -w/2-Math.sin(theta)*w, w/2, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v2[22] = new Vertex(-w/2, -w/2, w/2, -w/2, w/2, w/2, -w/2);
    v2[23] = new Vertex(-w/2, -w/2-Math.sin(theta)*w, w/2, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v2[24] = new Vertex(-w/2, -w/2, w/2, w/2, -w/2, -w/2, -w/2);
    v2[25] = new Vertex(-w/2, -w/2-Math.sin(theta)*w, w/2, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v2[26] = new Vertex(-w/2, -w/2, w/2, w/2, -w/2, w/2, -w/2);
    v2[27] = new Vertex(-w/2, -w/2-Math.sin(theta)*w, w/2, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v2[28] = new Vertex(-w/2, -w/2, w/2, w/2, w/2, -w/2, -w/2);
    v2[29] = new Vertex(-w/2, -w/2-Math.sin(theta)*w, w/2, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v2[30] = new Vertex(-w/2, -w/2, w/2, w/2, w/2, w/2, -w/2);
    v2[31] = new Vertex(-w/2, -w/2-Math.sin(theta)*w, w/2, w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v2[32] = new Vertex(w/2, -w/2, -w/2, -w/2, -w/2, -w/2, -w/2);
    v2[33] = new Vertex(w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v2[34] = new Vertex(w/2, -w/2, -w/2, -w/2, -w/2, w/2, -w/2);
    v2[35] = new Vertex(w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v2[36] = new Vertex(w/2, -w/2, -w/2, -w/2, w/2, -w/2, -w/2);
    v2[37] = new Vertex(w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v2[38] = new Vertex(w/2, -w/2, -w/2, -w/2, w/2, w/2, -w/2);
    v2[39] = new Vertex(w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v2[40] = new Vertex(w/2, -w/2, -w/2, w/2, -w/2, -w/2, -w/2);
    v2[41] = new Vertex(w/2, -w/2-Math.sin(theta)*w, -w/2, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v2[42] = new Vertex(w/2, -w/2, -w/2, w/2, -w/2, w/2, -w/2);
    v2[43] = new Vertex(w/2, -w/2-Math.sin(theta)*w, -w/2, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v2[44] = new Vertex(w/2, -w/2, -w/2, w/2, w/2, -w/2, -w/2);
    v2[45] = new Vertex(w/2, -w/2-Math.sin(theta)*w, -w/2, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v2[46] = new Vertex(w/2, -w/2, -w/2, w/2, w/2, w/2, -w/2);
    v2[47] = new Vertex(w/2, -w/2-Math.sin(theta)*w, -w/2, w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v2[48] = new Vertex(w/2, -w/2, w/2, -w/2, -w/2, -w/2, -w/2);
    v2[49] = new Vertex(w/2, -w/2-Math.sin(theta)*w, w/2, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v2[50] = new Vertex(w/2, -w/2, w/2, -w/2, -w/2, w/2, -w/2);
    v2[51] = new Vertex(w/2, -w/2-Math.sin(theta)*w, w/2, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v2[52] = new Vertex(w/2, -w/2, w/2, -w/2, w/2, -w/2, -w/2);
    v2[53] = new Vertex(w/2, -w/2-Math.sin(theta)*w, w/2, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v2[54] = new Vertex(w/2, -w/2, w/2, -w/2, w/2, w/2, -w/2);
    v2[55] = new Vertex(w/2, -w/2-Math.sin(theta)*w, w/2, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v2[56] = new Vertex(w/2, -w/2, w/2, w/2, -w/2, -w/2, -w/2);
    v2[57] = new Vertex(w/2, -w/2-Math.sin(theta)*w, w/2, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v2[58] = new Vertex(w/2, -w/2, w/2, w/2, -w/2, w/2, -w/2);
    v2[59] = new Vertex(w/2, -w/2-Math.sin(theta)*w, w/2, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v2[60] = new Vertex(w/2, -w/2, w/2, w/2, w/2, -w/2, -w/2);
    v2[61] = new Vertex(w/2, -w/2-Math.sin(theta)*w, w/2, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v2[62] = new Vertex(w/2, -w/2, w/2, w/2, w/2, w/2, -w/2);
    v2[63] = new Vertex(w/2, -w/2-Math.sin(theta)*w, w/2, w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    faces.push(new Face(color2, v2[0], v2[1], v2[3], v2[2]));
    faces.push(new Face(color2, v2[0], v2[1], v2[5], v2[4]));
    faces.push(new Face(color2, v2[0], v2[1], v2[9], v2[8]));
    faces.push(new Face(color2, v2[0], v2[1], v2[17], v2[16]));
    faces.push(new Face(color2, v2[0], v2[1], v2[33], v2[32]));
    faces.push(new Face(color2, v2[0], v2[2], v2[6], v2[4]));
    faces.push(new Face(color2, v2[0], v2[2], v2[10], v2[8]));
    faces.push(new Face(color2, v2[0], v2[2], v2[18], v2[16]));
    faces.push(new Face(color2, v2[0], v2[2], v2[34], v2[32]));
    faces.push(new Face(color2, v2[0], v2[4], v2[12], v2[8]));
    faces.push(new Face(color2, v2[0], v2[4], v2[20], v2[16]));
    faces.push(new Face(color2, v2[0], v2[4], v2[36], v2[32]));
    faces.push(new Face(color2, v2[0], v2[8], v2[24], v2[16]));
    faces.push(new Face(color2, v2[0], v2[8], v2[40], v2[32]));
    faces.push(new Face(color2, v2[0], v2[16], v2[48], v2[32]));
    faces.push(new Face(color2, v2[1], v2[3], v2[7], v2[5]));
    faces.push(new Face(color2, v2[1], v2[3], v2[11], v2[9]));
    faces.push(new Face(color2, v2[1], v2[3], v2[19], v2[17]));
    faces.push(new Face(color2, v2[1], v2[3], v2[35], v2[33]));
    faces.push(new Face(color2, v2[1], v2[5], v2[13], v2[9]));
    faces.push(new Face(color2, v2[1], v2[5], v2[21], v2[17]));
    faces.push(new Face(color2, v2[1], v2[5], v2[37], v2[33]));
    faces.push(new Face(color2, v2[1], v2[9], v2[25], v2[17]));
    faces.push(new Face(color2, v2[1], v2[9], v2[41], v2[33]));
    faces.push(new Face(color2, v2[1], v2[17], v2[49], v2[33]));
    faces.push(new Face(color2, v2[2], v2[3], v2[7], v2[6]));
    faces.push(new Face(color2, v2[2], v2[3], v2[11], v2[10]));
    faces.push(new Face(color2, v2[2], v2[3], v2[19], v2[18]));
    faces.push(new Face(color2, v2[2], v2[3], v2[35], v2[34]));
    faces.push(new Face(color2, v2[2], v2[6], v2[14], v2[10]));
    faces.push(new Face(color2, v2[2], v2[6], v2[22], v2[18]));
    faces.push(new Face(color2, v2[2], v2[6], v2[38], v2[34]));
    faces.push(new Face(color2, v2[2], v2[10], v2[26], v2[18]));
    faces.push(new Face(color2, v2[2], v2[10], v2[42], v2[34]));
    faces.push(new Face(color2, v2[2], v2[18], v2[50], v2[34]));
    faces.push(new Face(color2, v2[3], v2[7], v2[15], v2[11]));
    faces.push(new Face(color2, v2[3], v2[7], v2[23], v2[19]));
    faces.push(new Face(color2, v2[3], v2[7], v2[39], v2[35]));
    faces.push(new Face(color2, v2[3], v2[11], v2[27], v2[19]));
    faces.push(new Face(color2, v2[3], v2[11], v2[43], v2[35]));
    faces.push(new Face(color2, v2[3], v2[19], v2[51], v2[35]));
    faces.push(new Face(color2, v2[4], v2[5], v2[7], v2[6]));
    faces.push(new Face(color2, v2[4], v2[5], v2[13], v2[12]));
    faces.push(new Face(color2, v2[4], v2[5], v2[21], v2[20]));
    faces.push(new Face(color2, v2[4], v2[5], v2[37], v2[36]));
    faces.push(new Face(color2, v2[4], v2[6], v2[14], v2[12]));
    faces.push(new Face(color2, v2[4], v2[6], v2[22], v2[20]));
    faces.push(new Face(color2, v2[4], v2[6], v2[38], v2[36]));
    faces.push(new Face(color2, v2[4], v2[12], v2[28], v2[20]));
    faces.push(new Face(color2, v2[4], v2[12], v2[44], v2[36]));
    faces.push(new Face(color2, v2[4], v2[20], v2[52], v2[36]));
    faces.push(new Face(color2, v2[5], v2[7], v2[15], v2[13]));
    faces.push(new Face(color2, v2[5], v2[7], v2[23], v2[21]));
    faces.push(new Face(color2, v2[5], v2[7], v2[39], v2[37]));
    faces.push(new Face(color2, v2[5], v2[13], v2[29], v2[21]));
    faces.push(new Face(color2, v2[5], v2[13], v2[45], v2[37]));
    faces.push(new Face(color2, v2[5], v2[21], v2[53], v2[37]));
    faces.push(new Face(color2, v2[6], v2[7], v2[15], v2[14]));
    faces.push(new Face(color2, v2[6], v2[7], v2[23], v2[22]));
    faces.push(new Face(color2, v2[6], v2[7], v2[39], v2[38]));
    faces.push(new Face(color2, v2[6], v2[14], v2[30], v2[22]));
    faces.push(new Face(color2, v2[6], v2[14], v2[46], v2[38]));
    faces.push(new Face(color2, v2[6], v2[22], v2[54], v2[38]));
    faces.push(new Face(color2, v2[7], v2[15], v2[31], v2[23]));
    faces.push(new Face(color2, v2[7], v2[15], v2[47], v2[39]));
    faces.push(new Face(color2, v2[7], v2[23], v2[55], v2[39]));
    faces.push(new Face(color2, v2[8], v2[9], v2[11], v2[10]));
    faces.push(new Face(color2, v2[8], v2[9], v2[13], v2[12]));
    faces.push(new Face(color2, v2[8], v2[9], v2[25], v2[24]));
    faces.push(new Face(color2, v2[8], v2[9], v2[41], v2[40]));
    faces.push(new Face(color2, v2[8], v2[10], v2[14], v2[12]));
    faces.push(new Face(color2, v2[8], v2[10], v2[26], v2[24]));
    faces.push(new Face(color2, v2[8], v2[10], v2[42], v2[40]));
    faces.push(new Face(color2, v2[8], v2[12], v2[28], v2[24]));
    faces.push(new Face(color2, v2[8], v2[12], v2[44], v2[40]));
    faces.push(new Face(color2, v2[8], v2[24], v2[56], v2[40]));
    faces.push(new Face(color2, v2[9], v2[11], v2[15], v2[13]));
    faces.push(new Face(color2, v2[9], v2[11], v2[27], v2[25]));
    faces.push(new Face(color2, v2[9], v2[11], v2[43], v2[41]));
    faces.push(new Face(color2, v2[9], v2[13], v2[29], v2[25]));
    faces.push(new Face(color2, v2[9], v2[13], v2[45], v2[41]));
    faces.push(new Face(color2, v2[9], v2[25], v2[57], v2[41]));
    faces.push(new Face(color2, v2[10], v2[11], v2[15], v2[14]));
    faces.push(new Face(color2, v2[10], v2[11], v2[27], v2[26]));
    faces.push(new Face(color2, v2[10], v2[11], v2[43], v2[42]));
    faces.push(new Face(color2, v2[10], v2[14], v2[30], v2[26]));
    faces.push(new Face(color2, v2[10], v2[14], v2[46], v2[42]));
    faces.push(new Face(color2, v2[10], v2[26], v2[58], v2[42]));
    faces.push(new Face(color2, v2[11], v2[15], v2[31], v2[27]));
    faces.push(new Face(color2, v2[11], v2[15], v2[47], v2[43]));
    faces.push(new Face(color2, v2[11], v2[27], v2[59], v2[43]));
    faces.push(new Face(color2, v2[12], v2[13], v2[15], v2[14]));
    faces.push(new Face(color2, v2[12], v2[13], v2[29], v2[28]));
    faces.push(new Face(color2, v2[12], v2[13], v2[45], v2[44]));
    faces.push(new Face(color2, v2[12], v2[14], v2[30], v2[28]));
    faces.push(new Face(color2, v2[12], v2[14], v2[46], v2[44]));
    faces.push(new Face(color2, v2[12], v2[28], v2[60], v2[44]));
    faces.push(new Face(color2, v2[13], v2[15], v2[31], v2[29]));
    faces.push(new Face(color2, v2[13], v2[15], v2[47], v2[45]));
    faces.push(new Face(color2, v2[13], v2[29], v2[61], v2[45]));
    faces.push(new Face(color2, v2[14], v2[15], v2[31], v2[30]));
    faces.push(new Face(color2, v2[14], v2[15], v2[47], v2[46]));
    faces.push(new Face(color2, v2[14], v2[30], v2[62], v2[46]));
    faces.push(new Face(color2, v2[15], v2[31], v2[63], v2[47]));
    faces.push(new Face(color2, v2[16], v2[17], v2[19], v2[18]));
    faces.push(new Face(color2, v2[16], v2[17], v2[21], v2[20]));
    faces.push(new Face(color2, v2[16], v2[17], v2[25], v2[24]));
    faces.push(new Face(color2, v2[16], v2[17], v2[49], v2[48]));
    faces.push(new Face(color2, v2[16], v2[18], v2[22], v2[20]));
    faces.push(new Face(color2, v2[16], v2[18], v2[26], v2[24]));
    faces.push(new Face(color2, v2[16], v2[18], v2[50], v2[48]));
    faces.push(new Face(color2, v2[16], v2[20], v2[28], v2[24]));
    faces.push(new Face(color2, v2[16], v2[20], v2[52], v2[48]));
    faces.push(new Face(color2, v2[16], v2[24], v2[56], v2[48]));
    faces.push(new Face(color2, v2[17], v2[19], v2[23], v2[21]));
    faces.push(new Face(color2, v2[17], v2[19], v2[27], v2[25]));
    faces.push(new Face(color2, v2[17], v2[19], v2[51], v2[49]));
    faces.push(new Face(color2, v2[17], v2[21], v2[29], v2[25]));
    faces.push(new Face(color2, v2[17], v2[21], v2[53], v2[49]));
    faces.push(new Face(color2, v2[17], v2[25], v2[57], v2[49]));
    faces.push(new Face(color2, v2[18], v2[19], v2[23], v2[22]));
    faces.push(new Face(color2, v2[18], v2[19], v2[27], v2[26]));
    faces.push(new Face(color2, v2[18], v2[19], v2[51], v2[50]));
    faces.push(new Face(color2, v2[18], v2[22], v2[30], v2[26]));
    faces.push(new Face(color2, v2[18], v2[22], v2[54], v2[50]));
    faces.push(new Face(color2, v2[18], v2[26], v2[58], v2[50]));
    faces.push(new Face(color2, v2[19], v2[23], v2[31], v2[27]));
    faces.push(new Face(color2, v2[19], v2[23], v2[55], v2[51]));
    faces.push(new Face(color2, v2[19], v2[27], v2[59], v2[51]));
    faces.push(new Face(color2, v2[20], v2[21], v2[23], v2[22]));
    faces.push(new Face(color2, v2[20], v2[21], v2[29], v2[28]));
    faces.push(new Face(color2, v2[20], v2[21], v2[53], v2[52]));
    faces.push(new Face(color2, v2[20], v2[22], v2[30], v2[28]));
    faces.push(new Face(color2, v2[20], v2[22], v2[54], v2[52]));
    faces.push(new Face(color2, v2[20], v2[28], v2[60], v2[52]));
    faces.push(new Face(color2, v2[21], v2[23], v2[31], v2[29]));
    faces.push(new Face(color2, v2[21], v2[23], v2[55], v2[53]));
    faces.push(new Face(color2, v2[21], v2[29], v2[61], v2[53]));
    faces.push(new Face(color2, v2[22], v2[23], v2[31], v2[30]));
    faces.push(new Face(color2, v2[22], v2[23], v2[55], v2[54]));
    faces.push(new Face(color2, v2[22], v2[30], v2[62], v2[54]));
    faces.push(new Face(color2, v2[23], v2[31], v2[63], v2[55]));
    faces.push(new Face(color2, v2[24], v2[25], v2[27], v2[26]));
    faces.push(new Face(color2, v2[24], v2[25], v2[29], v2[28]));
    faces.push(new Face(color2, v2[24], v2[25], v2[57], v2[56]));
    faces.push(new Face(color2, v2[24], v2[26], v2[30], v2[28]));
    faces.push(new Face(color2, v2[24], v2[26], v2[58], v2[56]));
    faces.push(new Face(color2, v2[24], v2[28], v2[60], v2[56]));
    faces.push(new Face(color2, v2[25], v2[27], v2[31], v2[29]));
    faces.push(new Face(color2, v2[25], v2[27], v2[59], v2[57]));
    faces.push(new Face(color2, v2[25], v2[29], v2[61], v2[57]));
    faces.push(new Face(color2, v2[26], v2[27], v2[31], v2[30]));
    faces.push(new Face(color2, v2[26], v2[27], v2[59], v2[58]));
    faces.push(new Face(color2, v2[26], v2[30], v2[62], v2[58]));
    faces.push(new Face(color2, v2[27], v2[31], v2[63], v2[59]));
    faces.push(new Face(color2, v2[28], v2[29], v2[31], v2[30]));
    faces.push(new Face(color2, v2[28], v2[29], v2[61], v2[60]));
    faces.push(new Face(color2, v2[28], v2[30], v2[62], v2[60]));
    faces.push(new Face(color2, v2[29], v2[31], v2[63], v2[61]));
    faces.push(new Face(color2, v2[30], v2[31], v2[63], v2[62]));
    faces.push(new Face(color2, v2[32], v2[33], v2[35], v2[34]));
    faces.push(new Face(color2, v2[32], v2[33], v2[37], v2[36]));
    faces.push(new Face(color2, v2[32], v2[33], v2[41], v2[40]));
    faces.push(new Face(color2, v2[32], v2[33], v2[49], v2[48]));
    faces.push(new Face(color2, v2[32], v2[34], v2[38], v2[36]));
    faces.push(new Face(color2, v2[32], v2[34], v2[42], v2[40]));
    faces.push(new Face(color2, v2[32], v2[34], v2[50], v2[48]));
    faces.push(new Face(color2, v2[32], v2[36], v2[44], v2[40]));
    faces.push(new Face(color2, v2[32], v2[36], v2[52], v2[48]));
    faces.push(new Face(color2, v2[32], v2[40], v2[56], v2[48]));
    faces.push(new Face(color2, v2[33], v2[35], v2[39], v2[37]));
    faces.push(new Face(color2, v2[33], v2[35], v2[43], v2[41]));
    faces.push(new Face(color2, v2[33], v2[35], v2[51], v2[49]));
    faces.push(new Face(color2, v2[33], v2[37], v2[45], v2[41]));
    faces.push(new Face(color2, v2[33], v2[37], v2[53], v2[49]));
    faces.push(new Face(color2, v2[33], v2[41], v2[57], v2[49]));
    faces.push(new Face(color2, v2[34], v2[35], v2[39], v2[38]));
    faces.push(new Face(color2, v2[34], v2[35], v2[43], v2[42]));
    faces.push(new Face(color2, v2[34], v2[35], v2[51], v2[50]));
    faces.push(new Face(color2, v2[34], v2[38], v2[46], v2[42]));
    faces.push(new Face(color2, v2[34], v2[38], v2[54], v2[50]));
    faces.push(new Face(color2, v2[34], v2[42], v2[58], v2[50]));
    faces.push(new Face(color2, v2[35], v2[39], v2[47], v2[43]));
    faces.push(new Face(color2, v2[35], v2[39], v2[55], v2[51]));
    faces.push(new Face(color2, v2[35], v2[43], v2[59], v2[51]));
    faces.push(new Face(color2, v2[36], v2[37], v2[39], v2[38]));
    faces.push(new Face(color2, v2[36], v2[37], v2[45], v2[44]));
    faces.push(new Face(color2, v2[36], v2[37], v2[53], v2[52]));
    faces.push(new Face(color2, v2[36], v2[38], v2[46], v2[44]));
    faces.push(new Face(color2, v2[36], v2[38], v2[54], v2[52]));
    faces.push(new Face(color2, v2[36], v2[44], v2[60], v2[52]));
    faces.push(new Face(color2, v2[37], v2[39], v2[47], v2[45]));
    faces.push(new Face(color2, v2[37], v2[39], v2[55], v2[53]));
    faces.push(new Face(color2, v2[37], v2[45], v2[61], v2[53]));
    faces.push(new Face(color2, v2[38], v2[39], v2[47], v2[46]));
    faces.push(new Face(color2, v2[38], v2[39], v2[55], v2[54]));
    faces.push(new Face(color2, v2[38], v2[46], v2[62], v2[54]));
    faces.push(new Face(color2, v2[39], v2[47], v2[63], v2[55]));
    faces.push(new Face(color2, v2[40], v2[41], v2[43], v2[42]));
    faces.push(new Face(color2, v2[40], v2[41], v2[45], v2[44]));
    faces.push(new Face(color2, v2[40], v2[41], v2[57], v2[56]));
    faces.push(new Face(color2, v2[40], v2[42], v2[46], v2[44]));
    faces.push(new Face(color2, v2[40], v2[42], v2[58], v2[56]));
    faces.push(new Face(color2, v2[40], v2[44], v2[60], v2[56]));
    faces.push(new Face(color2, v2[41], v2[43], v2[47], v2[45]));
    faces.push(new Face(color2, v2[41], v2[43], v2[59], v2[57]));
    faces.push(new Face(color2, v2[41], v2[45], v2[61], v2[57]));
    faces.push(new Face(color2, v2[42], v2[43], v2[47], v2[46]));
    faces.push(new Face(color2, v2[42], v2[43], v2[59], v2[58]));
    faces.push(new Face(color2, v2[42], v2[46], v2[62], v2[58]));
    faces.push(new Face(color2, v2[43], v2[47], v2[63], v2[59]));
    faces.push(new Face(color2, v2[44], v2[45], v2[47], v2[46]));
    faces.push(new Face(color2, v2[44], v2[45], v2[61], v2[60]));
    faces.push(new Face(color2, v2[44], v2[46], v2[62], v2[60]));
    faces.push(new Face(color2, v2[45], v2[47], v2[63], v2[61]));
    faces.push(new Face(color2, v2[46], v2[47], v2[63], v2[62]));
    faces.push(new Face(color2, v2[48], v2[49], v2[51], v2[50]));
    faces.push(new Face(color2, v2[48], v2[49], v2[53], v2[52]));
    faces.push(new Face(color2, v2[48], v2[49], v2[57], v2[56]));
    faces.push(new Face(color2, v2[48], v2[50], v2[54], v2[52]));
    faces.push(new Face(color2, v2[48], v2[50], v2[58], v2[56]));
    faces.push(new Face(color2, v2[48], v2[52], v2[60], v2[56]));
    faces.push(new Face(color2, v2[49], v2[51], v2[55], v2[53]));
    faces.push(new Face(color2, v2[49], v2[51], v2[59], v2[57]));
    faces.push(new Face(color2, v2[49], v2[53], v2[61], v2[57]));
    faces.push(new Face(color2, v2[50], v2[51], v2[55], v2[54]));
    faces.push(new Face(color2, v2[50], v2[51], v2[59], v2[58]));
    faces.push(new Face(color2, v2[50], v2[54], v2[62], v2[58]));
    faces.push(new Face(color2, v2[51], v2[55], v2[63], v2[59]));
    faces.push(new Face(color2, v2[52], v2[53], v2[55], v2[54]));
    faces.push(new Face(color2, v2[52], v2[53], v2[61], v2[60]));
    faces.push(new Face(color2, v2[52], v2[54], v2[62], v2[60]));
    faces.push(new Face(color2, v2[53], v2[55], v2[63], v2[61]));
    faces.push(new Face(color2, v2[54], v2[55], v2[63], v2[62]));
    faces.push(new Face(color2, v2[56], v2[57], v2[59], v2[58]));
    faces.push(new Face(color2, v2[56], v2[57], v2[61], v2[60]));
    faces.push(new Face(color2, v2[56], v2[58], v2[62], v2[60]));
    faces.push(new Face(color2, v2[57], v2[59], v2[63], v2[61]));
    faces.push(new Face(color2, v2[58], v2[59], v2[63], v2[62]));
    faces.push(new Face(color2, v2[60], v2[61], v2[63], v2[62]));
    for (let i = 0; i < v2.length; i++) {
        v2[i].rotate(r);
        v2[i].project();
    }

    v3[0] = new Vertex(-w/2, -w/2, -w/2, -w/2, -w/2, -w/2, -w/2);
    v3[1] = new Vertex(-w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v3[2] = new Vertex(-w/2, -w/2, -w/2, -w/2, -w/2, w/2, -w/2);
    v3[3] = new Vertex(-w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v3[4] = new Vertex(-w/2, -w/2, -w/2, -w/2, w/2, -w/2, -w/2);
    v3[5] = new Vertex(-w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v3[6] = new Vertex(-w/2, -w/2, -w/2, -w/2, w/2, w/2, -w/2);
    v3[7] = new Vertex(-w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v3[8] = new Vertex(-w/2, -w/2, -w/2, w/2, -w/2, -w/2, -w/2);
    v3[9] = new Vertex(-w/2, -w/2, -w/2-Math.sin(theta)*w, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v3[10] = new Vertex(-w/2, -w/2, -w/2, w/2, -w/2, w/2, -w/2);
    v3[11] = new Vertex(-w/2, -w/2, -w/2-Math.sin(theta)*w, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v3[12] = new Vertex(-w/2, -w/2, -w/2, w/2, w/2, -w/2, -w/2);
    v3[13] = new Vertex(-w/2, -w/2, -w/2-Math.sin(theta)*w, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v3[14] = new Vertex(-w/2, -w/2, -w/2, w/2, w/2, w/2, -w/2);
    v3[15] = new Vertex(-w/2, -w/2, -w/2-Math.sin(theta)*w, w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v3[16] = new Vertex(-w/2, w/2, -w/2, -w/2, -w/2, -w/2, -w/2);
    v3[17] = new Vertex(-w/2, w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v3[18] = new Vertex(-w/2, w/2, -w/2, -w/2, -w/2, w/2, -w/2);
    v3[19] = new Vertex(-w/2, w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v3[20] = new Vertex(-w/2, w/2, -w/2, -w/2, w/2, -w/2, -w/2);
    v3[21] = new Vertex(-w/2, w/2, -w/2-Math.sin(theta)*w, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v3[22] = new Vertex(-w/2, w/2, -w/2, -w/2, w/2, w/2, -w/2);
    v3[23] = new Vertex(-w/2, w/2, -w/2-Math.sin(theta)*w, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v3[24] = new Vertex(-w/2, w/2, -w/2, w/2, -w/2, -w/2, -w/2);
    v3[25] = new Vertex(-w/2, w/2, -w/2-Math.sin(theta)*w, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v3[26] = new Vertex(-w/2, w/2, -w/2, w/2, -w/2, w/2, -w/2);
    v3[27] = new Vertex(-w/2, w/2, -w/2-Math.sin(theta)*w, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v3[28] = new Vertex(-w/2, w/2, -w/2, w/2, w/2, -w/2, -w/2);
    v3[29] = new Vertex(-w/2, w/2, -w/2-Math.sin(theta)*w, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v3[30] = new Vertex(-w/2, w/2, -w/2, w/2, w/2, w/2, -w/2);
    v3[31] = new Vertex(-w/2, w/2, -w/2-Math.sin(theta)*w, w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v3[32] = new Vertex(w/2, -w/2, -w/2, -w/2, -w/2, -w/2, -w/2);
    v3[33] = new Vertex(w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v3[34] = new Vertex(w/2, -w/2, -w/2, -w/2, -w/2, w/2, -w/2);
    v3[35] = new Vertex(w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v3[36] = new Vertex(w/2, -w/2, -w/2, -w/2, w/2, -w/2, -w/2);
    v3[37] = new Vertex(w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v3[38] = new Vertex(w/2, -w/2, -w/2, -w/2, w/2, w/2, -w/2);
    v3[39] = new Vertex(w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v3[40] = new Vertex(w/2, -w/2, -w/2, w/2, -w/2, -w/2, -w/2);
    v3[41] = new Vertex(w/2, -w/2, -w/2-Math.sin(theta)*w, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v3[42] = new Vertex(w/2, -w/2, -w/2, w/2, -w/2, w/2, -w/2);
    v3[43] = new Vertex(w/2, -w/2, -w/2-Math.sin(theta)*w, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v3[44] = new Vertex(w/2, -w/2, -w/2, w/2, w/2, -w/2, -w/2);
    v3[45] = new Vertex(w/2, -w/2, -w/2-Math.sin(theta)*w, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v3[46] = new Vertex(w/2, -w/2, -w/2, w/2, w/2, w/2, -w/2);
    v3[47] = new Vertex(w/2, -w/2, -w/2-Math.sin(theta)*w, w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v3[48] = new Vertex(w/2, w/2, -w/2, -w/2, -w/2, -w/2, -w/2);
    v3[49] = new Vertex(w/2, w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v3[50] = new Vertex(w/2, w/2, -w/2, -w/2, -w/2, w/2, -w/2);
    v3[51] = new Vertex(w/2, w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v3[52] = new Vertex(w/2, w/2, -w/2, -w/2, w/2, -w/2, -w/2);
    v3[53] = new Vertex(w/2, w/2, -w/2-Math.sin(theta)*w, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v3[54] = new Vertex(w/2, w/2, -w/2, -w/2, w/2, w/2, -w/2);
    v3[55] = new Vertex(w/2, w/2, -w/2-Math.sin(theta)*w, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v3[56] = new Vertex(w/2, w/2, -w/2, w/2, -w/2, -w/2, -w/2);
    v3[57] = new Vertex(w/2, w/2, -w/2-Math.sin(theta)*w, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v3[58] = new Vertex(w/2, w/2, -w/2, w/2, -w/2, w/2, -w/2);
    v3[59] = new Vertex(w/2, w/2, -w/2-Math.sin(theta)*w, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v3[60] = new Vertex(w/2, w/2, -w/2, w/2, w/2, -w/2, -w/2);
    v3[61] = new Vertex(w/2, w/2, -w/2-Math.sin(theta)*w, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v3[62] = new Vertex(w/2, w/2, -w/2, w/2, w/2, w/2, -w/2);
    v3[63] = new Vertex(w/2, w/2, -w/2-Math.sin(theta)*w, w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    faces.push(new Face(color3, v3[0], v3[1], v3[3], v3[2]));
    faces.push(new Face(color3, v3[0], v3[1], v3[5], v3[4]));
    faces.push(new Face(color3, v3[0], v3[1], v3[9], v3[8]));
    faces.push(new Face(color3, v3[0], v3[1], v3[17], v3[16]));
    faces.push(new Face(color3, v3[0], v3[1], v3[33], v3[32]));
    faces.push(new Face(color3, v3[0], v3[2], v3[6], v3[4]));
    faces.push(new Face(color3, v3[0], v3[2], v3[10], v3[8]));
    faces.push(new Face(color3, v3[0], v3[2], v3[18], v3[16]));
    faces.push(new Face(color3, v3[0], v3[2], v3[34], v3[32]));
    faces.push(new Face(color3, v3[0], v3[4], v3[12], v3[8]));
    faces.push(new Face(color3, v3[0], v3[4], v3[20], v3[16]));
    faces.push(new Face(color3, v3[0], v3[4], v3[36], v3[32]));
    faces.push(new Face(color3, v3[0], v3[8], v3[24], v3[16]));
    faces.push(new Face(color3, v3[0], v3[8], v3[40], v3[32]));
    faces.push(new Face(color3, v3[0], v3[16], v3[48], v3[32]));
    faces.push(new Face(color3, v3[1], v3[3], v3[7], v3[5]));
    faces.push(new Face(color3, v3[1], v3[3], v3[11], v3[9]));
    faces.push(new Face(color3, v3[1], v3[3], v3[19], v3[17]));
    faces.push(new Face(color3, v3[1], v3[3], v3[35], v3[33]));
    faces.push(new Face(color3, v3[1], v3[5], v3[13], v3[9]));
    faces.push(new Face(color3, v3[1], v3[5], v3[21], v3[17]));
    faces.push(new Face(color3, v3[1], v3[5], v3[37], v3[33]));
    faces.push(new Face(color3, v3[1], v3[9], v3[25], v3[17]));
    faces.push(new Face(color3, v3[1], v3[9], v3[41], v3[33]));
    faces.push(new Face(color3, v3[1], v3[17], v3[49], v3[33]));
    faces.push(new Face(color3, v3[2], v3[3], v3[7], v3[6]));
    faces.push(new Face(color3, v3[2], v3[3], v3[11], v3[10]));
    faces.push(new Face(color3, v3[2], v3[3], v3[19], v3[18]));
    faces.push(new Face(color3, v3[2], v3[3], v3[35], v3[34]));
    faces.push(new Face(color3, v3[2], v3[6], v3[14], v3[10]));
    faces.push(new Face(color3, v3[2], v3[6], v3[22], v3[18]));
    faces.push(new Face(color3, v3[2], v3[6], v3[38], v3[34]));
    faces.push(new Face(color3, v3[2], v3[10], v3[26], v3[18]));
    faces.push(new Face(color3, v3[2], v3[10], v3[42], v3[34]));
    faces.push(new Face(color3, v3[2], v3[18], v3[50], v3[34]));
    faces.push(new Face(color3, v3[3], v3[7], v3[15], v3[11]));
    faces.push(new Face(color3, v3[3], v3[7], v3[23], v3[19]));
    faces.push(new Face(color3, v3[3], v3[7], v3[39], v3[35]));
    faces.push(new Face(color3, v3[3], v3[11], v3[27], v3[19]));
    faces.push(new Face(color3, v3[3], v3[11], v3[43], v3[35]));
    faces.push(new Face(color3, v3[3], v3[19], v3[51], v3[35]));
    faces.push(new Face(color3, v3[4], v3[5], v3[7], v3[6]));
    faces.push(new Face(color3, v3[4], v3[5], v3[13], v3[12]));
    faces.push(new Face(color3, v3[4], v3[5], v3[21], v3[20]));
    faces.push(new Face(color3, v3[4], v3[5], v3[37], v3[36]));
    faces.push(new Face(color3, v3[4], v3[6], v3[14], v3[12]));
    faces.push(new Face(color3, v3[4], v3[6], v3[22], v3[20]));
    faces.push(new Face(color3, v3[4], v3[6], v3[38], v3[36]));
    faces.push(new Face(color3, v3[4], v3[12], v3[28], v3[20]));
    faces.push(new Face(color3, v3[4], v3[12], v3[44], v3[36]));
    faces.push(new Face(color3, v3[4], v3[20], v3[52], v3[36]));
    faces.push(new Face(color3, v3[5], v3[7], v3[15], v3[13]));
    faces.push(new Face(color3, v3[5], v3[7], v3[23], v3[21]));
    faces.push(new Face(color3, v3[5], v3[7], v3[39], v3[37]));
    faces.push(new Face(color3, v3[5], v3[13], v3[29], v3[21]));
    faces.push(new Face(color3, v3[5], v3[13], v3[45], v3[37]));
    faces.push(new Face(color3, v3[5], v3[21], v3[53], v3[37]));
    faces.push(new Face(color3, v3[6], v3[7], v3[15], v3[14]));
    faces.push(new Face(color3, v3[6], v3[7], v3[23], v3[22]));
    faces.push(new Face(color3, v3[6], v3[7], v3[39], v3[38]));
    faces.push(new Face(color3, v3[6], v3[14], v3[30], v3[22]));
    faces.push(new Face(color3, v3[6], v3[14], v3[46], v3[38]));
    faces.push(new Face(color3, v3[6], v3[22], v3[54], v3[38]));
    faces.push(new Face(color3, v3[7], v3[15], v3[31], v3[23]));
    faces.push(new Face(color3, v3[7], v3[15], v3[47], v3[39]));
    faces.push(new Face(color3, v3[7], v3[23], v3[55], v3[39]));
    faces.push(new Face(color3, v3[8], v3[9], v3[11], v3[10]));
    faces.push(new Face(color3, v3[8], v3[9], v3[13], v3[12]));
    faces.push(new Face(color3, v3[8], v3[9], v3[25], v3[24]));
    faces.push(new Face(color3, v3[8], v3[9], v3[41], v3[40]));
    faces.push(new Face(color3, v3[8], v3[10], v3[14], v3[12]));
    faces.push(new Face(color3, v3[8], v3[10], v3[26], v3[24]));
    faces.push(new Face(color3, v3[8], v3[10], v3[42], v3[40]));
    faces.push(new Face(color3, v3[8], v3[12], v3[28], v3[24]));
    faces.push(new Face(color3, v3[8], v3[12], v3[44], v3[40]));
    faces.push(new Face(color3, v3[8], v3[24], v3[56], v3[40]));
    faces.push(new Face(color3, v3[9], v3[11], v3[15], v3[13]));
    faces.push(new Face(color3, v3[9], v3[11], v3[27], v3[25]));
    faces.push(new Face(color3, v3[9], v3[11], v3[43], v3[41]));
    faces.push(new Face(color3, v3[9], v3[13], v3[29], v3[25]));
    faces.push(new Face(color3, v3[9], v3[13], v3[45], v3[41]));
    faces.push(new Face(color3, v3[9], v3[25], v3[57], v3[41]));
    faces.push(new Face(color3, v3[10], v3[11], v3[15], v3[14]));
    faces.push(new Face(color3, v3[10], v3[11], v3[27], v3[26]));
    faces.push(new Face(color3, v3[10], v3[11], v3[43], v3[42]));
    faces.push(new Face(color3, v3[10], v3[14], v3[30], v3[26]));
    faces.push(new Face(color3, v3[10], v3[14], v3[46], v3[42]));
    faces.push(new Face(color3, v3[10], v3[26], v3[58], v3[42]));
    faces.push(new Face(color3, v3[11], v3[15], v3[31], v3[27]));
    faces.push(new Face(color3, v3[11], v3[15], v3[47], v3[43]));
    faces.push(new Face(color3, v3[11], v3[27], v3[59], v3[43]));
    faces.push(new Face(color3, v3[12], v3[13], v3[15], v3[14]));
    faces.push(new Face(color3, v3[12], v3[13], v3[29], v3[28]));
    faces.push(new Face(color3, v3[12], v3[13], v3[45], v3[44]));
    faces.push(new Face(color3, v3[12], v3[14], v3[30], v3[28]));
    faces.push(new Face(color3, v3[12], v3[14], v3[46], v3[44]));
    faces.push(new Face(color3, v3[12], v3[28], v3[60], v3[44]));
    faces.push(new Face(color3, v3[13], v3[15], v3[31], v3[29]));
    faces.push(new Face(color3, v3[13], v3[15], v3[47], v3[45]));
    faces.push(new Face(color3, v3[13], v3[29], v3[61], v3[45]));
    faces.push(new Face(color3, v3[14], v3[15], v3[31], v3[30]));
    faces.push(new Face(color3, v3[14], v3[15], v3[47], v3[46]));
    faces.push(new Face(color3, v3[14], v3[30], v3[62], v3[46]));
    faces.push(new Face(color3, v3[15], v3[31], v3[63], v3[47]));
    faces.push(new Face(color3, v3[16], v3[17], v3[19], v3[18]));
    faces.push(new Face(color3, v3[16], v3[17], v3[21], v3[20]));
    faces.push(new Face(color3, v3[16], v3[17], v3[25], v3[24]));
    faces.push(new Face(color3, v3[16], v3[17], v3[49], v3[48]));
    faces.push(new Face(color3, v3[16], v3[18], v3[22], v3[20]));
    faces.push(new Face(color3, v3[16], v3[18], v3[26], v3[24]));
    faces.push(new Face(color3, v3[16], v3[18], v3[50], v3[48]));
    faces.push(new Face(color3, v3[16], v3[20], v3[28], v3[24]));
    faces.push(new Face(color3, v3[16], v3[20], v3[52], v3[48]));
    faces.push(new Face(color3, v3[16], v3[24], v3[56], v3[48]));
    faces.push(new Face(color3, v3[17], v3[19], v3[23], v3[21]));
    faces.push(new Face(color3, v3[17], v3[19], v3[27], v3[25]));
    faces.push(new Face(color3, v3[17], v3[19], v3[51], v3[49]));
    faces.push(new Face(color3, v3[17], v3[21], v3[29], v3[25]));
    faces.push(new Face(color3, v3[17], v3[21], v3[53], v3[49]));
    faces.push(new Face(color3, v3[17], v3[25], v3[57], v3[49]));
    faces.push(new Face(color3, v3[18], v3[19], v3[23], v3[22]));
    faces.push(new Face(color3, v3[18], v3[19], v3[27], v3[26]));
    faces.push(new Face(color3, v3[18], v3[19], v3[51], v3[50]));
    faces.push(new Face(color3, v3[18], v3[22], v3[30], v3[26]));
    faces.push(new Face(color3, v3[18], v3[22], v3[54], v3[50]));
    faces.push(new Face(color3, v3[18], v3[26], v3[58], v3[50]));
    faces.push(new Face(color3, v3[19], v3[23], v3[31], v3[27]));
    faces.push(new Face(color3, v3[19], v3[23], v3[55], v3[51]));
    faces.push(new Face(color3, v3[19], v3[27], v3[59], v3[51]));
    faces.push(new Face(color3, v3[20], v3[21], v3[23], v3[22]));
    faces.push(new Face(color3, v3[20], v3[21], v3[29], v3[28]));
    faces.push(new Face(color3, v3[20], v3[21], v3[53], v3[52]));
    faces.push(new Face(color3, v3[20], v3[22], v3[30], v3[28]));
    faces.push(new Face(color3, v3[20], v3[22], v3[54], v3[52]));
    faces.push(new Face(color3, v3[20], v3[28], v3[60], v3[52]));
    faces.push(new Face(color3, v3[21], v3[23], v3[31], v3[29]));
    faces.push(new Face(color3, v3[21], v3[23], v3[55], v3[53]));
    faces.push(new Face(color3, v3[21], v3[29], v3[61], v3[53]));
    faces.push(new Face(color3, v3[22], v3[23], v3[31], v3[30]));
    faces.push(new Face(color3, v3[22], v3[23], v3[55], v3[54]));
    faces.push(new Face(color3, v3[22], v3[30], v3[62], v3[54]));
    faces.push(new Face(color3, v3[23], v3[31], v3[63], v3[55]));
    faces.push(new Face(color3, v3[24], v3[25], v3[27], v3[26]));
    faces.push(new Face(color3, v3[24], v3[25], v3[29], v3[28]));
    faces.push(new Face(color3, v3[24], v3[25], v3[57], v3[56]));
    faces.push(new Face(color3, v3[24], v3[26], v3[30], v3[28]));
    faces.push(new Face(color3, v3[24], v3[26], v3[58], v3[56]));
    faces.push(new Face(color3, v3[24], v3[28], v3[60], v3[56]));
    faces.push(new Face(color3, v3[25], v3[27], v3[31], v3[29]));
    faces.push(new Face(color3, v3[25], v3[27], v3[59], v3[57]));
    faces.push(new Face(color3, v3[25], v3[29], v3[61], v3[57]));
    faces.push(new Face(color3, v3[26], v3[27], v3[31], v3[30]));
    faces.push(new Face(color3, v3[26], v3[27], v3[59], v3[58]));
    faces.push(new Face(color3, v3[26], v3[30], v3[62], v3[58]));
    faces.push(new Face(color3, v3[27], v3[31], v3[63], v3[59]));
    faces.push(new Face(color3, v3[28], v3[29], v3[31], v3[30]));
    faces.push(new Face(color3, v3[28], v3[29], v3[61], v3[60]));
    faces.push(new Face(color3, v3[28], v3[30], v3[62], v3[60]));
    faces.push(new Face(color3, v3[29], v3[31], v3[63], v3[61]));
    faces.push(new Face(color3, v3[30], v3[31], v3[63], v3[62]));
    faces.push(new Face(color3, v3[32], v3[33], v3[35], v3[34]));
    faces.push(new Face(color3, v3[32], v3[33], v3[37], v3[36]));
    faces.push(new Face(color3, v3[32], v3[33], v3[41], v3[40]));
    faces.push(new Face(color3, v3[32], v3[33], v3[49], v3[48]));
    faces.push(new Face(color3, v3[32], v3[34], v3[38], v3[36]));
    faces.push(new Face(color3, v3[32], v3[34], v3[42], v3[40]));
    faces.push(new Face(color3, v3[32], v3[34], v3[50], v3[48]));
    faces.push(new Face(color3, v3[32], v3[36], v3[44], v3[40]));
    faces.push(new Face(color3, v3[32], v3[36], v3[52], v3[48]));
    faces.push(new Face(color3, v3[32], v3[40], v3[56], v3[48]));
    faces.push(new Face(color3, v3[33], v3[35], v3[39], v3[37]));
    faces.push(new Face(color3, v3[33], v3[35], v3[43], v3[41]));
    faces.push(new Face(color3, v3[33], v3[35], v3[51], v3[49]));
    faces.push(new Face(color3, v3[33], v3[37], v3[45], v3[41]));
    faces.push(new Face(color3, v3[33], v3[37], v3[53], v3[49]));
    faces.push(new Face(color3, v3[33], v3[41], v3[57], v3[49]));
    faces.push(new Face(color3, v3[34], v3[35], v3[39], v3[38]));
    faces.push(new Face(color3, v3[34], v3[35], v3[43], v3[42]));
    faces.push(new Face(color3, v3[34], v3[35], v3[51], v3[50]));
    faces.push(new Face(color3, v3[34], v3[38], v3[46], v3[42]));
    faces.push(new Face(color3, v3[34], v3[38], v3[54], v3[50]));
    faces.push(new Face(color3, v3[34], v3[42], v3[58], v3[50]));
    faces.push(new Face(color3, v3[35], v3[39], v3[47], v3[43]));
    faces.push(new Face(color3, v3[35], v3[39], v3[55], v3[51]));
    faces.push(new Face(color3, v3[35], v3[43], v3[59], v3[51]));
    faces.push(new Face(color3, v3[36], v3[37], v3[39], v3[38]));
    faces.push(new Face(color3, v3[36], v3[37], v3[45], v3[44]));
    faces.push(new Face(color3, v3[36], v3[37], v3[53], v3[52]));
    faces.push(new Face(color3, v3[36], v3[38], v3[46], v3[44]));
    faces.push(new Face(color3, v3[36], v3[38], v3[54], v3[52]));
    faces.push(new Face(color3, v3[36], v3[44], v3[60], v3[52]));
    faces.push(new Face(color3, v3[37], v3[39], v3[47], v3[45]));
    faces.push(new Face(color3, v3[37], v3[39], v3[55], v3[53]));
    faces.push(new Face(color3, v3[37], v3[45], v3[61], v3[53]));
    faces.push(new Face(color3, v3[38], v3[39], v3[47], v3[46]));
    faces.push(new Face(color3, v3[38], v3[39], v3[55], v3[54]));
    faces.push(new Face(color3, v3[38], v3[46], v3[62], v3[54]));
    faces.push(new Face(color3, v3[39], v3[47], v3[63], v3[55]));
    faces.push(new Face(color3, v3[40], v3[41], v3[43], v3[42]));
    faces.push(new Face(color3, v3[40], v3[41], v3[45], v3[44]));
    faces.push(new Face(color3, v3[40], v3[41], v3[57], v3[56]));
    faces.push(new Face(color3, v3[40], v3[42], v3[46], v3[44]));
    faces.push(new Face(color3, v3[40], v3[42], v3[58], v3[56]));
    faces.push(new Face(color3, v3[40], v3[44], v3[60], v3[56]));
    faces.push(new Face(color3, v3[41], v3[43], v3[47], v3[45]));
    faces.push(new Face(color3, v3[41], v3[43], v3[59], v3[57]));
    faces.push(new Face(color3, v3[41], v3[45], v3[61], v3[57]));
    faces.push(new Face(color3, v3[42], v3[43], v3[47], v3[46]));
    faces.push(new Face(color3, v3[42], v3[43], v3[59], v3[58]));
    faces.push(new Face(color3, v3[42], v3[46], v3[62], v3[58]));
    faces.push(new Face(color3, v3[43], v3[47], v3[63], v3[59]));
    faces.push(new Face(color3, v3[44], v3[45], v3[47], v3[46]));
    faces.push(new Face(color3, v3[44], v3[45], v3[61], v3[60]));
    faces.push(new Face(color3, v3[44], v3[46], v3[62], v3[60]));
    faces.push(new Face(color3, v3[45], v3[47], v3[63], v3[61]));
    faces.push(new Face(color3, v3[46], v3[47], v3[63], v3[62]));
    faces.push(new Face(color3, v3[48], v3[49], v3[51], v3[50]));
    faces.push(new Face(color3, v3[48], v3[49], v3[53], v3[52]));
    faces.push(new Face(color3, v3[48], v3[49], v3[57], v3[56]));
    faces.push(new Face(color3, v3[48], v3[50], v3[54], v3[52]));
    faces.push(new Face(color3, v3[48], v3[50], v3[58], v3[56]));
    faces.push(new Face(color3, v3[48], v3[52], v3[60], v3[56]));
    faces.push(new Face(color3, v3[49], v3[51], v3[55], v3[53]));
    faces.push(new Face(color3, v3[49], v3[51], v3[59], v3[57]));
    faces.push(new Face(color3, v3[49], v3[53], v3[61], v3[57]));
    faces.push(new Face(color3, v3[50], v3[51], v3[55], v3[54]));
    faces.push(new Face(color3, v3[50], v3[51], v3[59], v3[58]));
    faces.push(new Face(color3, v3[50], v3[54], v3[62], v3[58]));
    faces.push(new Face(color3, v3[51], v3[55], v3[63], v3[59]));
    faces.push(new Face(color3, v3[52], v3[53], v3[55], v3[54]));
    faces.push(new Face(color3, v3[52], v3[53], v3[61], v3[60]));
    faces.push(new Face(color3, v3[52], v3[54], v3[62], v3[60]));
    faces.push(new Face(color3, v3[53], v3[55], v3[63], v3[61]));
    faces.push(new Face(color3, v3[54], v3[55], v3[63], v3[62]));
    faces.push(new Face(color3, v3[56], v3[57], v3[59], v3[58]));
    faces.push(new Face(color3, v3[56], v3[57], v3[61], v3[60]));
    faces.push(new Face(color3, v3[56], v3[58], v3[62], v3[60]));
    faces.push(new Face(color3, v3[57], v3[59], v3[63], v3[61]));
    faces.push(new Face(color3, v3[58], v3[59], v3[63], v3[62]));
    faces.push(new Face(color3, v3[60], v3[61], v3[63], v3[62]));
    for (let i = 0; i < v3.length; i++) {
        v3[i].rotate(r);
        v3[i].project();
    }

    v4[0] = new Vertex(-w/2, -w/2, -w/2, -w/2, -w/2, -w/2, -w/2);
    v4[1] = new Vertex(-w/2, -w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v4[2] = new Vertex(-w/2, -w/2, -w/2, -w/2, -w/2, w/2, -w/2);
    v4[3] = new Vertex(-w/2, -w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v4[4] = new Vertex(-w/2, -w/2, -w/2, -w/2, w/2, -w/2, -w/2);
    v4[5] = new Vertex(-w/2, -w/2, -w/2, -w/2-Math.sin(theta)*w, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v4[6] = new Vertex(-w/2, -w/2, -w/2, -w/2, w/2, w/2, -w/2);
    v4[7] = new Vertex(-w/2, -w/2, -w/2, -w/2-Math.sin(theta)*w, w/2, w/2, -w/2+Math.cos(theta)*w);
    v4[8] = new Vertex(-w/2, -w/2, w/2, -w/2, -w/2, -w/2, -w/2);
    v4[9] = new Vertex(-w/2, -w/2, w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v4[10] = new Vertex(-w/2, -w/2, w/2, -w/2, -w/2, w/2, -w/2);
    v4[11] = new Vertex(-w/2, -w/2, w/2, -w/2-Math.sin(theta)*w, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v4[12] = new Vertex(-w/2, -w/2, w/2, -w/2, w/2, -w/2, -w/2);
    v4[13] = new Vertex(-w/2, -w/2, w/2, -w/2-Math.sin(theta)*w, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v4[14] = new Vertex(-w/2, -w/2, w/2, -w/2, w/2, w/2, -w/2);
    v4[15] = new Vertex(-w/2, -w/2, w/2, -w/2-Math.sin(theta)*w, w/2, w/2, -w/2+Math.cos(theta)*w);
    v4[16] = new Vertex(-w/2, w/2, -w/2, -w/2, -w/2, -w/2, -w/2);
    v4[17] = new Vertex(-w/2, w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v4[18] = new Vertex(-w/2, w/2, -w/2, -w/2, -w/2, w/2, -w/2);
    v4[19] = new Vertex(-w/2, w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v4[20] = new Vertex(-w/2, w/2, -w/2, -w/2, w/2, -w/2, -w/2);
    v4[21] = new Vertex(-w/2, w/2, -w/2, -w/2-Math.sin(theta)*w, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v4[22] = new Vertex(-w/2, w/2, -w/2, -w/2, w/2, w/2, -w/2);
    v4[23] = new Vertex(-w/2, w/2, -w/2, -w/2-Math.sin(theta)*w, w/2, w/2, -w/2+Math.cos(theta)*w);
    v4[24] = new Vertex(-w/2, w/2, w/2, -w/2, -w/2, -w/2, -w/2);
    v4[25] = new Vertex(-w/2, w/2, w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v4[26] = new Vertex(-w/2, w/2, w/2, -w/2, -w/2, w/2, -w/2);
    v4[27] = new Vertex(-w/2, w/2, w/2, -w/2-Math.sin(theta)*w, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v4[28] = new Vertex(-w/2, w/2, w/2, -w/2, w/2, -w/2, -w/2);
    v4[29] = new Vertex(-w/2, w/2, w/2, -w/2-Math.sin(theta)*w, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v4[30] = new Vertex(-w/2, w/2, w/2, -w/2, w/2, w/2, -w/2);
    v4[31] = new Vertex(-w/2, w/2, w/2, -w/2-Math.sin(theta)*w, w/2, w/2, -w/2+Math.cos(theta)*w);
    v4[32] = new Vertex(w/2, -w/2, -w/2, -w/2, -w/2, -w/2, -w/2);
    v4[33] = new Vertex(w/2, -w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v4[34] = new Vertex(w/2, -w/2, -w/2, -w/2, -w/2, w/2, -w/2);
    v4[35] = new Vertex(w/2, -w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v4[36] = new Vertex(w/2, -w/2, -w/2, -w/2, w/2, -w/2, -w/2);
    v4[37] = new Vertex(w/2, -w/2, -w/2, -w/2-Math.sin(theta)*w, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v4[38] = new Vertex(w/2, -w/2, -w/2, -w/2, w/2, w/2, -w/2);
    v4[39] = new Vertex(w/2, -w/2, -w/2, -w/2-Math.sin(theta)*w, w/2, w/2, -w/2+Math.cos(theta)*w);
    v4[40] = new Vertex(w/2, -w/2, w/2, -w/2, -w/2, -w/2, -w/2);
    v4[41] = new Vertex(w/2, -w/2, w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v4[42] = new Vertex(w/2, -w/2, w/2, -w/2, -w/2, w/2, -w/2);
    v4[43] = new Vertex(w/2, -w/2, w/2, -w/2-Math.sin(theta)*w, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v4[44] = new Vertex(w/2, -w/2, w/2, -w/2, w/2, -w/2, -w/2);
    v4[45] = new Vertex(w/2, -w/2, w/2, -w/2-Math.sin(theta)*w, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v4[46] = new Vertex(w/2, -w/2, w/2, -w/2, w/2, w/2, -w/2);
    v4[47] = new Vertex(w/2, -w/2, w/2, -w/2-Math.sin(theta)*w, w/2, w/2, -w/2+Math.cos(theta)*w);
    v4[48] = new Vertex(w/2, w/2, -w/2, -w/2, -w/2, -w/2, -w/2);
    v4[49] = new Vertex(w/2, w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v4[50] = new Vertex(w/2, w/2, -w/2, -w/2, -w/2, w/2, -w/2);
    v4[51] = new Vertex(w/2, w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v4[52] = new Vertex(w/2, w/2, -w/2, -w/2, w/2, -w/2, -w/2);
    v4[53] = new Vertex(w/2, w/2, -w/2, -w/2-Math.sin(theta)*w, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v4[54] = new Vertex(w/2, w/2, -w/2, -w/2, w/2, w/2, -w/2);
    v4[55] = new Vertex(w/2, w/2, -w/2, -w/2-Math.sin(theta)*w, w/2, w/2, -w/2+Math.cos(theta)*w);
    v4[56] = new Vertex(w/2, w/2, w/2, -w/2, -w/2, -w/2, -w/2);
    v4[57] = new Vertex(w/2, w/2, w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v4[58] = new Vertex(w/2, w/2, w/2, -w/2, -w/2, w/2, -w/2);
    v4[59] = new Vertex(w/2, w/2, w/2, -w/2-Math.sin(theta)*w, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v4[60] = new Vertex(w/2, w/2, w/2, -w/2, w/2, -w/2, -w/2);
    v4[61] = new Vertex(w/2, w/2, w/2, -w/2-Math.sin(theta)*w, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v4[62] = new Vertex(w/2, w/2, w/2, -w/2, w/2, w/2, -w/2);
    v4[63] = new Vertex(w/2, w/2, w/2, -w/2-Math.sin(theta)*w, w/2, w/2, -w/2+Math.cos(theta)*w);
    faces.push(new Face(color4, v4[0], v4[1], v4[3], v4[2]));
    faces.push(new Face(color4, v4[0], v4[1], v4[5], v4[4]));
    faces.push(new Face(color4, v4[0], v4[1], v4[9], v4[8]));
    faces.push(new Face(color4, v4[0], v4[1], v4[17], v4[16]));
    faces.push(new Face(color4, v4[0], v4[1], v4[33], v4[32]));
    faces.push(new Face(color4, v4[0], v4[2], v4[6], v4[4]));
    faces.push(new Face(color4, v4[0], v4[2], v4[10], v4[8]));
    faces.push(new Face(color4, v4[0], v4[2], v4[18], v4[16]));
    faces.push(new Face(color4, v4[0], v4[2], v4[34], v4[32]));
    faces.push(new Face(color4, v4[0], v4[4], v4[12], v4[8]));
    faces.push(new Face(color4, v4[0], v4[4], v4[20], v4[16]));
    faces.push(new Face(color4, v4[0], v4[4], v4[36], v4[32]));
    faces.push(new Face(color4, v4[0], v4[8], v4[24], v4[16]));
    faces.push(new Face(color4, v4[0], v4[8], v4[40], v4[32]));
    faces.push(new Face(color4, v4[0], v4[16], v4[48], v4[32]));
    faces.push(new Face(color4, v4[1], v4[3], v4[7], v4[5]));
    faces.push(new Face(color4, v4[1], v4[3], v4[11], v4[9]));
    faces.push(new Face(color4, v4[1], v4[3], v4[19], v4[17]));
    faces.push(new Face(color4, v4[1], v4[3], v4[35], v4[33]));
    faces.push(new Face(color4, v4[1], v4[5], v4[13], v4[9]));
    faces.push(new Face(color4, v4[1], v4[5], v4[21], v4[17]));
    faces.push(new Face(color4, v4[1], v4[5], v4[37], v4[33]));
    faces.push(new Face(color4, v4[1], v4[9], v4[25], v4[17]));
    faces.push(new Face(color4, v4[1], v4[9], v4[41], v4[33]));
    faces.push(new Face(color4, v4[1], v4[17], v4[49], v4[33]));
    faces.push(new Face(color4, v4[2], v4[3], v4[7], v4[6]));
    faces.push(new Face(color4, v4[2], v4[3], v4[11], v4[10]));
    faces.push(new Face(color4, v4[2], v4[3], v4[19], v4[18]));
    faces.push(new Face(color4, v4[2], v4[3], v4[35], v4[34]));
    faces.push(new Face(color4, v4[2], v4[6], v4[14], v4[10]));
    faces.push(new Face(color4, v4[2], v4[6], v4[22], v4[18]));
    faces.push(new Face(color4, v4[2], v4[6], v4[38], v4[34]));
    faces.push(new Face(color4, v4[2], v4[10], v4[26], v4[18]));
    faces.push(new Face(color4, v4[2], v4[10], v4[42], v4[34]));
    faces.push(new Face(color4, v4[2], v4[18], v4[50], v4[34]));
    faces.push(new Face(color4, v4[3], v4[7], v4[15], v4[11]));
    faces.push(new Face(color4, v4[3], v4[7], v4[23], v4[19]));
    faces.push(new Face(color4, v4[3], v4[7], v4[39], v4[35]));
    faces.push(new Face(color4, v4[3], v4[11], v4[27], v4[19]));
    faces.push(new Face(color4, v4[3], v4[11], v4[43], v4[35]));
    faces.push(new Face(color4, v4[3], v4[19], v4[51], v4[35]));
    faces.push(new Face(color4, v4[4], v4[5], v4[7], v4[6]));
    faces.push(new Face(color4, v4[4], v4[5], v4[13], v4[12]));
    faces.push(new Face(color4, v4[4], v4[5], v4[21], v4[20]));
    faces.push(new Face(color4, v4[4], v4[5], v4[37], v4[36]));
    faces.push(new Face(color4, v4[4], v4[6], v4[14], v4[12]));
    faces.push(new Face(color4, v4[4], v4[6], v4[22], v4[20]));
    faces.push(new Face(color4, v4[4], v4[6], v4[38], v4[36]));
    faces.push(new Face(color4, v4[4], v4[12], v4[28], v4[20]));
    faces.push(new Face(color4, v4[4], v4[12], v4[44], v4[36]));
    faces.push(new Face(color4, v4[4], v4[20], v4[52], v4[36]));
    faces.push(new Face(color4, v4[5], v4[7], v4[15], v4[13]));
    faces.push(new Face(color4, v4[5], v4[7], v4[23], v4[21]));
    faces.push(new Face(color4, v4[5], v4[7], v4[39], v4[37]));
    faces.push(new Face(color4, v4[5], v4[13], v4[29], v4[21]));
    faces.push(new Face(color4, v4[5], v4[13], v4[45], v4[37]));
    faces.push(new Face(color4, v4[5], v4[21], v4[53], v4[37]));
    faces.push(new Face(color4, v4[6], v4[7], v4[15], v4[14]));
    faces.push(new Face(color4, v4[6], v4[7], v4[23], v4[22]));
    faces.push(new Face(color4, v4[6], v4[7], v4[39], v4[38]));
    faces.push(new Face(color4, v4[6], v4[14], v4[30], v4[22]));
    faces.push(new Face(color4, v4[6], v4[14], v4[46], v4[38]));
    faces.push(new Face(color4, v4[6], v4[22], v4[54], v4[38]));
    faces.push(new Face(color4, v4[7], v4[15], v4[31], v4[23]));
    faces.push(new Face(color4, v4[7], v4[15], v4[47], v4[39]));
    faces.push(new Face(color4, v4[7], v4[23], v4[55], v4[39]));
    faces.push(new Face(color4, v4[8], v4[9], v4[11], v4[10]));
    faces.push(new Face(color4, v4[8], v4[9], v4[13], v4[12]));
    faces.push(new Face(color4, v4[8], v4[9], v4[25], v4[24]));
    faces.push(new Face(color4, v4[8], v4[9], v4[41], v4[40]));
    faces.push(new Face(color4, v4[8], v4[10], v4[14], v4[12]));
    faces.push(new Face(color4, v4[8], v4[10], v4[26], v4[24]));
    faces.push(new Face(color4, v4[8], v4[10], v4[42], v4[40]));
    faces.push(new Face(color4, v4[8], v4[12], v4[28], v4[24]));
    faces.push(new Face(color4, v4[8], v4[12], v4[44], v4[40]));
    faces.push(new Face(color4, v4[8], v4[24], v4[56], v4[40]));
    faces.push(new Face(color4, v4[9], v4[11], v4[15], v4[13]));
    faces.push(new Face(color4, v4[9], v4[11], v4[27], v4[25]));
    faces.push(new Face(color4, v4[9], v4[11], v4[43], v4[41]));
    faces.push(new Face(color4, v4[9], v4[13], v4[29], v4[25]));
    faces.push(new Face(color4, v4[9], v4[13], v4[45], v4[41]));
    faces.push(new Face(color4, v4[9], v4[25], v4[57], v4[41]));
    faces.push(new Face(color4, v4[10], v4[11], v4[15], v4[14]));
    faces.push(new Face(color4, v4[10], v4[11], v4[27], v4[26]));
    faces.push(new Face(color4, v4[10], v4[11], v4[43], v4[42]));
    faces.push(new Face(color4, v4[10], v4[14], v4[30], v4[26]));
    faces.push(new Face(color4, v4[10], v4[14], v4[46], v4[42]));
    faces.push(new Face(color4, v4[10], v4[26], v4[58], v4[42]));
    faces.push(new Face(color4, v4[11], v4[15], v4[31], v4[27]));
    faces.push(new Face(color4, v4[11], v4[15], v4[47], v4[43]));
    faces.push(new Face(color4, v4[11], v4[27], v4[59], v4[43]));
    faces.push(new Face(color4, v4[12], v4[13], v4[15], v4[14]));
    faces.push(new Face(color4, v4[12], v4[13], v4[29], v4[28]));
    faces.push(new Face(color4, v4[12], v4[13], v4[45], v4[44]));
    faces.push(new Face(color4, v4[12], v4[14], v4[30], v4[28]));
    faces.push(new Face(color4, v4[12], v4[14], v4[46], v4[44]));
    faces.push(new Face(color4, v4[12], v4[28], v4[60], v4[44]));
    faces.push(new Face(color4, v4[13], v4[15], v4[31], v4[29]));
    faces.push(new Face(color4, v4[13], v4[15], v4[47], v4[45]));
    faces.push(new Face(color4, v4[13], v4[29], v4[61], v4[45]));
    faces.push(new Face(color4, v4[14], v4[15], v4[31], v4[30]));
    faces.push(new Face(color4, v4[14], v4[15], v4[47], v4[46]));
    faces.push(new Face(color4, v4[14], v4[30], v4[62], v4[46]));
    faces.push(new Face(color4, v4[15], v4[31], v4[63], v4[47]));
    faces.push(new Face(color4, v4[16], v4[17], v4[19], v4[18]));
    faces.push(new Face(color4, v4[16], v4[17], v4[21], v4[20]));
    faces.push(new Face(color4, v4[16], v4[17], v4[25], v4[24]));
    faces.push(new Face(color4, v4[16], v4[17], v4[49], v4[48]));
    faces.push(new Face(color4, v4[16], v4[18], v4[22], v4[20]));
    faces.push(new Face(color4, v4[16], v4[18], v4[26], v4[24]));
    faces.push(new Face(color4, v4[16], v4[18], v4[50], v4[48]));
    faces.push(new Face(color4, v4[16], v4[20], v4[28], v4[24]));
    faces.push(new Face(color4, v4[16], v4[20], v4[52], v4[48]));
    faces.push(new Face(color4, v4[16], v4[24], v4[56], v4[48]));
    faces.push(new Face(color4, v4[17], v4[19], v4[23], v4[21]));
    faces.push(new Face(color4, v4[17], v4[19], v4[27], v4[25]));
    faces.push(new Face(color4, v4[17], v4[19], v4[51], v4[49]));
    faces.push(new Face(color4, v4[17], v4[21], v4[29], v4[25]));
    faces.push(new Face(color4, v4[17], v4[21], v4[53], v4[49]));
    faces.push(new Face(color4, v4[17], v4[25], v4[57], v4[49]));
    faces.push(new Face(color4, v4[18], v4[19], v4[23], v4[22]));
    faces.push(new Face(color4, v4[18], v4[19], v4[27], v4[26]));
    faces.push(new Face(color4, v4[18], v4[19], v4[51], v4[50]));
    faces.push(new Face(color4, v4[18], v4[22], v4[30], v4[26]));
    faces.push(new Face(color4, v4[18], v4[22], v4[54], v4[50]));
    faces.push(new Face(color4, v4[18], v4[26], v4[58], v4[50]));
    faces.push(new Face(color4, v4[19], v4[23], v4[31], v4[27]));
    faces.push(new Face(color4, v4[19], v4[23], v4[55], v4[51]));
    faces.push(new Face(color4, v4[19], v4[27], v4[59], v4[51]));
    faces.push(new Face(color4, v4[20], v4[21], v4[23], v4[22]));
    faces.push(new Face(color4, v4[20], v4[21], v4[29], v4[28]));
    faces.push(new Face(color4, v4[20], v4[21], v4[53], v4[52]));
    faces.push(new Face(color4, v4[20], v4[22], v4[30], v4[28]));
    faces.push(new Face(color4, v4[20], v4[22], v4[54], v4[52]));
    faces.push(new Face(color4, v4[20], v4[28], v4[60], v4[52]));
    faces.push(new Face(color4, v4[21], v4[23], v4[31], v4[29]));
    faces.push(new Face(color4, v4[21], v4[23], v4[55], v4[53]));
    faces.push(new Face(color4, v4[21], v4[29], v4[61], v4[53]));
    faces.push(new Face(color4, v4[22], v4[23], v4[31], v4[30]));
    faces.push(new Face(color4, v4[22], v4[23], v4[55], v4[54]));
    faces.push(new Face(color4, v4[22], v4[30], v4[62], v4[54]));
    faces.push(new Face(color4, v4[23], v4[31], v4[63], v4[55]));
    faces.push(new Face(color4, v4[24], v4[25], v4[27], v4[26]));
    faces.push(new Face(color4, v4[24], v4[25], v4[29], v4[28]));
    faces.push(new Face(color4, v4[24], v4[25], v4[57], v4[56]));
    faces.push(new Face(color4, v4[24], v4[26], v4[30], v4[28]));
    faces.push(new Face(color4, v4[24], v4[26], v4[58], v4[56]));
    faces.push(new Face(color4, v4[24], v4[28], v4[60], v4[56]));
    faces.push(new Face(color4, v4[25], v4[27], v4[31], v4[29]));
    faces.push(new Face(color4, v4[25], v4[27], v4[59], v4[57]));
    faces.push(new Face(color4, v4[25], v4[29], v4[61], v4[57]));
    faces.push(new Face(color4, v4[26], v4[27], v4[31], v4[30]));
    faces.push(new Face(color4, v4[26], v4[27], v4[59], v4[58]));
    faces.push(new Face(color4, v4[26], v4[30], v4[62], v4[58]));
    faces.push(new Face(color4, v4[27], v4[31], v4[63], v4[59]));
    faces.push(new Face(color4, v4[28], v4[29], v4[31], v4[30]));
    faces.push(new Face(color4, v4[28], v4[29], v4[61], v4[60]));
    faces.push(new Face(color4, v4[28], v4[30], v4[62], v4[60]));
    faces.push(new Face(color4, v4[29], v4[31], v4[63], v4[61]));
    faces.push(new Face(color4, v4[30], v4[31], v4[63], v4[62]));
    faces.push(new Face(color4, v4[32], v4[33], v4[35], v4[34]));
    faces.push(new Face(color4, v4[32], v4[33], v4[37], v4[36]));
    faces.push(new Face(color4, v4[32], v4[33], v4[41], v4[40]));
    faces.push(new Face(color4, v4[32], v4[33], v4[49], v4[48]));
    faces.push(new Face(color4, v4[32], v4[34], v4[38], v4[36]));
    faces.push(new Face(color4, v4[32], v4[34], v4[42], v4[40]));
    faces.push(new Face(color4, v4[32], v4[34], v4[50], v4[48]));
    faces.push(new Face(color4, v4[32], v4[36], v4[44], v4[40]));
    faces.push(new Face(color4, v4[32], v4[36], v4[52], v4[48]));
    faces.push(new Face(color4, v4[32], v4[40], v4[56], v4[48]));
    faces.push(new Face(color4, v4[33], v4[35], v4[39], v4[37]));
    faces.push(new Face(color4, v4[33], v4[35], v4[43], v4[41]));
    faces.push(new Face(color4, v4[33], v4[35], v4[51], v4[49]));
    faces.push(new Face(color4, v4[33], v4[37], v4[45], v4[41]));
    faces.push(new Face(color4, v4[33], v4[37], v4[53], v4[49]));
    faces.push(new Face(color4, v4[33], v4[41], v4[57], v4[49]));
    faces.push(new Face(color4, v4[34], v4[35], v4[39], v4[38]));
    faces.push(new Face(color4, v4[34], v4[35], v4[43], v4[42]));
    faces.push(new Face(color4, v4[34], v4[35], v4[51], v4[50]));
    faces.push(new Face(color4, v4[34], v4[38], v4[46], v4[42]));
    faces.push(new Face(color4, v4[34], v4[38], v4[54], v4[50]));
    faces.push(new Face(color4, v4[34], v4[42], v4[58], v4[50]));
    faces.push(new Face(color4, v4[35], v4[39], v4[47], v4[43]));
    faces.push(new Face(color4, v4[35], v4[39], v4[55], v4[51]));
    faces.push(new Face(color4, v4[35], v4[43], v4[59], v4[51]));
    faces.push(new Face(color4, v4[36], v4[37], v4[39], v4[38]));
    faces.push(new Face(color4, v4[36], v4[37], v4[45], v4[44]));
    faces.push(new Face(color4, v4[36], v4[37], v4[53], v4[52]));
    faces.push(new Face(color4, v4[36], v4[38], v4[46], v4[44]));
    faces.push(new Face(color4, v4[36], v4[38], v4[54], v4[52]));
    faces.push(new Face(color4, v4[36], v4[44], v4[60], v4[52]));
    faces.push(new Face(color4, v4[37], v4[39], v4[47], v4[45]));
    faces.push(new Face(color4, v4[37], v4[39], v4[55], v4[53]));
    faces.push(new Face(color4, v4[37], v4[45], v4[61], v4[53]));
    faces.push(new Face(color4, v4[38], v4[39], v4[47], v4[46]));
    faces.push(new Face(color4, v4[38], v4[39], v4[55], v4[54]));
    faces.push(new Face(color4, v4[38], v4[46], v4[62], v4[54]));
    faces.push(new Face(color4, v4[39], v4[47], v4[63], v4[55]));
    faces.push(new Face(color4, v4[40], v4[41], v4[43], v4[42]));
    faces.push(new Face(color4, v4[40], v4[41], v4[45], v4[44]));
    faces.push(new Face(color4, v4[40], v4[41], v4[57], v4[56]));
    faces.push(new Face(color4, v4[40], v4[42], v4[46], v4[44]));
    faces.push(new Face(color4, v4[40], v4[42], v4[58], v4[56]));
    faces.push(new Face(color4, v4[40], v4[44], v4[60], v4[56]));
    faces.push(new Face(color4, v4[41], v4[43], v4[47], v4[45]));
    faces.push(new Face(color4, v4[41], v4[43], v4[59], v4[57]));
    faces.push(new Face(color4, v4[41], v4[45], v4[61], v4[57]));
    faces.push(new Face(color4, v4[42], v4[43], v4[47], v4[46]));
    faces.push(new Face(color4, v4[42], v4[43], v4[59], v4[58]));
    faces.push(new Face(color4, v4[42], v4[46], v4[62], v4[58]));
    faces.push(new Face(color4, v4[43], v4[47], v4[63], v4[59]));
    faces.push(new Face(color4, v4[44], v4[45], v4[47], v4[46]));
    faces.push(new Face(color4, v4[44], v4[45], v4[61], v4[60]));
    faces.push(new Face(color4, v4[44], v4[46], v4[62], v4[60]));
    faces.push(new Face(color4, v4[45], v4[47], v4[63], v4[61]));
    faces.push(new Face(color4, v4[46], v4[47], v4[63], v4[62]));
    faces.push(new Face(color4, v4[48], v4[49], v4[51], v4[50]));
    faces.push(new Face(color4, v4[48], v4[49], v4[53], v4[52]));
    faces.push(new Face(color4, v4[48], v4[49], v4[57], v4[56]));
    faces.push(new Face(color4, v4[48], v4[50], v4[54], v4[52]));
    faces.push(new Face(color4, v4[48], v4[50], v4[58], v4[56]));
    faces.push(new Face(color4, v4[48], v4[52], v4[60], v4[56]));
    faces.push(new Face(color4, v4[49], v4[51], v4[55], v4[53]));
    faces.push(new Face(color4, v4[49], v4[51], v4[59], v4[57]));
    faces.push(new Face(color4, v4[49], v4[53], v4[61], v4[57]));
    faces.push(new Face(color4, v4[50], v4[51], v4[55], v4[54]));
    faces.push(new Face(color4, v4[50], v4[51], v4[59], v4[58]));
    faces.push(new Face(color4, v4[50], v4[54], v4[62], v4[58]));
    faces.push(new Face(color4, v4[51], v4[55], v4[63], v4[59]));
    faces.push(new Face(color4, v4[52], v4[53], v4[55], v4[54]));
    faces.push(new Face(color4, v4[52], v4[53], v4[61], v4[60]));
    faces.push(new Face(color4, v4[52], v4[54], v4[62], v4[60]));
    faces.push(new Face(color4, v4[53], v4[55], v4[63], v4[61]));
    faces.push(new Face(color4, v4[54], v4[55], v4[63], v4[62]));
    faces.push(new Face(color4, v4[56], v4[57], v4[59], v4[58]));
    faces.push(new Face(color4, v4[56], v4[57], v4[61], v4[60]));
    faces.push(new Face(color4, v4[56], v4[58], v4[62], v4[60]));
    faces.push(new Face(color4, v4[57], v4[59], v4[63], v4[61]));
    faces.push(new Face(color4, v4[58], v4[59], v4[63], v4[62]));
    faces.push(new Face(color4, v4[60], v4[61], v4[63], v4[62]));
    for (let i = 0; i < v4.length; i++) {
        v4[i].rotate(r);
        v4[i].project();
    }

    v5[0] = new Vertex(-w/2, -w/2, -w/2, -w/2, -w/2, -w/2, -w/2);
    v5[1] = new Vertex(-w/2, -w/2, -w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v5[2] = new Vertex(-w/2, -w/2, -w/2, -w/2, -w/2, w/2, -w/2);
    v5[3] = new Vertex(-w/2, -w/2, -w/2, -w/2, -w/2-Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v5[4] = new Vertex(-w/2, -w/2, -w/2, w/2, -w/2, -w/2, -w/2);
    v5[5] = new Vertex(-w/2, -w/2, -w/2, w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v5[6] = new Vertex(-w/2, -w/2, -w/2, w/2, -w/2, w/2, -w/2);
    v5[7] = new Vertex(-w/2, -w/2, -w/2, w/2, -w/2-Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v5[8] = new Vertex(-w/2, -w/2, w/2, -w/2, -w/2, -w/2, -w/2);
    v5[9] = new Vertex(-w/2, -w/2, w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v5[10] = new Vertex(-w/2, -w/2, w/2, -w/2, -w/2, w/2, -w/2);
    v5[11] = new Vertex(-w/2, -w/2, w/2, -w/2, -w/2-Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v5[12] = new Vertex(-w/2, -w/2, w/2, w/2, -w/2, -w/2, -w/2);
    v5[13] = new Vertex(-w/2, -w/2, w/2, w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v5[14] = new Vertex(-w/2, -w/2, w/2, w/2, -w/2, w/2, -w/2);
    v5[15] = new Vertex(-w/2, -w/2, w/2, w/2, -w/2-Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v5[16] = new Vertex(-w/2, w/2, -w/2, -w/2, -w/2, -w/2, -w/2);
    v5[17] = new Vertex(-w/2, w/2, -w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v5[18] = new Vertex(-w/2, w/2, -w/2, -w/2, -w/2, w/2, -w/2);
    v5[19] = new Vertex(-w/2, w/2, -w/2, -w/2, -w/2-Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v5[20] = new Vertex(-w/2, w/2, -w/2, w/2, -w/2, -w/2, -w/2);
    v5[21] = new Vertex(-w/2, w/2, -w/2, w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v5[22] = new Vertex(-w/2, w/2, -w/2, w/2, -w/2, w/2, -w/2);
    v5[23] = new Vertex(-w/2, w/2, -w/2, w/2, -w/2-Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v5[24] = new Vertex(-w/2, w/2, w/2, -w/2, -w/2, -w/2, -w/2);
    v5[25] = new Vertex(-w/2, w/2, w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v5[26] = new Vertex(-w/2, w/2, w/2, -w/2, -w/2, w/2, -w/2);
    v5[27] = new Vertex(-w/2, w/2, w/2, -w/2, -w/2-Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v5[28] = new Vertex(-w/2, w/2, w/2, w/2, -w/2, -w/2, -w/2);
    v5[29] = new Vertex(-w/2, w/2, w/2, w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v5[30] = new Vertex(-w/2, w/2, w/2, w/2, -w/2, w/2, -w/2);
    v5[31] = new Vertex(-w/2, w/2, w/2, w/2, -w/2-Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v5[32] = new Vertex(w/2, -w/2, -w/2, -w/2, -w/2, -w/2, -w/2);
    v5[33] = new Vertex(w/2, -w/2, -w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v5[34] = new Vertex(w/2, -w/2, -w/2, -w/2, -w/2, w/2, -w/2);
    v5[35] = new Vertex(w/2, -w/2, -w/2, -w/2, -w/2-Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v5[36] = new Vertex(w/2, -w/2, -w/2, w/2, -w/2, -w/2, -w/2);
    v5[37] = new Vertex(w/2, -w/2, -w/2, w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v5[38] = new Vertex(w/2, -w/2, -w/2, w/2, -w/2, w/2, -w/2);
    v5[39] = new Vertex(w/2, -w/2, -w/2, w/2, -w/2-Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v5[40] = new Vertex(w/2, -w/2, w/2, -w/2, -w/2, -w/2, -w/2);
    v5[41] = new Vertex(w/2, -w/2, w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v5[42] = new Vertex(w/2, -w/2, w/2, -w/2, -w/2, w/2, -w/2);
    v5[43] = new Vertex(w/2, -w/2, w/2, -w/2, -w/2-Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v5[44] = new Vertex(w/2, -w/2, w/2, w/2, -w/2, -w/2, -w/2);
    v5[45] = new Vertex(w/2, -w/2, w/2, w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v5[46] = new Vertex(w/2, -w/2, w/2, w/2, -w/2, w/2, -w/2);
    v5[47] = new Vertex(w/2, -w/2, w/2, w/2, -w/2-Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v5[48] = new Vertex(w/2, w/2, -w/2, -w/2, -w/2, -w/2, -w/2);
    v5[49] = new Vertex(w/2, w/2, -w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v5[50] = new Vertex(w/2, w/2, -w/2, -w/2, -w/2, w/2, -w/2);
    v5[51] = new Vertex(w/2, w/2, -w/2, -w/2, -w/2-Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v5[52] = new Vertex(w/2, w/2, -w/2, w/2, -w/2, -w/2, -w/2);
    v5[53] = new Vertex(w/2, w/2, -w/2, w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v5[54] = new Vertex(w/2, w/2, -w/2, w/2, -w/2, w/2, -w/2);
    v5[55] = new Vertex(w/2, w/2, -w/2, w/2, -w/2-Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v5[56] = new Vertex(w/2, w/2, w/2, -w/2, -w/2, -w/2, -w/2);
    v5[57] = new Vertex(w/2, w/2, w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v5[58] = new Vertex(w/2, w/2, w/2, -w/2, -w/2, w/2, -w/2);
    v5[59] = new Vertex(w/2, w/2, w/2, -w/2, -w/2-Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v5[60] = new Vertex(w/2, w/2, w/2, w/2, -w/2, -w/2, -w/2);
    v5[61] = new Vertex(w/2, w/2, w/2, w/2, -w/2-Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v5[62] = new Vertex(w/2, w/2, w/2, w/2, -w/2, w/2, -w/2);
    v5[63] = new Vertex(w/2, w/2, w/2, w/2, -w/2-Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    faces.push(new Face(color5, v5[0], v5[1], v5[3], v5[2]));
    faces.push(new Face(color5, v5[0], v5[1], v5[5], v5[4]));
    faces.push(new Face(color5, v5[0], v5[1], v5[9], v5[8]));
    faces.push(new Face(color5, v5[0], v5[1], v5[17], v5[16]));
    faces.push(new Face(color5, v5[0], v5[1], v5[33], v5[32]));
    faces.push(new Face(color5, v5[0], v5[2], v5[6], v5[4]));
    faces.push(new Face(color5, v5[0], v5[2], v5[10], v5[8]));
    faces.push(new Face(color5, v5[0], v5[2], v5[18], v5[16]));
    faces.push(new Face(color5, v5[0], v5[2], v5[34], v5[32]));
    faces.push(new Face(color5, v5[0], v5[4], v5[12], v5[8]));
    faces.push(new Face(color5, v5[0], v5[4], v5[20], v5[16]));
    faces.push(new Face(color5, v5[0], v5[4], v5[36], v5[32]));
    faces.push(new Face(color5, v5[0], v5[8], v5[24], v5[16]));
    faces.push(new Face(color5, v5[0], v5[8], v5[40], v5[32]));
    faces.push(new Face(color5, v5[0], v5[16], v5[48], v5[32]));
    faces.push(new Face(color5, v5[1], v5[3], v5[7], v5[5]));
    faces.push(new Face(color5, v5[1], v5[3], v5[11], v5[9]));
    faces.push(new Face(color5, v5[1], v5[3], v5[19], v5[17]));
    faces.push(new Face(color5, v5[1], v5[3], v5[35], v5[33]));
    faces.push(new Face(color5, v5[1], v5[5], v5[13], v5[9]));
    faces.push(new Face(color5, v5[1], v5[5], v5[21], v5[17]));
    faces.push(new Face(color5, v5[1], v5[5], v5[37], v5[33]));
    faces.push(new Face(color5, v5[1], v5[9], v5[25], v5[17]));
    faces.push(new Face(color5, v5[1], v5[9], v5[41], v5[33]));
    faces.push(new Face(color5, v5[1], v5[17], v5[49], v5[33]));
    faces.push(new Face(color5, v5[2], v5[3], v5[7], v5[6]));
    faces.push(new Face(color5, v5[2], v5[3], v5[11], v5[10]));
    faces.push(new Face(color5, v5[2], v5[3], v5[19], v5[18]));
    faces.push(new Face(color5, v5[2], v5[3], v5[35], v5[34]));
    faces.push(new Face(color5, v5[2], v5[6], v5[14], v5[10]));
    faces.push(new Face(color5, v5[2], v5[6], v5[22], v5[18]));
    faces.push(new Face(color5, v5[2], v5[6], v5[38], v5[34]));
    faces.push(new Face(color5, v5[2], v5[10], v5[26], v5[18]));
    faces.push(new Face(color5, v5[2], v5[10], v5[42], v5[34]));
    faces.push(new Face(color5, v5[2], v5[18], v5[50], v5[34]));
    faces.push(new Face(color5, v5[3], v5[7], v5[15], v5[11]));
    faces.push(new Face(color5, v5[3], v5[7], v5[23], v5[19]));
    faces.push(new Face(color5, v5[3], v5[7], v5[39], v5[35]));
    faces.push(new Face(color5, v5[3], v5[11], v5[27], v5[19]));
    faces.push(new Face(color5, v5[3], v5[11], v5[43], v5[35]));
    faces.push(new Face(color5, v5[3], v5[19], v5[51], v5[35]));
    faces.push(new Face(color5, v5[4], v5[5], v5[7], v5[6]));
    faces.push(new Face(color5, v5[4], v5[5], v5[13], v5[12]));
    faces.push(new Face(color5, v5[4], v5[5], v5[21], v5[20]));
    faces.push(new Face(color5, v5[4], v5[5], v5[37], v5[36]));
    faces.push(new Face(color5, v5[4], v5[6], v5[14], v5[12]));
    faces.push(new Face(color5, v5[4], v5[6], v5[22], v5[20]));
    faces.push(new Face(color5, v5[4], v5[6], v5[38], v5[36]));
    faces.push(new Face(color5, v5[4], v5[12], v5[28], v5[20]));
    faces.push(new Face(color5, v5[4], v5[12], v5[44], v5[36]));
    faces.push(new Face(color5, v5[4], v5[20], v5[52], v5[36]));
    faces.push(new Face(color5, v5[5], v5[7], v5[15], v5[13]));
    faces.push(new Face(color5, v5[5], v5[7], v5[23], v5[21]));
    faces.push(new Face(color5, v5[5], v5[7], v5[39], v5[37]));
    faces.push(new Face(color5, v5[5], v5[13], v5[29], v5[21]));
    faces.push(new Face(color5, v5[5], v5[13], v5[45], v5[37]));
    faces.push(new Face(color5, v5[5], v5[21], v5[53], v5[37]));
    faces.push(new Face(color5, v5[6], v5[7], v5[15], v5[14]));
    faces.push(new Face(color5, v5[6], v5[7], v5[23], v5[22]));
    faces.push(new Face(color5, v5[6], v5[7], v5[39], v5[38]));
    faces.push(new Face(color5, v5[6], v5[14], v5[30], v5[22]));
    faces.push(new Face(color5, v5[6], v5[14], v5[46], v5[38]));
    faces.push(new Face(color5, v5[6], v5[22], v5[54], v5[38]));
    faces.push(new Face(color5, v5[7], v5[15], v5[31], v5[23]));
    faces.push(new Face(color5, v5[7], v5[15], v5[47], v5[39]));
    faces.push(new Face(color5, v5[7], v5[23], v5[55], v5[39]));
    faces.push(new Face(color5, v5[8], v5[9], v5[11], v5[10]));
    faces.push(new Face(color5, v5[8], v5[9], v5[13], v5[12]));
    faces.push(new Face(color5, v5[8], v5[9], v5[25], v5[24]));
    faces.push(new Face(color5, v5[8], v5[9], v5[41], v5[40]));
    faces.push(new Face(color5, v5[8], v5[10], v5[14], v5[12]));
    faces.push(new Face(color5, v5[8], v5[10], v5[26], v5[24]));
    faces.push(new Face(color5, v5[8], v5[10], v5[42], v5[40]));
    faces.push(new Face(color5, v5[8], v5[12], v5[28], v5[24]));
    faces.push(new Face(color5, v5[8], v5[12], v5[44], v5[40]));
    faces.push(new Face(color5, v5[8], v5[24], v5[56], v5[40]));
    faces.push(new Face(color5, v5[9], v5[11], v5[15], v5[13]));
    faces.push(new Face(color5, v5[9], v5[11], v5[27], v5[25]));
    faces.push(new Face(color5, v5[9], v5[11], v5[43], v5[41]));
    faces.push(new Face(color5, v5[9], v5[13], v5[29], v5[25]));
    faces.push(new Face(color5, v5[9], v5[13], v5[45], v5[41]));
    faces.push(new Face(color5, v5[9], v5[25], v5[57], v5[41]));
    faces.push(new Face(color5, v5[10], v5[11], v5[15], v5[14]));
    faces.push(new Face(color5, v5[10], v5[11], v5[27], v5[26]));
    faces.push(new Face(color5, v5[10], v5[11], v5[43], v5[42]));
    faces.push(new Face(color5, v5[10], v5[14], v5[30], v5[26]));
    faces.push(new Face(color5, v5[10], v5[14], v5[46], v5[42]));
    faces.push(new Face(color5, v5[10], v5[26], v5[58], v5[42]));
    faces.push(new Face(color5, v5[11], v5[15], v5[31], v5[27]));
    faces.push(new Face(color5, v5[11], v5[15], v5[47], v5[43]));
    faces.push(new Face(color5, v5[11], v5[27], v5[59], v5[43]));
    faces.push(new Face(color5, v5[12], v5[13], v5[15], v5[14]));
    faces.push(new Face(color5, v5[12], v5[13], v5[29], v5[28]));
    faces.push(new Face(color5, v5[12], v5[13], v5[45], v5[44]));
    faces.push(new Face(color5, v5[12], v5[14], v5[30], v5[28]));
    faces.push(new Face(color5, v5[12], v5[14], v5[46], v5[44]));
    faces.push(new Face(color5, v5[12], v5[28], v5[60], v5[44]));
    faces.push(new Face(color5, v5[13], v5[15], v5[31], v5[29]));
    faces.push(new Face(color5, v5[13], v5[15], v5[47], v5[45]));
    faces.push(new Face(color5, v5[13], v5[29], v5[61], v5[45]));
    faces.push(new Face(color5, v5[14], v5[15], v5[31], v5[30]));
    faces.push(new Face(color5, v5[14], v5[15], v5[47], v5[46]));
    faces.push(new Face(color5, v5[14], v5[30], v5[62], v5[46]));
    faces.push(new Face(color5, v5[15], v5[31], v5[63], v5[47]));
    faces.push(new Face(color5, v5[16], v5[17], v5[19], v5[18]));
    faces.push(new Face(color5, v5[16], v5[17], v5[21], v5[20]));
    faces.push(new Face(color5, v5[16], v5[17], v5[25], v5[24]));
    faces.push(new Face(color5, v5[16], v5[17], v5[49], v5[48]));
    faces.push(new Face(color5, v5[16], v5[18], v5[22], v5[20]));
    faces.push(new Face(color5, v5[16], v5[18], v5[26], v5[24]));
    faces.push(new Face(color5, v5[16], v5[18], v5[50], v5[48]));
    faces.push(new Face(color5, v5[16], v5[20], v5[28], v5[24]));
    faces.push(new Face(color5, v5[16], v5[20], v5[52], v5[48]));
    faces.push(new Face(color5, v5[16], v5[24], v5[56], v5[48]));
    faces.push(new Face(color5, v5[17], v5[19], v5[23], v5[21]));
    faces.push(new Face(color5, v5[17], v5[19], v5[27], v5[25]));
    faces.push(new Face(color5, v5[17], v5[19], v5[51], v5[49]));
    faces.push(new Face(color5, v5[17], v5[21], v5[29], v5[25]));
    faces.push(new Face(color5, v5[17], v5[21], v5[53], v5[49]));
    faces.push(new Face(color5, v5[17], v5[25], v5[57], v5[49]));
    faces.push(new Face(color5, v5[18], v5[19], v5[23], v5[22]));
    faces.push(new Face(color5, v5[18], v5[19], v5[27], v5[26]));
    faces.push(new Face(color5, v5[18], v5[19], v5[51], v5[50]));
    faces.push(new Face(color5, v5[18], v5[22], v5[30], v5[26]));
    faces.push(new Face(color5, v5[18], v5[22], v5[54], v5[50]));
    faces.push(new Face(color5, v5[18], v5[26], v5[58], v5[50]));
    faces.push(new Face(color5, v5[19], v5[23], v5[31], v5[27]));
    faces.push(new Face(color5, v5[19], v5[23], v5[55], v5[51]));
    faces.push(new Face(color5, v5[19], v5[27], v5[59], v5[51]));
    faces.push(new Face(color5, v5[20], v5[21], v5[23], v5[22]));
    faces.push(new Face(color5, v5[20], v5[21], v5[29], v5[28]));
    faces.push(new Face(color5, v5[20], v5[21], v5[53], v5[52]));
    faces.push(new Face(color5, v5[20], v5[22], v5[30], v5[28]));
    faces.push(new Face(color5, v5[20], v5[22], v5[54], v5[52]));
    faces.push(new Face(color5, v5[20], v5[28], v5[60], v5[52]));
    faces.push(new Face(color5, v5[21], v5[23], v5[31], v5[29]));
    faces.push(new Face(color5, v5[21], v5[23], v5[55], v5[53]));
    faces.push(new Face(color5, v5[21], v5[29], v5[61], v5[53]));
    faces.push(new Face(color5, v5[22], v5[23], v5[31], v5[30]));
    faces.push(new Face(color5, v5[22], v5[23], v5[55], v5[54]));
    faces.push(new Face(color5, v5[22], v5[30], v5[62], v5[54]));
    faces.push(new Face(color5, v5[23], v5[31], v5[63], v5[55]));
    faces.push(new Face(color5, v5[24], v5[25], v5[27], v5[26]));
    faces.push(new Face(color5, v5[24], v5[25], v5[29], v5[28]));
    faces.push(new Face(color5, v5[24], v5[25], v5[57], v5[56]));
    faces.push(new Face(color5, v5[24], v5[26], v5[30], v5[28]));
    faces.push(new Face(color5, v5[24], v5[26], v5[58], v5[56]));
    faces.push(new Face(color5, v5[24], v5[28], v5[60], v5[56]));
    faces.push(new Face(color5, v5[25], v5[27], v5[31], v5[29]));
    faces.push(new Face(color5, v5[25], v5[27], v5[59], v5[57]));
    faces.push(new Face(color5, v5[25], v5[29], v5[61], v5[57]));
    faces.push(new Face(color5, v5[26], v5[27], v5[31], v5[30]));
    faces.push(new Face(color5, v5[26], v5[27], v5[59], v5[58]));
    faces.push(new Face(color5, v5[26], v5[30], v5[62], v5[58]));
    faces.push(new Face(color5, v5[27], v5[31], v5[63], v5[59]));
    faces.push(new Face(color5, v5[28], v5[29], v5[31], v5[30]));
    faces.push(new Face(color5, v5[28], v5[29], v5[61], v5[60]));
    faces.push(new Face(color5, v5[28], v5[30], v5[62], v5[60]));
    faces.push(new Face(color5, v5[29], v5[31], v5[63], v5[61]));
    faces.push(new Face(color5, v5[30], v5[31], v5[63], v5[62]));
    faces.push(new Face(color5, v5[32], v5[33], v5[35], v5[34]));
    faces.push(new Face(color5, v5[32], v5[33], v5[37], v5[36]));
    faces.push(new Face(color5, v5[32], v5[33], v5[41], v5[40]));
    faces.push(new Face(color5, v5[32], v5[33], v5[49], v5[48]));
    faces.push(new Face(color5, v5[32], v5[34], v5[38], v5[36]));
    faces.push(new Face(color5, v5[32], v5[34], v5[42], v5[40]));
    faces.push(new Face(color5, v5[32], v5[34], v5[50], v5[48]));
    faces.push(new Face(color5, v5[32], v5[36], v5[44], v5[40]));
    faces.push(new Face(color5, v5[32], v5[36], v5[52], v5[48]));
    faces.push(new Face(color5, v5[32], v5[40], v5[56], v5[48]));
    faces.push(new Face(color5, v5[33], v5[35], v5[39], v5[37]));
    faces.push(new Face(color5, v5[33], v5[35], v5[43], v5[41]));
    faces.push(new Face(color5, v5[33], v5[35], v5[51], v5[49]));
    faces.push(new Face(color5, v5[33], v5[37], v5[45], v5[41]));
    faces.push(new Face(color5, v5[33], v5[37], v5[53], v5[49]));
    faces.push(new Face(color5, v5[33], v5[41], v5[57], v5[49]));
    faces.push(new Face(color5, v5[34], v5[35], v5[39], v5[38]));
    faces.push(new Face(color5, v5[34], v5[35], v5[43], v5[42]));
    faces.push(new Face(color5, v5[34], v5[35], v5[51], v5[50]));
    faces.push(new Face(color5, v5[34], v5[38], v5[46], v5[42]));
    faces.push(new Face(color5, v5[34], v5[38], v5[54], v5[50]));
    faces.push(new Face(color5, v5[34], v5[42], v5[58], v5[50]));
    faces.push(new Face(color5, v5[35], v5[39], v5[47], v5[43]));
    faces.push(new Face(color5, v5[35], v5[39], v5[55], v5[51]));
    faces.push(new Face(color5, v5[35], v5[43], v5[59], v5[51]));
    faces.push(new Face(color5, v5[36], v5[37], v5[39], v5[38]));
    faces.push(new Face(color5, v5[36], v5[37], v5[45], v5[44]));
    faces.push(new Face(color5, v5[36], v5[37], v5[53], v5[52]));
    faces.push(new Face(color5, v5[36], v5[38], v5[46], v5[44]));
    faces.push(new Face(color5, v5[36], v5[38], v5[54], v5[52]));
    faces.push(new Face(color5, v5[36], v5[44], v5[60], v5[52]));
    faces.push(new Face(color5, v5[37], v5[39], v5[47], v5[45]));
    faces.push(new Face(color5, v5[37], v5[39], v5[55], v5[53]));
    faces.push(new Face(color5, v5[37], v5[45], v5[61], v5[53]));
    faces.push(new Face(color5, v5[38], v5[39], v5[47], v5[46]));
    faces.push(new Face(color5, v5[38], v5[39], v5[55], v5[54]));
    faces.push(new Face(color5, v5[38], v5[46], v5[62], v5[54]));
    faces.push(new Face(color5, v5[39], v5[47], v5[63], v5[55]));
    faces.push(new Face(color5, v5[40], v5[41], v5[43], v5[42]));
    faces.push(new Face(color5, v5[40], v5[41], v5[45], v5[44]));
    faces.push(new Face(color5, v5[40], v5[41], v5[57], v5[56]));
    faces.push(new Face(color5, v5[40], v5[42], v5[46], v5[44]));
    faces.push(new Face(color5, v5[40], v5[42], v5[58], v5[56]));
    faces.push(new Face(color5, v5[40], v5[44], v5[60], v5[56]));
    faces.push(new Face(color5, v5[41], v5[43], v5[47], v5[45]));
    faces.push(new Face(color5, v5[41], v5[43], v5[59], v5[57]));
    faces.push(new Face(color5, v5[41], v5[45], v5[61], v5[57]));
    faces.push(new Face(color5, v5[42], v5[43], v5[47], v5[46]));
    faces.push(new Face(color5, v5[42], v5[43], v5[59], v5[58]));
    faces.push(new Face(color5, v5[42], v5[46], v5[62], v5[58]));
    faces.push(new Face(color5, v5[43], v5[47], v5[63], v5[59]));
    faces.push(new Face(color5, v5[44], v5[45], v5[47], v5[46]));
    faces.push(new Face(color5, v5[44], v5[45], v5[61], v5[60]));
    faces.push(new Face(color5, v5[44], v5[46], v5[62], v5[60]));
    faces.push(new Face(color5, v5[45], v5[47], v5[63], v5[61]));
    faces.push(new Face(color5, v5[46], v5[47], v5[63], v5[62]));
    faces.push(new Face(color5, v5[48], v5[49], v5[51], v5[50]));
    faces.push(new Face(color5, v5[48], v5[49], v5[53], v5[52]));
    faces.push(new Face(color5, v5[48], v5[49], v5[57], v5[56]));
    faces.push(new Face(color5, v5[48], v5[50], v5[54], v5[52]));
    faces.push(new Face(color5, v5[48], v5[50], v5[58], v5[56]));
    faces.push(new Face(color5, v5[48], v5[52], v5[60], v5[56]));
    faces.push(new Face(color5, v5[49], v5[51], v5[55], v5[53]));
    faces.push(new Face(color5, v5[49], v5[51], v5[59], v5[57]));
    faces.push(new Face(color5, v5[49], v5[53], v5[61], v5[57]));
    faces.push(new Face(color5, v5[50], v5[51], v5[55], v5[54]));
    faces.push(new Face(color5, v5[50], v5[51], v5[59], v5[58]));
    faces.push(new Face(color5, v5[50], v5[54], v5[62], v5[58]));
    faces.push(new Face(color5, v5[51], v5[55], v5[63], v5[59]));
    faces.push(new Face(color5, v5[52], v5[53], v5[55], v5[54]));
    faces.push(new Face(color5, v5[52], v5[53], v5[61], v5[60]));
    faces.push(new Face(color5, v5[52], v5[54], v5[62], v5[60]));
    faces.push(new Face(color5, v5[53], v5[55], v5[63], v5[61]));
    faces.push(new Face(color5, v5[54], v5[55], v5[63], v5[62]));
    faces.push(new Face(color5, v5[56], v5[57], v5[59], v5[58]));
    faces.push(new Face(color5, v5[56], v5[57], v5[61], v5[60]));
    faces.push(new Face(color5, v5[56], v5[58], v5[62], v5[60]));
    faces.push(new Face(color5, v5[57], v5[59], v5[63], v5[61]));
    faces.push(new Face(color5, v5[58], v5[59], v5[63], v5[62]));
    faces.push(new Face(color5, v5[60], v5[61], v5[63], v5[62]));
    for (let i = 0; i < v5.length; i++) {
        v5[i].rotate(r);
        v5[i].project();
    }

    v6[0] = new Vertex(-w/2, -w/2, -w/2, -w/2, -w/2, -w/2, -w/2);
    v6[1] = new Vertex(-w/2, -w/2, -w/2, -w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[2] = new Vertex(-w/2, -w/2, -w/2, -w/2, w/2, -w/2, -w/2);
    v6[3] = new Vertex(-w/2, -w/2, -w/2, -w/2, w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[4] = new Vertex(-w/2, -w/2, -w/2, w/2, -w/2, -w/2, -w/2);
    v6[5] = new Vertex(-w/2, -w/2, -w/2, w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[6] = new Vertex(-w/2, -w/2, -w/2, w/2, w/2, -w/2, -w/2);
    v6[7] = new Vertex(-w/2, -w/2, -w/2, w/2, w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[8] = new Vertex(-w/2, -w/2, w/2, -w/2, -w/2, -w/2, -w/2);
    v6[9] = new Vertex(-w/2, -w/2, w/2, -w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[10] = new Vertex(-w/2, -w/2, w/2, -w/2, w/2, -w/2, -w/2);
    v6[11] = new Vertex(-w/2, -w/2, w/2, -w/2, w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[12] = new Vertex(-w/2, -w/2, w/2, w/2, -w/2, -w/2, -w/2);
    v6[13] = new Vertex(-w/2, -w/2, w/2, w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[14] = new Vertex(-w/2, -w/2, w/2, w/2, w/2, -w/2, -w/2);
    v6[15] = new Vertex(-w/2, -w/2, w/2, w/2, w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[16] = new Vertex(-w/2, w/2, -w/2, -w/2, -w/2, -w/2, -w/2);
    v6[17] = new Vertex(-w/2, w/2, -w/2, -w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[18] = new Vertex(-w/2, w/2, -w/2, -w/2, w/2, -w/2, -w/2);
    v6[19] = new Vertex(-w/2, w/2, -w/2, -w/2, w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[20] = new Vertex(-w/2, w/2, -w/2, w/2, -w/2, -w/2, -w/2);
    v6[21] = new Vertex(-w/2, w/2, -w/2, w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[22] = new Vertex(-w/2, w/2, -w/2, w/2, w/2, -w/2, -w/2);
    v6[23] = new Vertex(-w/2, w/2, -w/2, w/2, w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[24] = new Vertex(-w/2, w/2, w/2, -w/2, -w/2, -w/2, -w/2);
    v6[25] = new Vertex(-w/2, w/2, w/2, -w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[26] = new Vertex(-w/2, w/2, w/2, -w/2, w/2, -w/2, -w/2);
    v6[27] = new Vertex(-w/2, w/2, w/2, -w/2, w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[28] = new Vertex(-w/2, w/2, w/2, w/2, -w/2, -w/2, -w/2);
    v6[29] = new Vertex(-w/2, w/2, w/2, w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[30] = new Vertex(-w/2, w/2, w/2, w/2, w/2, -w/2, -w/2);
    v6[31] = new Vertex(-w/2, w/2, w/2, w/2, w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[32] = new Vertex(w/2, -w/2, -w/2, -w/2, -w/2, -w/2, -w/2);
    v6[33] = new Vertex(w/2, -w/2, -w/2, -w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[34] = new Vertex(w/2, -w/2, -w/2, -w/2, w/2, -w/2, -w/2);
    v6[35] = new Vertex(w/2, -w/2, -w/2, -w/2, w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[36] = new Vertex(w/2, -w/2, -w/2, w/2, -w/2, -w/2, -w/2);
    v6[37] = new Vertex(w/2, -w/2, -w/2, w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[38] = new Vertex(w/2, -w/2, -w/2, w/2, w/2, -w/2, -w/2);
    v6[39] = new Vertex(w/2, -w/2, -w/2, w/2, w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[40] = new Vertex(w/2, -w/2, w/2, -w/2, -w/2, -w/2, -w/2);
    v6[41] = new Vertex(w/2, -w/2, w/2, -w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[42] = new Vertex(w/2, -w/2, w/2, -w/2, w/2, -w/2, -w/2);
    v6[43] = new Vertex(w/2, -w/2, w/2, -w/2, w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[44] = new Vertex(w/2, -w/2, w/2, w/2, -w/2, -w/2, -w/2);
    v6[45] = new Vertex(w/2, -w/2, w/2, w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[46] = new Vertex(w/2, -w/2, w/2, w/2, w/2, -w/2, -w/2);
    v6[47] = new Vertex(w/2, -w/2, w/2, w/2, w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[48] = new Vertex(w/2, w/2, -w/2, -w/2, -w/2, -w/2, -w/2);
    v6[49] = new Vertex(w/2, w/2, -w/2, -w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[50] = new Vertex(w/2, w/2, -w/2, -w/2, w/2, -w/2, -w/2);
    v6[51] = new Vertex(w/2, w/2, -w/2, -w/2, w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[52] = new Vertex(w/2, w/2, -w/2, w/2, -w/2, -w/2, -w/2);
    v6[53] = new Vertex(w/2, w/2, -w/2, w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[54] = new Vertex(w/2, w/2, -w/2, w/2, w/2, -w/2, -w/2);
    v6[55] = new Vertex(w/2, w/2, -w/2, w/2, w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[56] = new Vertex(w/2, w/2, w/2, -w/2, -w/2, -w/2, -w/2);
    v6[57] = new Vertex(w/2, w/2, w/2, -w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[58] = new Vertex(w/2, w/2, w/2, -w/2, w/2, -w/2, -w/2);
    v6[59] = new Vertex(w/2, w/2, w/2, -w/2, w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[60] = new Vertex(w/2, w/2, w/2, w/2, -w/2, -w/2, -w/2);
    v6[61] = new Vertex(w/2, w/2, w/2, w/2, -w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v6[62] = new Vertex(w/2, w/2, w/2, w/2, w/2, -w/2, -w/2);
    v6[63] = new Vertex(w/2, w/2, w/2, w/2, w/2, -w/2-Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    faces.push(new Face(color6, v6[0], v6[1], v6[3], v6[2]));
    faces.push(new Face(color6, v6[0], v6[1], v6[5], v6[4]));
    faces.push(new Face(color6, v6[0], v6[1], v6[9], v6[8]));
    faces.push(new Face(color6, v6[0], v6[1], v6[17], v6[16]));
    faces.push(new Face(color6, v6[0], v6[1], v6[33], v6[32]));
    faces.push(new Face(color6, v6[0], v6[2], v6[6], v6[4]));
    faces.push(new Face(color6, v6[0], v6[2], v6[10], v6[8]));
    faces.push(new Face(color6, v6[0], v6[2], v6[18], v6[16]));
    faces.push(new Face(color6, v6[0], v6[2], v6[34], v6[32]));
    faces.push(new Face(color6, v6[0], v6[4], v6[12], v6[8]));
    faces.push(new Face(color6, v6[0], v6[4], v6[20], v6[16]));
    faces.push(new Face(color6, v6[0], v6[4], v6[36], v6[32]));
    faces.push(new Face(color6, v6[0], v6[8], v6[24], v6[16]));
    faces.push(new Face(color6, v6[0], v6[8], v6[40], v6[32]));
    faces.push(new Face(color6, v6[0], v6[16], v6[48], v6[32]));
    faces.push(new Face(color6, v6[1], v6[3], v6[7], v6[5]));
    faces.push(new Face(color6, v6[1], v6[3], v6[11], v6[9]));
    faces.push(new Face(color6, v6[1], v6[3], v6[19], v6[17]));
    faces.push(new Face(color6, v6[1], v6[3], v6[35], v6[33]));
    faces.push(new Face(color6, v6[1], v6[5], v6[13], v6[9]));
    faces.push(new Face(color6, v6[1], v6[5], v6[21], v6[17]));
    faces.push(new Face(color6, v6[1], v6[5], v6[37], v6[33]));
    faces.push(new Face(color6, v6[1], v6[9], v6[25], v6[17]));
    faces.push(new Face(color6, v6[1], v6[9], v6[41], v6[33]));
    faces.push(new Face(color6, v6[1], v6[17], v6[49], v6[33]));
    faces.push(new Face(color6, v6[2], v6[3], v6[7], v6[6]));
    faces.push(new Face(color6, v6[2], v6[3], v6[11], v6[10]));
    faces.push(new Face(color6, v6[2], v6[3], v6[19], v6[18]));
    faces.push(new Face(color6, v6[2], v6[3], v6[35], v6[34]));
    faces.push(new Face(color6, v6[2], v6[6], v6[14], v6[10]));
    faces.push(new Face(color6, v6[2], v6[6], v6[22], v6[18]));
    faces.push(new Face(color6, v6[2], v6[6], v6[38], v6[34]));
    faces.push(new Face(color6, v6[2], v6[10], v6[26], v6[18]));
    faces.push(new Face(color6, v6[2], v6[10], v6[42], v6[34]));
    faces.push(new Face(color6, v6[2], v6[18], v6[50], v6[34]));
    faces.push(new Face(color6, v6[3], v6[7], v6[15], v6[11]));
    faces.push(new Face(color6, v6[3], v6[7], v6[23], v6[19]));
    faces.push(new Face(color6, v6[3], v6[7], v6[39], v6[35]));
    faces.push(new Face(color6, v6[3], v6[11], v6[27], v6[19]));
    faces.push(new Face(color6, v6[3], v6[11], v6[43], v6[35]));
    faces.push(new Face(color6, v6[3], v6[19], v6[51], v6[35]));
    faces.push(new Face(color6, v6[4], v6[5], v6[7], v6[6]));
    faces.push(new Face(color6, v6[4], v6[5], v6[13], v6[12]));
    faces.push(new Face(color6, v6[4], v6[5], v6[21], v6[20]));
    faces.push(new Face(color6, v6[4], v6[5], v6[37], v6[36]));
    faces.push(new Face(color6, v6[4], v6[6], v6[14], v6[12]));
    faces.push(new Face(color6, v6[4], v6[6], v6[22], v6[20]));
    faces.push(new Face(color6, v6[4], v6[6], v6[38], v6[36]));
    faces.push(new Face(color6, v6[4], v6[12], v6[28], v6[20]));
    faces.push(new Face(color6, v6[4], v6[12], v6[44], v6[36]));
    faces.push(new Face(color6, v6[4], v6[20], v6[52], v6[36]));
    faces.push(new Face(color6, v6[5], v6[7], v6[15], v6[13]));
    faces.push(new Face(color6, v6[5], v6[7], v6[23], v6[21]));
    faces.push(new Face(color6, v6[5], v6[7], v6[39], v6[37]));
    faces.push(new Face(color6, v6[5], v6[13], v6[29], v6[21]));
    faces.push(new Face(color6, v6[5], v6[13], v6[45], v6[37]));
    faces.push(new Face(color6, v6[5], v6[21], v6[53], v6[37]));
    faces.push(new Face(color6, v6[6], v6[7], v6[15], v6[14]));
    faces.push(new Face(color6, v6[6], v6[7], v6[23], v6[22]));
    faces.push(new Face(color6, v6[6], v6[7], v6[39], v6[38]));
    faces.push(new Face(color6, v6[6], v6[14], v6[30], v6[22]));
    faces.push(new Face(color6, v6[6], v6[14], v6[46], v6[38]));
    faces.push(new Face(color6, v6[6], v6[22], v6[54], v6[38]));
    faces.push(new Face(color6, v6[7], v6[15], v6[31], v6[23]));
    faces.push(new Face(color6, v6[7], v6[15], v6[47], v6[39]));
    faces.push(new Face(color6, v6[7], v6[23], v6[55], v6[39]));
    faces.push(new Face(color6, v6[8], v6[9], v6[11], v6[10]));
    faces.push(new Face(color6, v6[8], v6[9], v6[13], v6[12]));
    faces.push(new Face(color6, v6[8], v6[9], v6[25], v6[24]));
    faces.push(new Face(color6, v6[8], v6[9], v6[41], v6[40]));
    faces.push(new Face(color6, v6[8], v6[10], v6[14], v6[12]));
    faces.push(new Face(color6, v6[8], v6[10], v6[26], v6[24]));
    faces.push(new Face(color6, v6[8], v6[10], v6[42], v6[40]));
    faces.push(new Face(color6, v6[8], v6[12], v6[28], v6[24]));
    faces.push(new Face(color6, v6[8], v6[12], v6[44], v6[40]));
    faces.push(new Face(color6, v6[8], v6[24], v6[56], v6[40]));
    faces.push(new Face(color6, v6[9], v6[11], v6[15], v6[13]));
    faces.push(new Face(color6, v6[9], v6[11], v6[27], v6[25]));
    faces.push(new Face(color6, v6[9], v6[11], v6[43], v6[41]));
    faces.push(new Face(color6, v6[9], v6[13], v6[29], v6[25]));
    faces.push(new Face(color6, v6[9], v6[13], v6[45], v6[41]));
    faces.push(new Face(color6, v6[9], v6[25], v6[57], v6[41]));
    faces.push(new Face(color6, v6[10], v6[11], v6[15], v6[14]));
    faces.push(new Face(color6, v6[10], v6[11], v6[27], v6[26]));
    faces.push(new Face(color6, v6[10], v6[11], v6[43], v6[42]));
    faces.push(new Face(color6, v6[10], v6[14], v6[30], v6[26]));
    faces.push(new Face(color6, v6[10], v6[14], v6[46], v6[42]));
    faces.push(new Face(color6, v6[10], v6[26], v6[58], v6[42]));
    faces.push(new Face(color6, v6[11], v6[15], v6[31], v6[27]));
    faces.push(new Face(color6, v6[11], v6[15], v6[47], v6[43]));
    faces.push(new Face(color6, v6[11], v6[27], v6[59], v6[43]));
    faces.push(new Face(color6, v6[12], v6[13], v6[15], v6[14]));
    faces.push(new Face(color6, v6[12], v6[13], v6[29], v6[28]));
    faces.push(new Face(color6, v6[12], v6[13], v6[45], v6[44]));
    faces.push(new Face(color6, v6[12], v6[14], v6[30], v6[28]));
    faces.push(new Face(color6, v6[12], v6[14], v6[46], v6[44]));
    faces.push(new Face(color6, v6[12], v6[28], v6[60], v6[44]));
    faces.push(new Face(color6, v6[13], v6[15], v6[31], v6[29]));
    faces.push(new Face(color6, v6[13], v6[15], v6[47], v6[45]));
    faces.push(new Face(color6, v6[13], v6[29], v6[61], v6[45]));
    faces.push(new Face(color6, v6[14], v6[15], v6[31], v6[30]));
    faces.push(new Face(color6, v6[14], v6[15], v6[47], v6[46]));
    faces.push(new Face(color6, v6[14], v6[30], v6[62], v6[46]));
    faces.push(new Face(color6, v6[15], v6[31], v6[63], v6[47]));
    faces.push(new Face(color6, v6[16], v6[17], v6[19], v6[18]));
    faces.push(new Face(color6, v6[16], v6[17], v6[21], v6[20]));
    faces.push(new Face(color6, v6[16], v6[17], v6[25], v6[24]));
    faces.push(new Face(color6, v6[16], v6[17], v6[49], v6[48]));
    faces.push(new Face(color6, v6[16], v6[18], v6[22], v6[20]));
    faces.push(new Face(color6, v6[16], v6[18], v6[26], v6[24]));
    faces.push(new Face(color6, v6[16], v6[18], v6[50], v6[48]));
    faces.push(new Face(color6, v6[16], v6[20], v6[28], v6[24]));
    faces.push(new Face(color6, v6[16], v6[20], v6[52], v6[48]));
    faces.push(new Face(color6, v6[16], v6[24], v6[56], v6[48]));
    faces.push(new Face(color6, v6[17], v6[19], v6[23], v6[21]));
    faces.push(new Face(color6, v6[17], v6[19], v6[27], v6[25]));
    faces.push(new Face(color6, v6[17], v6[19], v6[51], v6[49]));
    faces.push(new Face(color6, v6[17], v6[21], v6[29], v6[25]));
    faces.push(new Face(color6, v6[17], v6[21], v6[53], v6[49]));
    faces.push(new Face(color6, v6[17], v6[25], v6[57], v6[49]));
    faces.push(new Face(color6, v6[18], v6[19], v6[23], v6[22]));
    faces.push(new Face(color6, v6[18], v6[19], v6[27], v6[26]));
    faces.push(new Face(color6, v6[18], v6[19], v6[51], v6[50]));
    faces.push(new Face(color6, v6[18], v6[22], v6[30], v6[26]));
    faces.push(new Face(color6, v6[18], v6[22], v6[54], v6[50]));
    faces.push(new Face(color6, v6[18], v6[26], v6[58], v6[50]));
    faces.push(new Face(color6, v6[19], v6[23], v6[31], v6[27]));
    faces.push(new Face(color6, v6[19], v6[23], v6[55], v6[51]));
    faces.push(new Face(color6, v6[19], v6[27], v6[59], v6[51]));
    faces.push(new Face(color6, v6[20], v6[21], v6[23], v6[22]));
    faces.push(new Face(color6, v6[20], v6[21], v6[29], v6[28]));
    faces.push(new Face(color6, v6[20], v6[21], v6[53], v6[52]));
    faces.push(new Face(color6, v6[20], v6[22], v6[30], v6[28]));
    faces.push(new Face(color6, v6[20], v6[22], v6[54], v6[52]));
    faces.push(new Face(color6, v6[20], v6[28], v6[60], v6[52]));
    faces.push(new Face(color6, v6[21], v6[23], v6[31], v6[29]));
    faces.push(new Face(color6, v6[21], v6[23], v6[55], v6[53]));
    faces.push(new Face(color6, v6[21], v6[29], v6[61], v6[53]));
    faces.push(new Face(color6, v6[22], v6[23], v6[31], v6[30]));
    faces.push(new Face(color6, v6[22], v6[23], v6[55], v6[54]));
    faces.push(new Face(color6, v6[22], v6[30], v6[62], v6[54]));
    faces.push(new Face(color6, v6[23], v6[31], v6[63], v6[55]));
    faces.push(new Face(color6, v6[24], v6[25], v6[27], v6[26]));
    faces.push(new Face(color6, v6[24], v6[25], v6[29], v6[28]));
    faces.push(new Face(color6, v6[24], v6[25], v6[57], v6[56]));
    faces.push(new Face(color6, v6[24], v6[26], v6[30], v6[28]));
    faces.push(new Face(color6, v6[24], v6[26], v6[58], v6[56]));
    faces.push(new Face(color6, v6[24], v6[28], v6[60], v6[56]));
    faces.push(new Face(color6, v6[25], v6[27], v6[31], v6[29]));
    faces.push(new Face(color6, v6[25], v6[27], v6[59], v6[57]));
    faces.push(new Face(color6, v6[25], v6[29], v6[61], v6[57]));
    faces.push(new Face(color6, v6[26], v6[27], v6[31], v6[30]));
    faces.push(new Face(color6, v6[26], v6[27], v6[59], v6[58]));
    faces.push(new Face(color6, v6[26], v6[30], v6[62], v6[58]));
    faces.push(new Face(color6, v6[27], v6[31], v6[63], v6[59]));
    faces.push(new Face(color6, v6[28], v6[29], v6[31], v6[30]));
    faces.push(new Face(color6, v6[28], v6[29], v6[61], v6[60]));
    faces.push(new Face(color6, v6[28], v6[30], v6[62], v6[60]));
    faces.push(new Face(color6, v6[29], v6[31], v6[63], v6[61]));
    faces.push(new Face(color6, v6[30], v6[31], v6[63], v6[62]));
    faces.push(new Face(color6, v6[32], v6[33], v6[35], v6[34]));
    faces.push(new Face(color6, v6[32], v6[33], v6[37], v6[36]));
    faces.push(new Face(color6, v6[32], v6[33], v6[41], v6[40]));
    faces.push(new Face(color6, v6[32], v6[33], v6[49], v6[48]));
    faces.push(new Face(color6, v6[32], v6[34], v6[38], v6[36]));
    faces.push(new Face(color6, v6[32], v6[34], v6[42], v6[40]));
    faces.push(new Face(color6, v6[32], v6[34], v6[50], v6[48]));
    faces.push(new Face(color6, v6[32], v6[36], v6[44], v6[40]));
    faces.push(new Face(color6, v6[32], v6[36], v6[52], v6[48]));
    faces.push(new Face(color6, v6[32], v6[40], v6[56], v6[48]));
    faces.push(new Face(color6, v6[33], v6[35], v6[39], v6[37]));
    faces.push(new Face(color6, v6[33], v6[35], v6[43], v6[41]));
    faces.push(new Face(color6, v6[33], v6[35], v6[51], v6[49]));
    faces.push(new Face(color6, v6[33], v6[37], v6[45], v6[41]));
    faces.push(new Face(color6, v6[33], v6[37], v6[53], v6[49]));
    faces.push(new Face(color6, v6[33], v6[41], v6[57], v6[49]));
    faces.push(new Face(color6, v6[34], v6[35], v6[39], v6[38]));
    faces.push(new Face(color6, v6[34], v6[35], v6[43], v6[42]));
    faces.push(new Face(color6, v6[34], v6[35], v6[51], v6[50]));
    faces.push(new Face(color6, v6[34], v6[38], v6[46], v6[42]));
    faces.push(new Face(color6, v6[34], v6[38], v6[54], v6[50]));
    faces.push(new Face(color6, v6[34], v6[42], v6[58], v6[50]));
    faces.push(new Face(color6, v6[35], v6[39], v6[47], v6[43]));
    faces.push(new Face(color6, v6[35], v6[39], v6[55], v6[51]));
    faces.push(new Face(color6, v6[35], v6[43], v6[59], v6[51]));
    faces.push(new Face(color6, v6[36], v6[37], v6[39], v6[38]));
    faces.push(new Face(color6, v6[36], v6[37], v6[45], v6[44]));
    faces.push(new Face(color6, v6[36], v6[37], v6[53], v6[52]));
    faces.push(new Face(color6, v6[36], v6[38], v6[46], v6[44]));
    faces.push(new Face(color6, v6[36], v6[38], v6[54], v6[52]));
    faces.push(new Face(color6, v6[36], v6[44], v6[60], v6[52]));
    faces.push(new Face(color6, v6[37], v6[39], v6[47], v6[45]));
    faces.push(new Face(color6, v6[37], v6[39], v6[55], v6[53]));
    faces.push(new Face(color6, v6[37], v6[45], v6[61], v6[53]));
    faces.push(new Face(color6, v6[38], v6[39], v6[47], v6[46]));
    faces.push(new Face(color6, v6[38], v6[39], v6[55], v6[54]));
    faces.push(new Face(color6, v6[38], v6[46], v6[62], v6[54]));
    faces.push(new Face(color6, v6[39], v6[47], v6[63], v6[55]));
    faces.push(new Face(color6, v6[40], v6[41], v6[43], v6[42]));
    faces.push(new Face(color6, v6[40], v6[41], v6[45], v6[44]));
    faces.push(new Face(color6, v6[40], v6[41], v6[57], v6[56]));
    faces.push(new Face(color6, v6[40], v6[42], v6[46], v6[44]));
    faces.push(new Face(color6, v6[40], v6[42], v6[58], v6[56]));
    faces.push(new Face(color6, v6[40], v6[44], v6[60], v6[56]));
    faces.push(new Face(color6, v6[41], v6[43], v6[47], v6[45]));
    faces.push(new Face(color6, v6[41], v6[43], v6[59], v6[57]));
    faces.push(new Face(color6, v6[41], v6[45], v6[61], v6[57]));
    faces.push(new Face(color6, v6[42], v6[43], v6[47], v6[46]));
    faces.push(new Face(color6, v6[42], v6[43], v6[59], v6[58]));
    faces.push(new Face(color6, v6[42], v6[46], v6[62], v6[58]));
    faces.push(new Face(color6, v6[43], v6[47], v6[63], v6[59]));
    faces.push(new Face(color6, v6[44], v6[45], v6[47], v6[46]));
    faces.push(new Face(color6, v6[44], v6[45], v6[61], v6[60]));
    faces.push(new Face(color6, v6[44], v6[46], v6[62], v6[60]));
    faces.push(new Face(color6, v6[45], v6[47], v6[63], v6[61]));
    faces.push(new Face(color6, v6[46], v6[47], v6[63], v6[62]));
    faces.push(new Face(color6, v6[48], v6[49], v6[51], v6[50]));
    faces.push(new Face(color6, v6[48], v6[49], v6[53], v6[52]));
    faces.push(new Face(color6, v6[48], v6[49], v6[57], v6[56]));
    faces.push(new Face(color6, v6[48], v6[50], v6[54], v6[52]));
    faces.push(new Face(color6, v6[48], v6[50], v6[58], v6[56]));
    faces.push(new Face(color6, v6[48], v6[52], v6[60], v6[56]));
    faces.push(new Face(color6, v6[49], v6[51], v6[55], v6[53]));
    faces.push(new Face(color6, v6[49], v6[51], v6[59], v6[57]));
    faces.push(new Face(color6, v6[49], v6[53], v6[61], v6[57]));
    faces.push(new Face(color6, v6[50], v6[51], v6[55], v6[54]));
    faces.push(new Face(color6, v6[50], v6[51], v6[59], v6[58]));
    faces.push(new Face(color6, v6[50], v6[54], v6[62], v6[58]));
    faces.push(new Face(color6, v6[51], v6[55], v6[63], v6[59]));
    faces.push(new Face(color6, v6[52], v6[53], v6[55], v6[54]));
    faces.push(new Face(color6, v6[52], v6[53], v6[61], v6[60]));
    faces.push(new Face(color6, v6[52], v6[54], v6[62], v6[60]));
    faces.push(new Face(color6, v6[53], v6[55], v6[63], v6[61]));
    faces.push(new Face(color6, v6[54], v6[55], v6[63], v6[62]));
    faces.push(new Face(color6, v6[56], v6[57], v6[59], v6[58]));
    faces.push(new Face(color6, v6[56], v6[57], v6[61], v6[60]));
    faces.push(new Face(color6, v6[56], v6[58], v6[62], v6[60]));
    faces.push(new Face(color6, v6[57], v6[59], v6[63], v6[61]));
    faces.push(new Face(color6, v6[58], v6[59], v6[63], v6[62]));
    faces.push(new Face(color6, v6[60], v6[61], v6[63], v6[62]));
    for (let i = 0; i < v6.length; i++) {
        v6[i].rotate(r);
        v6[i].project();
    }

    v7[0] = new Vertex(w/2, -w/2, -w/2, -w/2, -w/2, -w/2, -w/2);
    v7[1] = new Vertex(w/2+Math.sin(theta)*w, -w/2, -w/2, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v7[2] = new Vertex(w/2, -w/2, -w/2, -w/2, -w/2, w/2, -w/2);
    v7[3] = new Vertex(w/2+Math.sin(theta)*w, -w/2, -w/2, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v7[4] = new Vertex(w/2, -w/2, -w/2, -w/2, w/2, -w/2, -w/2);
    v7[5] = new Vertex(w/2+Math.sin(theta)*w, -w/2, -w/2, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v7[6] = new Vertex(w/2, -w/2, -w/2, -w/2, w/2, w/2, -w/2);
    v7[7] = new Vertex(w/2+Math.sin(theta)*w, -w/2, -w/2, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v7[8] = new Vertex(w/2, -w/2, -w/2, w/2, -w/2, -w/2, -w/2);
    v7[9] = new Vertex(w/2+Math.sin(theta)*w, -w/2, -w/2, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v7[10] = new Vertex(w/2, -w/2, -w/2, w/2, -w/2, w/2, -w/2);
    v7[11] = new Vertex(w/2+Math.sin(theta)*w, -w/2, -w/2, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v7[12] = new Vertex(w/2, -w/2, -w/2, w/2, w/2, -w/2, -w/2);
    v7[13] = new Vertex(w/2+Math.sin(theta)*w, -w/2, -w/2, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v7[14] = new Vertex(w/2, -w/2, -w/2, w/2, w/2, w/2, -w/2);
    v7[15] = new Vertex(w/2+Math.sin(theta)*w, -w/2, -w/2, w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v7[16] = new Vertex(w/2, -w/2, w/2, -w/2, -w/2, -w/2, -w/2);
    v7[17] = new Vertex(w/2+Math.sin(theta)*w, -w/2, w/2, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v7[18] = new Vertex(w/2, -w/2, w/2, -w/2, -w/2, w/2, -w/2);
    v7[19] = new Vertex(w/2+Math.sin(theta)*w, -w/2, w/2, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v7[20] = new Vertex(w/2, -w/2, w/2, -w/2, w/2, -w/2, -w/2);
    v7[21] = new Vertex(w/2+Math.sin(theta)*w, -w/2, w/2, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v7[22] = new Vertex(w/2, -w/2, w/2, -w/2, w/2, w/2, -w/2);
    v7[23] = new Vertex(w/2+Math.sin(theta)*w, -w/2, w/2, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v7[24] = new Vertex(w/2, -w/2, w/2, w/2, -w/2, -w/2, -w/2);
    v7[25] = new Vertex(w/2+Math.sin(theta)*w, -w/2, w/2, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v7[26] = new Vertex(w/2, -w/2, w/2, w/2, -w/2, w/2, -w/2);
    v7[27] = new Vertex(w/2+Math.sin(theta)*w, -w/2, w/2, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v7[28] = new Vertex(w/2, -w/2, w/2, w/2, w/2, -w/2, -w/2);
    v7[29] = new Vertex(w/2+Math.sin(theta)*w, -w/2, w/2, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v7[30] = new Vertex(w/2, -w/2, w/2, w/2, w/2, w/2, -w/2);
    v7[31] = new Vertex(w/2+Math.sin(theta)*w, -w/2, w/2, w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v7[32] = new Vertex(w/2, w/2, -w/2, -w/2, -w/2, -w/2, -w/2);
    v7[33] = new Vertex(w/2+Math.sin(theta)*w, w/2, -w/2, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v7[34] = new Vertex(w/2, w/2, -w/2, -w/2, -w/2, w/2, -w/2);
    v7[35] = new Vertex(w/2+Math.sin(theta)*w, w/2, -w/2, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v7[36] = new Vertex(w/2, w/2, -w/2, -w/2, w/2, -w/2, -w/2);
    v7[37] = new Vertex(w/2+Math.sin(theta)*w, w/2, -w/2, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v7[38] = new Vertex(w/2, w/2, -w/2, -w/2, w/2, w/2, -w/2);
    v7[39] = new Vertex(w/2+Math.sin(theta)*w, w/2, -w/2, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v7[40] = new Vertex(w/2, w/2, -w/2, w/2, -w/2, -w/2, -w/2);
    v7[41] = new Vertex(w/2+Math.sin(theta)*w, w/2, -w/2, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v7[42] = new Vertex(w/2, w/2, -w/2, w/2, -w/2, w/2, -w/2);
    v7[43] = new Vertex(w/2+Math.sin(theta)*w, w/2, -w/2, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v7[44] = new Vertex(w/2, w/2, -w/2, w/2, w/2, -w/2, -w/2);
    v7[45] = new Vertex(w/2+Math.sin(theta)*w, w/2, -w/2, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v7[46] = new Vertex(w/2, w/2, -w/2, w/2, w/2, w/2, -w/2);
    v7[47] = new Vertex(w/2+Math.sin(theta)*w, w/2, -w/2, w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v7[48] = new Vertex(w/2, w/2, w/2, -w/2, -w/2, -w/2, -w/2);
    v7[49] = new Vertex(w/2+Math.sin(theta)*w, w/2, w/2, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v7[50] = new Vertex(w/2, w/2, w/2, -w/2, -w/2, w/2, -w/2);
    v7[51] = new Vertex(w/2+Math.sin(theta)*w, w/2, w/2, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v7[52] = new Vertex(w/2, w/2, w/2, -w/2, w/2, -w/2, -w/2);
    v7[53] = new Vertex(w/2+Math.sin(theta)*w, w/2, w/2, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v7[54] = new Vertex(w/2, w/2, w/2, -w/2, w/2, w/2, -w/2);
    v7[55] = new Vertex(w/2+Math.sin(theta)*w, w/2, w/2, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v7[56] = new Vertex(w/2, w/2, w/2, w/2, -w/2, -w/2, -w/2);
    v7[57] = new Vertex(w/2+Math.sin(theta)*w, w/2, w/2, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v7[58] = new Vertex(w/2, w/2, w/2, w/2, -w/2, w/2, -w/2);
    v7[59] = new Vertex(w/2+Math.sin(theta)*w, w/2, w/2, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v7[60] = new Vertex(w/2, w/2, w/2, w/2, w/2, -w/2, -w/2);
    v7[61] = new Vertex(w/2+Math.sin(theta)*w, w/2, w/2, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v7[62] = new Vertex(w/2, w/2, w/2, w/2, w/2, w/2, -w/2);
    v7[63] = new Vertex(w/2+Math.sin(theta)*w, w/2, w/2, w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    faces.push(new Face(color7, v7[0], v7[1], v7[3], v7[2]));
    faces.push(new Face(color7, v7[0], v7[1], v7[5], v7[4]));
    faces.push(new Face(color7, v7[0], v7[1], v7[9], v7[8]));
    faces.push(new Face(color7, v7[0], v7[1], v7[17], v7[16]));
    faces.push(new Face(color7, v7[0], v7[1], v7[33], v7[32]));
    faces.push(new Face(color7, v7[0], v7[2], v7[6], v7[4]));
    faces.push(new Face(color7, v7[0], v7[2], v7[10], v7[8]));
    faces.push(new Face(color7, v7[0], v7[2], v7[18], v7[16]));
    faces.push(new Face(color7, v7[0], v7[2], v7[34], v7[32]));
    faces.push(new Face(color7, v7[0], v7[4], v7[12], v7[8]));
    faces.push(new Face(color7, v7[0], v7[4], v7[20], v7[16]));
    faces.push(new Face(color7, v7[0], v7[4], v7[36], v7[32]));
    faces.push(new Face(color7, v7[0], v7[8], v7[24], v7[16]));
    faces.push(new Face(color7, v7[0], v7[8], v7[40], v7[32]));
    faces.push(new Face(color7, v7[0], v7[16], v7[48], v7[32]));
    faces.push(new Face(color7, v7[1], v7[3], v7[7], v7[5]));
    faces.push(new Face(color7, v7[1], v7[3], v7[11], v7[9]));
    faces.push(new Face(color7, v7[1], v7[3], v7[19], v7[17]));
    faces.push(new Face(color7, v7[1], v7[3], v7[35], v7[33]));
    faces.push(new Face(color7, v7[1], v7[5], v7[13], v7[9]));
    faces.push(new Face(color7, v7[1], v7[5], v7[21], v7[17]));
    faces.push(new Face(color7, v7[1], v7[5], v7[37], v7[33]));
    faces.push(new Face(color7, v7[1], v7[9], v7[25], v7[17]));
    faces.push(new Face(color7, v7[1], v7[9], v7[41], v7[33]));
    faces.push(new Face(color7, v7[1], v7[17], v7[49], v7[33]));
    faces.push(new Face(color7, v7[2], v7[3], v7[7], v7[6]));
    faces.push(new Face(color7, v7[2], v7[3], v7[11], v7[10]));
    faces.push(new Face(color7, v7[2], v7[3], v7[19], v7[18]));
    faces.push(new Face(color7, v7[2], v7[3], v7[35], v7[34]));
    faces.push(new Face(color7, v7[2], v7[6], v7[14], v7[10]));
    faces.push(new Face(color7, v7[2], v7[6], v7[22], v7[18]));
    faces.push(new Face(color7, v7[2], v7[6], v7[38], v7[34]));
    faces.push(new Face(color7, v7[2], v7[10], v7[26], v7[18]));
    faces.push(new Face(color7, v7[2], v7[10], v7[42], v7[34]));
    faces.push(new Face(color7, v7[2], v7[18], v7[50], v7[34]));
    faces.push(new Face(color7, v7[3], v7[7], v7[15], v7[11]));
    faces.push(new Face(color7, v7[3], v7[7], v7[23], v7[19]));
    faces.push(new Face(color7, v7[3], v7[7], v7[39], v7[35]));
    faces.push(new Face(color7, v7[3], v7[11], v7[27], v7[19]));
    faces.push(new Face(color7, v7[3], v7[11], v7[43], v7[35]));
    faces.push(new Face(color7, v7[3], v7[19], v7[51], v7[35]));
    faces.push(new Face(color7, v7[4], v7[5], v7[7], v7[6]));
    faces.push(new Face(color7, v7[4], v7[5], v7[13], v7[12]));
    faces.push(new Face(color7, v7[4], v7[5], v7[21], v7[20]));
    faces.push(new Face(color7, v7[4], v7[5], v7[37], v7[36]));
    faces.push(new Face(color7, v7[4], v7[6], v7[14], v7[12]));
    faces.push(new Face(color7, v7[4], v7[6], v7[22], v7[20]));
    faces.push(new Face(color7, v7[4], v7[6], v7[38], v7[36]));
    faces.push(new Face(color7, v7[4], v7[12], v7[28], v7[20]));
    faces.push(new Face(color7, v7[4], v7[12], v7[44], v7[36]));
    faces.push(new Face(color7, v7[4], v7[20], v7[52], v7[36]));
    faces.push(new Face(color7, v7[5], v7[7], v7[15], v7[13]));
    faces.push(new Face(color7, v7[5], v7[7], v7[23], v7[21]));
    faces.push(new Face(color7, v7[5], v7[7], v7[39], v7[37]));
    faces.push(new Face(color7, v7[5], v7[13], v7[29], v7[21]));
    faces.push(new Face(color7, v7[5], v7[13], v7[45], v7[37]));
    faces.push(new Face(color7, v7[5], v7[21], v7[53], v7[37]));
    faces.push(new Face(color7, v7[6], v7[7], v7[15], v7[14]));
    faces.push(new Face(color7, v7[6], v7[7], v7[23], v7[22]));
    faces.push(new Face(color7, v7[6], v7[7], v7[39], v7[38]));
    faces.push(new Face(color7, v7[6], v7[14], v7[30], v7[22]));
    faces.push(new Face(color7, v7[6], v7[14], v7[46], v7[38]));
    faces.push(new Face(color7, v7[6], v7[22], v7[54], v7[38]));
    faces.push(new Face(color7, v7[7], v7[15], v7[31], v7[23]));
    faces.push(new Face(color7, v7[7], v7[15], v7[47], v7[39]));
    faces.push(new Face(color7, v7[7], v7[23], v7[55], v7[39]));
    faces.push(new Face(color7, v7[8], v7[9], v7[11], v7[10]));
    faces.push(new Face(color7, v7[8], v7[9], v7[13], v7[12]));
    faces.push(new Face(color7, v7[8], v7[9], v7[25], v7[24]));
    faces.push(new Face(color7, v7[8], v7[9], v7[41], v7[40]));
    faces.push(new Face(color7, v7[8], v7[10], v7[14], v7[12]));
    faces.push(new Face(color7, v7[8], v7[10], v7[26], v7[24]));
    faces.push(new Face(color7, v7[8], v7[10], v7[42], v7[40]));
    faces.push(new Face(color7, v7[8], v7[12], v7[28], v7[24]));
    faces.push(new Face(color7, v7[8], v7[12], v7[44], v7[40]));
    faces.push(new Face(color7, v7[8], v7[24], v7[56], v7[40]));
    faces.push(new Face(color7, v7[9], v7[11], v7[15], v7[13]));
    faces.push(new Face(color7, v7[9], v7[11], v7[27], v7[25]));
    faces.push(new Face(color7, v7[9], v7[11], v7[43], v7[41]));
    faces.push(new Face(color7, v7[9], v7[13], v7[29], v7[25]));
    faces.push(new Face(color7, v7[9], v7[13], v7[45], v7[41]));
    faces.push(new Face(color7, v7[9], v7[25], v7[57], v7[41]));
    faces.push(new Face(color7, v7[10], v7[11], v7[15], v7[14]));
    faces.push(new Face(color7, v7[10], v7[11], v7[27], v7[26]));
    faces.push(new Face(color7, v7[10], v7[11], v7[43], v7[42]));
    faces.push(new Face(color7, v7[10], v7[14], v7[30], v7[26]));
    faces.push(new Face(color7, v7[10], v7[14], v7[46], v7[42]));
    faces.push(new Face(color7, v7[10], v7[26], v7[58], v7[42]));
    faces.push(new Face(color7, v7[11], v7[15], v7[31], v7[27]));
    faces.push(new Face(color7, v7[11], v7[15], v7[47], v7[43]));
    faces.push(new Face(color7, v7[11], v7[27], v7[59], v7[43]));
    faces.push(new Face(color7, v7[12], v7[13], v7[15], v7[14]));
    faces.push(new Face(color7, v7[12], v7[13], v7[29], v7[28]));
    faces.push(new Face(color7, v7[12], v7[13], v7[45], v7[44]));
    faces.push(new Face(color7, v7[12], v7[14], v7[30], v7[28]));
    faces.push(new Face(color7, v7[12], v7[14], v7[46], v7[44]));
    faces.push(new Face(color7, v7[12], v7[28], v7[60], v7[44]));
    faces.push(new Face(color7, v7[13], v7[15], v7[31], v7[29]));
    faces.push(new Face(color7, v7[13], v7[15], v7[47], v7[45]));
    faces.push(new Face(color7, v7[13], v7[29], v7[61], v7[45]));
    faces.push(new Face(color7, v7[14], v7[15], v7[31], v7[30]));
    faces.push(new Face(color7, v7[14], v7[15], v7[47], v7[46]));
    faces.push(new Face(color7, v7[14], v7[30], v7[62], v7[46]));
    faces.push(new Face(color7, v7[15], v7[31], v7[63], v7[47]));
    faces.push(new Face(color7, v7[16], v7[17], v7[19], v7[18]));
    faces.push(new Face(color7, v7[16], v7[17], v7[21], v7[20]));
    faces.push(new Face(color7, v7[16], v7[17], v7[25], v7[24]));
    faces.push(new Face(color7, v7[16], v7[17], v7[49], v7[48]));
    faces.push(new Face(color7, v7[16], v7[18], v7[22], v7[20]));
    faces.push(new Face(color7, v7[16], v7[18], v7[26], v7[24]));
    faces.push(new Face(color7, v7[16], v7[18], v7[50], v7[48]));
    faces.push(new Face(color7, v7[16], v7[20], v7[28], v7[24]));
    faces.push(new Face(color7, v7[16], v7[20], v7[52], v7[48]));
    faces.push(new Face(color7, v7[16], v7[24], v7[56], v7[48]));
    faces.push(new Face(color7, v7[17], v7[19], v7[23], v7[21]));
    faces.push(new Face(color7, v7[17], v7[19], v7[27], v7[25]));
    faces.push(new Face(color7, v7[17], v7[19], v7[51], v7[49]));
    faces.push(new Face(color7, v7[17], v7[21], v7[29], v7[25]));
    faces.push(new Face(color7, v7[17], v7[21], v7[53], v7[49]));
    faces.push(new Face(color7, v7[17], v7[25], v7[57], v7[49]));
    faces.push(new Face(color7, v7[18], v7[19], v7[23], v7[22]));
    faces.push(new Face(color7, v7[18], v7[19], v7[27], v7[26]));
    faces.push(new Face(color7, v7[18], v7[19], v7[51], v7[50]));
    faces.push(new Face(color7, v7[18], v7[22], v7[30], v7[26]));
    faces.push(new Face(color7, v7[18], v7[22], v7[54], v7[50]));
    faces.push(new Face(color7, v7[18], v7[26], v7[58], v7[50]));
    faces.push(new Face(color7, v7[19], v7[23], v7[31], v7[27]));
    faces.push(new Face(color7, v7[19], v7[23], v7[55], v7[51]));
    faces.push(new Face(color7, v7[19], v7[27], v7[59], v7[51]));
    faces.push(new Face(color7, v7[20], v7[21], v7[23], v7[22]));
    faces.push(new Face(color7, v7[20], v7[21], v7[29], v7[28]));
    faces.push(new Face(color7, v7[20], v7[21], v7[53], v7[52]));
    faces.push(new Face(color7, v7[20], v7[22], v7[30], v7[28]));
    faces.push(new Face(color7, v7[20], v7[22], v7[54], v7[52]));
    faces.push(new Face(color7, v7[20], v7[28], v7[60], v7[52]));
    faces.push(new Face(color7, v7[21], v7[23], v7[31], v7[29]));
    faces.push(new Face(color7, v7[21], v7[23], v7[55], v7[53]));
    faces.push(new Face(color7, v7[21], v7[29], v7[61], v7[53]));
    faces.push(new Face(color7, v7[22], v7[23], v7[31], v7[30]));
    faces.push(new Face(color7, v7[22], v7[23], v7[55], v7[54]));
    faces.push(new Face(color7, v7[22], v7[30], v7[62], v7[54]));
    faces.push(new Face(color7, v7[23], v7[31], v7[63], v7[55]));
    faces.push(new Face(color7, v7[24], v7[25], v7[27], v7[26]));
    faces.push(new Face(color7, v7[24], v7[25], v7[29], v7[28]));
    faces.push(new Face(color7, v7[24], v7[25], v7[57], v7[56]));
    faces.push(new Face(color7, v7[24], v7[26], v7[30], v7[28]));
    faces.push(new Face(color7, v7[24], v7[26], v7[58], v7[56]));
    faces.push(new Face(color7, v7[24], v7[28], v7[60], v7[56]));
    faces.push(new Face(color7, v7[25], v7[27], v7[31], v7[29]));
    faces.push(new Face(color7, v7[25], v7[27], v7[59], v7[57]));
    faces.push(new Face(color7, v7[25], v7[29], v7[61], v7[57]));
    faces.push(new Face(color7, v7[26], v7[27], v7[31], v7[30]));
    faces.push(new Face(color7, v7[26], v7[27], v7[59], v7[58]));
    faces.push(new Face(color7, v7[26], v7[30], v7[62], v7[58]));
    faces.push(new Face(color7, v7[27], v7[31], v7[63], v7[59]));
    faces.push(new Face(color7, v7[28], v7[29], v7[31], v7[30]));
    faces.push(new Face(color7, v7[28], v7[29], v7[61], v7[60]));
    faces.push(new Face(color7, v7[28], v7[30], v7[62], v7[60]));
    faces.push(new Face(color7, v7[29], v7[31], v7[63], v7[61]));
    faces.push(new Face(color7, v7[30], v7[31], v7[63], v7[62]));
    faces.push(new Face(color7, v7[32], v7[33], v7[35], v7[34]));
    faces.push(new Face(color7, v7[32], v7[33], v7[37], v7[36]));
    faces.push(new Face(color7, v7[32], v7[33], v7[41], v7[40]));
    faces.push(new Face(color7, v7[32], v7[33], v7[49], v7[48]));
    faces.push(new Face(color7, v7[32], v7[34], v7[38], v7[36]));
    faces.push(new Face(color7, v7[32], v7[34], v7[42], v7[40]));
    faces.push(new Face(color7, v7[32], v7[34], v7[50], v7[48]));
    faces.push(new Face(color7, v7[32], v7[36], v7[44], v7[40]));
    faces.push(new Face(color7, v7[32], v7[36], v7[52], v7[48]));
    faces.push(new Face(color7, v7[32], v7[40], v7[56], v7[48]));
    faces.push(new Face(color7, v7[33], v7[35], v7[39], v7[37]));
    faces.push(new Face(color7, v7[33], v7[35], v7[43], v7[41]));
    faces.push(new Face(color7, v7[33], v7[35], v7[51], v7[49]));
    faces.push(new Face(color7, v7[33], v7[37], v7[45], v7[41]));
    faces.push(new Face(color7, v7[33], v7[37], v7[53], v7[49]));
    faces.push(new Face(color7, v7[33], v7[41], v7[57], v7[49]));
    faces.push(new Face(color7, v7[34], v7[35], v7[39], v7[38]));
    faces.push(new Face(color7, v7[34], v7[35], v7[43], v7[42]));
    faces.push(new Face(color7, v7[34], v7[35], v7[51], v7[50]));
    faces.push(new Face(color7, v7[34], v7[38], v7[46], v7[42]));
    faces.push(new Face(color7, v7[34], v7[38], v7[54], v7[50]));
    faces.push(new Face(color7, v7[34], v7[42], v7[58], v7[50]));
    faces.push(new Face(color7, v7[35], v7[39], v7[47], v7[43]));
    faces.push(new Face(color7, v7[35], v7[39], v7[55], v7[51]));
    faces.push(new Face(color7, v7[35], v7[43], v7[59], v7[51]));
    faces.push(new Face(color7, v7[36], v7[37], v7[39], v7[38]));
    faces.push(new Face(color7, v7[36], v7[37], v7[45], v7[44]));
    faces.push(new Face(color7, v7[36], v7[37], v7[53], v7[52]));
    faces.push(new Face(color7, v7[36], v7[38], v7[46], v7[44]));
    faces.push(new Face(color7, v7[36], v7[38], v7[54], v7[52]));
    faces.push(new Face(color7, v7[36], v7[44], v7[60], v7[52]));
    faces.push(new Face(color7, v7[37], v7[39], v7[47], v7[45]));
    faces.push(new Face(color7, v7[37], v7[39], v7[55], v7[53]));
    faces.push(new Face(color7, v7[37], v7[45], v7[61], v7[53]));
    faces.push(new Face(color7, v7[38], v7[39], v7[47], v7[46]));
    faces.push(new Face(color7, v7[38], v7[39], v7[55], v7[54]));
    faces.push(new Face(color7, v7[38], v7[46], v7[62], v7[54]));
    faces.push(new Face(color7, v7[39], v7[47], v7[63], v7[55]));
    faces.push(new Face(color7, v7[40], v7[41], v7[43], v7[42]));
    faces.push(new Face(color7, v7[40], v7[41], v7[45], v7[44]));
    faces.push(new Face(color7, v7[40], v7[41], v7[57], v7[56]));
    faces.push(new Face(color7, v7[40], v7[42], v7[46], v7[44]));
    faces.push(new Face(color7, v7[40], v7[42], v7[58], v7[56]));
    faces.push(new Face(color7, v7[40], v7[44], v7[60], v7[56]));
    faces.push(new Face(color7, v7[41], v7[43], v7[47], v7[45]));
    faces.push(new Face(color7, v7[41], v7[43], v7[59], v7[57]));
    faces.push(new Face(color7, v7[41], v7[45], v7[61], v7[57]));
    faces.push(new Face(color7, v7[42], v7[43], v7[47], v7[46]));
    faces.push(new Face(color7, v7[42], v7[43], v7[59], v7[58]));
    faces.push(new Face(color7, v7[42], v7[46], v7[62], v7[58]));
    faces.push(new Face(color7, v7[43], v7[47], v7[63], v7[59]));
    faces.push(new Face(color7, v7[44], v7[45], v7[47], v7[46]));
    faces.push(new Face(color7, v7[44], v7[45], v7[61], v7[60]));
    faces.push(new Face(color7, v7[44], v7[46], v7[62], v7[60]));
    faces.push(new Face(color7, v7[45], v7[47], v7[63], v7[61]));
    faces.push(new Face(color7, v7[46], v7[47], v7[63], v7[62]));
    faces.push(new Face(color7, v7[48], v7[49], v7[51], v7[50]));
    faces.push(new Face(color7, v7[48], v7[49], v7[53], v7[52]));
    faces.push(new Face(color7, v7[48], v7[49], v7[57], v7[56]));
    faces.push(new Face(color7, v7[48], v7[50], v7[54], v7[52]));
    faces.push(new Face(color7, v7[48], v7[50], v7[58], v7[56]));
    faces.push(new Face(color7, v7[48], v7[52], v7[60], v7[56]));
    faces.push(new Face(color7, v7[49], v7[51], v7[55], v7[53]));
    faces.push(new Face(color7, v7[49], v7[51], v7[59], v7[57]));
    faces.push(new Face(color7, v7[49], v7[53], v7[61], v7[57]));
    faces.push(new Face(color7, v7[50], v7[51], v7[55], v7[54]));
    faces.push(new Face(color7, v7[50], v7[51], v7[59], v7[58]));
    faces.push(new Face(color7, v7[50], v7[54], v7[62], v7[58]));
    faces.push(new Face(color7, v7[51], v7[55], v7[63], v7[59]));
    faces.push(new Face(color7, v7[52], v7[53], v7[55], v7[54]));
    faces.push(new Face(color7, v7[52], v7[53], v7[61], v7[60]));
    faces.push(new Face(color7, v7[52], v7[54], v7[62], v7[60]));
    faces.push(new Face(color7, v7[53], v7[55], v7[63], v7[61]));
    faces.push(new Face(color7, v7[54], v7[55], v7[63], v7[62]));
    faces.push(new Face(color7, v7[56], v7[57], v7[59], v7[58]));
    faces.push(new Face(color7, v7[56], v7[57], v7[61], v7[60]));
    faces.push(new Face(color7, v7[56], v7[58], v7[62], v7[60]));
    faces.push(new Face(color7, v7[57], v7[59], v7[63], v7[61]));
    faces.push(new Face(color7, v7[58], v7[59], v7[63], v7[62]));
    faces.push(new Face(color7, v7[60], v7[61], v7[63], v7[62]));
    for (let i = 0; i < v7.length; i++) {
        v7[i].rotate(r);
        v7[i].project();
    }

    v8[0] = new Vertex(-w/2, w/2, -w/2, -w/2, -w/2, -w/2, -w/2);
    v8[1] = new Vertex(-w/2, w/2+Math.sin(theta)*w, -w/2, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v8[2] = new Vertex(-w/2, w/2, -w/2, -w/2, -w/2, w/2, -w/2);
    v8[3] = new Vertex(-w/2, w/2+Math.sin(theta)*w, -w/2, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v8[4] = new Vertex(-w/2, w/2, -w/2, -w/2, w/2, -w/2, -w/2);
    v8[5] = new Vertex(-w/2, w/2+Math.sin(theta)*w, -w/2, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v8[6] = new Vertex(-w/2, w/2, -w/2, -w/2, w/2, w/2, -w/2);
    v8[7] = new Vertex(-w/2, w/2+Math.sin(theta)*w, -w/2, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v8[8] = new Vertex(-w/2, w/2, -w/2, w/2, -w/2, -w/2, -w/2);
    v8[9] = new Vertex(-w/2, w/2+Math.sin(theta)*w, -w/2, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v8[10] = new Vertex(-w/2, w/2, -w/2, w/2, -w/2, w/2, -w/2);
    v8[11] = new Vertex(-w/2, w/2+Math.sin(theta)*w, -w/2, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v8[12] = new Vertex(-w/2, w/2, -w/2, w/2, w/2, -w/2, -w/2);
    v8[13] = new Vertex(-w/2, w/2+Math.sin(theta)*w, -w/2, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v8[14] = new Vertex(-w/2, w/2, -w/2, w/2, w/2, w/2, -w/2);
    v8[15] = new Vertex(-w/2, w/2+Math.sin(theta)*w, -w/2, w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v8[16] = new Vertex(-w/2, w/2, w/2, -w/2, -w/2, -w/2, -w/2);
    v8[17] = new Vertex(-w/2, w/2+Math.sin(theta)*w, w/2, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v8[18] = new Vertex(-w/2, w/2, w/2, -w/2, -w/2, w/2, -w/2);
    v8[19] = new Vertex(-w/2, w/2+Math.sin(theta)*w, w/2, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v8[20] = new Vertex(-w/2, w/2, w/2, -w/2, w/2, -w/2, -w/2);
    v8[21] = new Vertex(-w/2, w/2+Math.sin(theta)*w, w/2, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v8[22] = new Vertex(-w/2, w/2, w/2, -w/2, w/2, w/2, -w/2);
    v8[23] = new Vertex(-w/2, w/2+Math.sin(theta)*w, w/2, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v8[24] = new Vertex(-w/2, w/2, w/2, w/2, -w/2, -w/2, -w/2);
    v8[25] = new Vertex(-w/2, w/2+Math.sin(theta)*w, w/2, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v8[26] = new Vertex(-w/2, w/2, w/2, w/2, -w/2, w/2, -w/2);
    v8[27] = new Vertex(-w/2, w/2+Math.sin(theta)*w, w/2, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v8[28] = new Vertex(-w/2, w/2, w/2, w/2, w/2, -w/2, -w/2);
    v8[29] = new Vertex(-w/2, w/2+Math.sin(theta)*w, w/2, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v8[30] = new Vertex(-w/2, w/2, w/2, w/2, w/2, w/2, -w/2);
    v8[31] = new Vertex(-w/2, w/2+Math.sin(theta)*w, w/2, w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v8[32] = new Vertex(w/2, w/2, -w/2, -w/2, -w/2, -w/2, -w/2);
    v8[33] = new Vertex(w/2, w/2+Math.sin(theta)*w, -w/2, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v8[34] = new Vertex(w/2, w/2, -w/2, -w/2, -w/2, w/2, -w/2);
    v8[35] = new Vertex(w/2, w/2+Math.sin(theta)*w, -w/2, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v8[36] = new Vertex(w/2, w/2, -w/2, -w/2, w/2, -w/2, -w/2);
    v8[37] = new Vertex(w/2, w/2+Math.sin(theta)*w, -w/2, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v8[38] = new Vertex(w/2, w/2, -w/2, -w/2, w/2, w/2, -w/2);
    v8[39] = new Vertex(w/2, w/2+Math.sin(theta)*w, -w/2, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v8[40] = new Vertex(w/2, w/2, -w/2, w/2, -w/2, -w/2, -w/2);
    v8[41] = new Vertex(w/2, w/2+Math.sin(theta)*w, -w/2, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v8[42] = new Vertex(w/2, w/2, -w/2, w/2, -w/2, w/2, -w/2);
    v8[43] = new Vertex(w/2, w/2+Math.sin(theta)*w, -w/2, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v8[44] = new Vertex(w/2, w/2, -w/2, w/2, w/2, -w/2, -w/2);
    v8[45] = new Vertex(w/2, w/2+Math.sin(theta)*w, -w/2, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v8[46] = new Vertex(w/2, w/2, -w/2, w/2, w/2, w/2, -w/2);
    v8[47] = new Vertex(w/2, w/2+Math.sin(theta)*w, -w/2, w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v8[48] = new Vertex(w/2, w/2, w/2, -w/2, -w/2, -w/2, -w/2);
    v8[49] = new Vertex(w/2, w/2+Math.sin(theta)*w, w/2, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v8[50] = new Vertex(w/2, w/2, w/2, -w/2, -w/2, w/2, -w/2);
    v8[51] = new Vertex(w/2, w/2+Math.sin(theta)*w, w/2, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v8[52] = new Vertex(w/2, w/2, w/2, -w/2, w/2, -w/2, -w/2);
    v8[53] = new Vertex(w/2, w/2+Math.sin(theta)*w, w/2, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v8[54] = new Vertex(w/2, w/2, w/2, -w/2, w/2, w/2, -w/2);
    v8[55] = new Vertex(w/2, w/2+Math.sin(theta)*w, w/2, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v8[56] = new Vertex(w/2, w/2, w/2, w/2, -w/2, -w/2, -w/2);
    v8[57] = new Vertex(w/2, w/2+Math.sin(theta)*w, w/2, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v8[58] = new Vertex(w/2, w/2, w/2, w/2, -w/2, w/2, -w/2);
    v8[59] = new Vertex(w/2, w/2+Math.sin(theta)*w, w/2, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v8[60] = new Vertex(w/2, w/2, w/2, w/2, w/2, -w/2, -w/2);
    v8[61] = new Vertex(w/2, w/2+Math.sin(theta)*w, w/2, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v8[62] = new Vertex(w/2, w/2, w/2, w/2, w/2, w/2, -w/2);
    v8[63] = new Vertex(w/2, w/2+Math.sin(theta)*w, w/2, w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    faces.push(new Face(color8, v8[0], v8[1], v8[3], v8[2]));
    faces.push(new Face(color8, v8[0], v8[1], v8[5], v8[4]));
    faces.push(new Face(color8, v8[0], v8[1], v8[9], v8[8]));
    faces.push(new Face(color8, v8[0], v8[1], v8[17], v8[16]));
    faces.push(new Face(color8, v8[0], v8[1], v8[33], v8[32]));
    faces.push(new Face(color8, v8[0], v8[2], v8[6], v8[4]));
    faces.push(new Face(color8, v8[0], v8[2], v8[10], v8[8]));
    faces.push(new Face(color8, v8[0], v8[2], v8[18], v8[16]));
    faces.push(new Face(color8, v8[0], v8[2], v8[34], v8[32]));
    faces.push(new Face(color8, v8[0], v8[4], v8[12], v8[8]));
    faces.push(new Face(color8, v8[0], v8[4], v8[20], v8[16]));
    faces.push(new Face(color8, v8[0], v8[4], v8[36], v8[32]));
    faces.push(new Face(color8, v8[0], v8[8], v8[24], v8[16]));
    faces.push(new Face(color8, v8[0], v8[8], v8[40], v8[32]));
    faces.push(new Face(color8, v8[0], v8[16], v8[48], v8[32]));
    faces.push(new Face(color8, v8[1], v8[3], v8[7], v8[5]));
    faces.push(new Face(color8, v8[1], v8[3], v8[11], v8[9]));
    faces.push(new Face(color8, v8[1], v8[3], v8[19], v8[17]));
    faces.push(new Face(color8, v8[1], v8[3], v8[35], v8[33]));
    faces.push(new Face(color8, v8[1], v8[5], v8[13], v8[9]));
    faces.push(new Face(color8, v8[1], v8[5], v8[21], v8[17]));
    faces.push(new Face(color8, v8[1], v8[5], v8[37], v8[33]));
    faces.push(new Face(color8, v8[1], v8[9], v8[25], v8[17]));
    faces.push(new Face(color8, v8[1], v8[9], v8[41], v8[33]));
    faces.push(new Face(color8, v8[1], v8[17], v8[49], v8[33]));
    faces.push(new Face(color8, v8[2], v8[3], v8[7], v8[6]));
    faces.push(new Face(color8, v8[2], v8[3], v8[11], v8[10]));
    faces.push(new Face(color8, v8[2], v8[3], v8[19], v8[18]));
    faces.push(new Face(color8, v8[2], v8[3], v8[35], v8[34]));
    faces.push(new Face(color8, v8[2], v8[6], v8[14], v8[10]));
    faces.push(new Face(color8, v8[2], v8[6], v8[22], v8[18]));
    faces.push(new Face(color8, v8[2], v8[6], v8[38], v8[34]));
    faces.push(new Face(color8, v8[2], v8[10], v8[26], v8[18]));
    faces.push(new Face(color8, v8[2], v8[10], v8[42], v8[34]));
    faces.push(new Face(color8, v8[2], v8[18], v8[50], v8[34]));
    faces.push(new Face(color8, v8[3], v8[7], v8[15], v8[11]));
    faces.push(new Face(color8, v8[3], v8[7], v8[23], v8[19]));
    faces.push(new Face(color8, v8[3], v8[7], v8[39], v8[35]));
    faces.push(new Face(color8, v8[3], v8[11], v8[27], v8[19]));
    faces.push(new Face(color8, v8[3], v8[11], v8[43], v8[35]));
    faces.push(new Face(color8, v8[3], v8[19], v8[51], v8[35]));
    faces.push(new Face(color8, v8[4], v8[5], v8[7], v8[6]));
    faces.push(new Face(color8, v8[4], v8[5], v8[13], v8[12]));
    faces.push(new Face(color8, v8[4], v8[5], v8[21], v8[20]));
    faces.push(new Face(color8, v8[4], v8[5], v8[37], v8[36]));
    faces.push(new Face(color8, v8[4], v8[6], v8[14], v8[12]));
    faces.push(new Face(color8, v8[4], v8[6], v8[22], v8[20]));
    faces.push(new Face(color8, v8[4], v8[6], v8[38], v8[36]));
    faces.push(new Face(color8, v8[4], v8[12], v8[28], v8[20]));
    faces.push(new Face(color8, v8[4], v8[12], v8[44], v8[36]));
    faces.push(new Face(color8, v8[4], v8[20], v8[52], v8[36]));
    faces.push(new Face(color8, v8[5], v8[7], v8[15], v8[13]));
    faces.push(new Face(color8, v8[5], v8[7], v8[23], v8[21]));
    faces.push(new Face(color8, v8[5], v8[7], v8[39], v8[37]));
    faces.push(new Face(color8, v8[5], v8[13], v8[29], v8[21]));
    faces.push(new Face(color8, v8[5], v8[13], v8[45], v8[37]));
    faces.push(new Face(color8, v8[5], v8[21], v8[53], v8[37]));
    faces.push(new Face(color8, v8[6], v8[7], v8[15], v8[14]));
    faces.push(new Face(color8, v8[6], v8[7], v8[23], v8[22]));
    faces.push(new Face(color8, v8[6], v8[7], v8[39], v8[38]));
    faces.push(new Face(color8, v8[6], v8[14], v8[30], v8[22]));
    faces.push(new Face(color8, v8[6], v8[14], v8[46], v8[38]));
    faces.push(new Face(color8, v8[6], v8[22], v8[54], v8[38]));
    faces.push(new Face(color8, v8[7], v8[15], v8[31], v8[23]));
    faces.push(new Face(color8, v8[7], v8[15], v8[47], v8[39]));
    faces.push(new Face(color8, v8[7], v8[23], v8[55], v8[39]));
    faces.push(new Face(color8, v8[8], v8[9], v8[11], v8[10]));
    faces.push(new Face(color8, v8[8], v8[9], v8[13], v8[12]));
    faces.push(new Face(color8, v8[8], v8[9], v8[25], v8[24]));
    faces.push(new Face(color8, v8[8], v8[9], v8[41], v8[40]));
    faces.push(new Face(color8, v8[8], v8[10], v8[14], v8[12]));
    faces.push(new Face(color8, v8[8], v8[10], v8[26], v8[24]));
    faces.push(new Face(color8, v8[8], v8[10], v8[42], v8[40]));
    faces.push(new Face(color8, v8[8], v8[12], v8[28], v8[24]));
    faces.push(new Face(color8, v8[8], v8[12], v8[44], v8[40]));
    faces.push(new Face(color8, v8[8], v8[24], v8[56], v8[40]));
    faces.push(new Face(color8, v8[9], v8[11], v8[15], v8[13]));
    faces.push(new Face(color8, v8[9], v8[11], v8[27], v8[25]));
    faces.push(new Face(color8, v8[9], v8[11], v8[43], v8[41]));
    faces.push(new Face(color8, v8[9], v8[13], v8[29], v8[25]));
    faces.push(new Face(color8, v8[9], v8[13], v8[45], v8[41]));
    faces.push(new Face(color8, v8[9], v8[25], v8[57], v8[41]));
    faces.push(new Face(color8, v8[10], v8[11], v8[15], v8[14]));
    faces.push(new Face(color8, v8[10], v8[11], v8[27], v8[26]));
    faces.push(new Face(color8, v8[10], v8[11], v8[43], v8[42]));
    faces.push(new Face(color8, v8[10], v8[14], v8[30], v8[26]));
    faces.push(new Face(color8, v8[10], v8[14], v8[46], v8[42]));
    faces.push(new Face(color8, v8[10], v8[26], v8[58], v8[42]));
    faces.push(new Face(color8, v8[11], v8[15], v8[31], v8[27]));
    faces.push(new Face(color8, v8[11], v8[15], v8[47], v8[43]));
    faces.push(new Face(color8, v8[11], v8[27], v8[59], v8[43]));
    faces.push(new Face(color8, v8[12], v8[13], v8[15], v8[14]));
    faces.push(new Face(color8, v8[12], v8[13], v8[29], v8[28]));
    faces.push(new Face(color8, v8[12], v8[13], v8[45], v8[44]));
    faces.push(new Face(color8, v8[12], v8[14], v8[30], v8[28]));
    faces.push(new Face(color8, v8[12], v8[14], v8[46], v8[44]));
    faces.push(new Face(color8, v8[12], v8[28], v8[60], v8[44]));
    faces.push(new Face(color8, v8[13], v8[15], v8[31], v8[29]));
    faces.push(new Face(color8, v8[13], v8[15], v8[47], v8[45]));
    faces.push(new Face(color8, v8[13], v8[29], v8[61], v8[45]));
    faces.push(new Face(color8, v8[14], v8[15], v8[31], v8[30]));
    faces.push(new Face(color8, v8[14], v8[15], v8[47], v8[46]));
    faces.push(new Face(color8, v8[14], v8[30], v8[62], v8[46]));
    faces.push(new Face(color8, v8[15], v8[31], v8[63], v8[47]));
    faces.push(new Face(color8, v8[16], v8[17], v8[19], v8[18]));
    faces.push(new Face(color8, v8[16], v8[17], v8[21], v8[20]));
    faces.push(new Face(color8, v8[16], v8[17], v8[25], v8[24]));
    faces.push(new Face(color8, v8[16], v8[17], v8[49], v8[48]));
    faces.push(new Face(color8, v8[16], v8[18], v8[22], v8[20]));
    faces.push(new Face(color8, v8[16], v8[18], v8[26], v8[24]));
    faces.push(new Face(color8, v8[16], v8[18], v8[50], v8[48]));
    faces.push(new Face(color8, v8[16], v8[20], v8[28], v8[24]));
    faces.push(new Face(color8, v8[16], v8[20], v8[52], v8[48]));
    faces.push(new Face(color8, v8[16], v8[24], v8[56], v8[48]));
    faces.push(new Face(color8, v8[17], v8[19], v8[23], v8[21]));
    faces.push(new Face(color8, v8[17], v8[19], v8[27], v8[25]));
    faces.push(new Face(color8, v8[17], v8[19], v8[51], v8[49]));
    faces.push(new Face(color8, v8[17], v8[21], v8[29], v8[25]));
    faces.push(new Face(color8, v8[17], v8[21], v8[53], v8[49]));
    faces.push(new Face(color8, v8[17], v8[25], v8[57], v8[49]));
    faces.push(new Face(color8, v8[18], v8[19], v8[23], v8[22]));
    faces.push(new Face(color8, v8[18], v8[19], v8[27], v8[26]));
    faces.push(new Face(color8, v8[18], v8[19], v8[51], v8[50]));
    faces.push(new Face(color8, v8[18], v8[22], v8[30], v8[26]));
    faces.push(new Face(color8, v8[18], v8[22], v8[54], v8[50]));
    faces.push(new Face(color8, v8[18], v8[26], v8[58], v8[50]));
    faces.push(new Face(color8, v8[19], v8[23], v8[31], v8[27]));
    faces.push(new Face(color8, v8[19], v8[23], v8[55], v8[51]));
    faces.push(new Face(color8, v8[19], v8[27], v8[59], v8[51]));
    faces.push(new Face(color8, v8[20], v8[21], v8[23], v8[22]));
    faces.push(new Face(color8, v8[20], v8[21], v8[29], v8[28]));
    faces.push(new Face(color8, v8[20], v8[21], v8[53], v8[52]));
    faces.push(new Face(color8, v8[20], v8[22], v8[30], v8[28]));
    faces.push(new Face(color8, v8[20], v8[22], v8[54], v8[52]));
    faces.push(new Face(color8, v8[20], v8[28], v8[60], v8[52]));
    faces.push(new Face(color8, v8[21], v8[23], v8[31], v8[29]));
    faces.push(new Face(color8, v8[21], v8[23], v8[55], v8[53]));
    faces.push(new Face(color8, v8[21], v8[29], v8[61], v8[53]));
    faces.push(new Face(color8, v8[22], v8[23], v8[31], v8[30]));
    faces.push(new Face(color8, v8[22], v8[23], v8[55], v8[54]));
    faces.push(new Face(color8, v8[22], v8[30], v8[62], v8[54]));
    faces.push(new Face(color8, v8[23], v8[31], v8[63], v8[55]));
    faces.push(new Face(color8, v8[24], v8[25], v8[27], v8[26]));
    faces.push(new Face(color8, v8[24], v8[25], v8[29], v8[28]));
    faces.push(new Face(color8, v8[24], v8[25], v8[57], v8[56]));
    faces.push(new Face(color8, v8[24], v8[26], v8[30], v8[28]));
    faces.push(new Face(color8, v8[24], v8[26], v8[58], v8[56]));
    faces.push(new Face(color8, v8[24], v8[28], v8[60], v8[56]));
    faces.push(new Face(color8, v8[25], v8[27], v8[31], v8[29]));
    faces.push(new Face(color8, v8[25], v8[27], v8[59], v8[57]));
    faces.push(new Face(color8, v8[25], v8[29], v8[61], v8[57]));
    faces.push(new Face(color8, v8[26], v8[27], v8[31], v8[30]));
    faces.push(new Face(color8, v8[26], v8[27], v8[59], v8[58]));
    faces.push(new Face(color8, v8[26], v8[30], v8[62], v8[58]));
    faces.push(new Face(color8, v8[27], v8[31], v8[63], v8[59]));
    faces.push(new Face(color8, v8[28], v8[29], v8[31], v8[30]));
    faces.push(new Face(color8, v8[28], v8[29], v8[61], v8[60]));
    faces.push(new Face(color8, v8[28], v8[30], v8[62], v8[60]));
    faces.push(new Face(color8, v8[29], v8[31], v8[63], v8[61]));
    faces.push(new Face(color8, v8[30], v8[31], v8[63], v8[62]));
    faces.push(new Face(color8, v8[32], v8[33], v8[35], v8[34]));
    faces.push(new Face(color8, v8[32], v8[33], v8[37], v8[36]));
    faces.push(new Face(color8, v8[32], v8[33], v8[41], v8[40]));
    faces.push(new Face(color8, v8[32], v8[33], v8[49], v8[48]));
    faces.push(new Face(color8, v8[32], v8[34], v8[38], v8[36]));
    faces.push(new Face(color8, v8[32], v8[34], v8[42], v8[40]));
    faces.push(new Face(color8, v8[32], v8[34], v8[50], v8[48]));
    faces.push(new Face(color8, v8[32], v8[36], v8[44], v8[40]));
    faces.push(new Face(color8, v8[32], v8[36], v8[52], v8[48]));
    faces.push(new Face(color8, v8[32], v8[40], v8[56], v8[48]));
    faces.push(new Face(color8, v8[33], v8[35], v8[39], v8[37]));
    faces.push(new Face(color8, v8[33], v8[35], v8[43], v8[41]));
    faces.push(new Face(color8, v8[33], v8[35], v8[51], v8[49]));
    faces.push(new Face(color8, v8[33], v8[37], v8[45], v8[41]));
    faces.push(new Face(color8, v8[33], v8[37], v8[53], v8[49]));
    faces.push(new Face(color8, v8[33], v8[41], v8[57], v8[49]));
    faces.push(new Face(color8, v8[34], v8[35], v8[39], v8[38]));
    faces.push(new Face(color8, v8[34], v8[35], v8[43], v8[42]));
    faces.push(new Face(color8, v8[34], v8[35], v8[51], v8[50]));
    faces.push(new Face(color8, v8[34], v8[38], v8[46], v8[42]));
    faces.push(new Face(color8, v8[34], v8[38], v8[54], v8[50]));
    faces.push(new Face(color8, v8[34], v8[42], v8[58], v8[50]));
    faces.push(new Face(color8, v8[35], v8[39], v8[47], v8[43]));
    faces.push(new Face(color8, v8[35], v8[39], v8[55], v8[51]));
    faces.push(new Face(color8, v8[35], v8[43], v8[59], v8[51]));
    faces.push(new Face(color8, v8[36], v8[37], v8[39], v8[38]));
    faces.push(new Face(color8, v8[36], v8[37], v8[45], v8[44]));
    faces.push(new Face(color8, v8[36], v8[37], v8[53], v8[52]));
    faces.push(new Face(color8, v8[36], v8[38], v8[46], v8[44]));
    faces.push(new Face(color8, v8[36], v8[38], v8[54], v8[52]));
    faces.push(new Face(color8, v8[36], v8[44], v8[60], v8[52]));
    faces.push(new Face(color8, v8[37], v8[39], v8[47], v8[45]));
    faces.push(new Face(color8, v8[37], v8[39], v8[55], v8[53]));
    faces.push(new Face(color8, v8[37], v8[45], v8[61], v8[53]));
    faces.push(new Face(color8, v8[38], v8[39], v8[47], v8[46]));
    faces.push(new Face(color8, v8[38], v8[39], v8[55], v8[54]));
    faces.push(new Face(color8, v8[38], v8[46], v8[62], v8[54]));
    faces.push(new Face(color8, v8[39], v8[47], v8[63], v8[55]));
    faces.push(new Face(color8, v8[40], v8[41], v8[43], v8[42]));
    faces.push(new Face(color8, v8[40], v8[41], v8[45], v8[44]));
    faces.push(new Face(color8, v8[40], v8[41], v8[57], v8[56]));
    faces.push(new Face(color8, v8[40], v8[42], v8[46], v8[44]));
    faces.push(new Face(color8, v8[40], v8[42], v8[58], v8[56]));
    faces.push(new Face(color8, v8[40], v8[44], v8[60], v8[56]));
    faces.push(new Face(color8, v8[41], v8[43], v8[47], v8[45]));
    faces.push(new Face(color8, v8[41], v8[43], v8[59], v8[57]));
    faces.push(new Face(color8, v8[41], v8[45], v8[61], v8[57]));
    faces.push(new Face(color8, v8[42], v8[43], v8[47], v8[46]));
    faces.push(new Face(color8, v8[42], v8[43], v8[59], v8[58]));
    faces.push(new Face(color8, v8[42], v8[46], v8[62], v8[58]));
    faces.push(new Face(color8, v8[43], v8[47], v8[63], v8[59]));
    faces.push(new Face(color8, v8[44], v8[45], v8[47], v8[46]));
    faces.push(new Face(color8, v8[44], v8[45], v8[61], v8[60]));
    faces.push(new Face(color8, v8[44], v8[46], v8[62], v8[60]));
    faces.push(new Face(color8, v8[45], v8[47], v8[63], v8[61]));
    faces.push(new Face(color8, v8[46], v8[47], v8[63], v8[62]));
    faces.push(new Face(color8, v8[48], v8[49], v8[51], v8[50]));
    faces.push(new Face(color8, v8[48], v8[49], v8[53], v8[52]));
    faces.push(new Face(color8, v8[48], v8[49], v8[57], v8[56]));
    faces.push(new Face(color8, v8[48], v8[50], v8[54], v8[52]));
    faces.push(new Face(color8, v8[48], v8[50], v8[58], v8[56]));
    faces.push(new Face(color8, v8[48], v8[52], v8[60], v8[56]));
    faces.push(new Face(color8, v8[49], v8[51], v8[55], v8[53]));
    faces.push(new Face(color8, v8[49], v8[51], v8[59], v8[57]));
    faces.push(new Face(color8, v8[49], v8[53], v8[61], v8[57]));
    faces.push(new Face(color8, v8[50], v8[51], v8[55], v8[54]));
    faces.push(new Face(color8, v8[50], v8[51], v8[59], v8[58]));
    faces.push(new Face(color8, v8[50], v8[54], v8[62], v8[58]));
    faces.push(new Face(color8, v8[51], v8[55], v8[63], v8[59]));
    faces.push(new Face(color8, v8[52], v8[53], v8[55], v8[54]));
    faces.push(new Face(color8, v8[52], v8[53], v8[61], v8[60]));
    faces.push(new Face(color8, v8[52], v8[54], v8[62], v8[60]));
    faces.push(new Face(color8, v8[53], v8[55], v8[63], v8[61]));
    faces.push(new Face(color8, v8[54], v8[55], v8[63], v8[62]));
    faces.push(new Face(color8, v8[56], v8[57], v8[59], v8[58]));
    faces.push(new Face(color8, v8[56], v8[57], v8[61], v8[60]));
    faces.push(new Face(color8, v8[56], v8[58], v8[62], v8[60]));
    faces.push(new Face(color8, v8[57], v8[59], v8[63], v8[61]));
    faces.push(new Face(color8, v8[58], v8[59], v8[63], v8[62]));
    faces.push(new Face(color8, v8[60], v8[61], v8[63], v8[62]));
    for (let i = 0; i < v8.length; i++) {
        v8[i].rotate(r);
        v8[i].project();
    }

    v9[0] = new Vertex(-w/2, -w/2, w/2, -w/2, -w/2, -w/2, -w/2);
    v9[1] = new Vertex(-w/2, -w/2, w/2+Math.sin(theta)*w, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v9[2] = new Vertex(-w/2, -w/2, w/2, -w/2, -w/2, w/2, -w/2);
    v9[3] = new Vertex(-w/2, -w/2, w/2+Math.sin(theta)*w, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v9[4] = new Vertex(-w/2, -w/2, w/2, -w/2, w/2, -w/2, -w/2);
    v9[5] = new Vertex(-w/2, -w/2, w/2+Math.sin(theta)*w, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v9[6] = new Vertex(-w/2, -w/2, w/2, -w/2, w/2, w/2, -w/2);
    v9[7] = new Vertex(-w/2, -w/2, w/2+Math.sin(theta)*w, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v9[8] = new Vertex(-w/2, -w/2, w/2, w/2, -w/2, -w/2, -w/2);
    v9[9] = new Vertex(-w/2, -w/2, w/2+Math.sin(theta)*w, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v9[10] = new Vertex(-w/2, -w/2, w/2, w/2, -w/2, w/2, -w/2);
    v9[11] = new Vertex(-w/2, -w/2, w/2+Math.sin(theta)*w, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v9[12] = new Vertex(-w/2, -w/2, w/2, w/2, w/2, -w/2, -w/2);
    v9[13] = new Vertex(-w/2, -w/2, w/2+Math.sin(theta)*w, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v9[14] = new Vertex(-w/2, -w/2, w/2, w/2, w/2, w/2, -w/2);
    v9[15] = new Vertex(-w/2, -w/2, w/2+Math.sin(theta)*w, w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v9[16] = new Vertex(-w/2, w/2, w/2, -w/2, -w/2, -w/2, -w/2);
    v9[17] = new Vertex(-w/2, w/2, w/2+Math.sin(theta)*w, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v9[18] = new Vertex(-w/2, w/2, w/2, -w/2, -w/2, w/2, -w/2);
    v9[19] = new Vertex(-w/2, w/2, w/2+Math.sin(theta)*w, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v9[20] = new Vertex(-w/2, w/2, w/2, -w/2, w/2, -w/2, -w/2);
    v9[21] = new Vertex(-w/2, w/2, w/2+Math.sin(theta)*w, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v9[22] = new Vertex(-w/2, w/2, w/2, -w/2, w/2, w/2, -w/2);
    v9[23] = new Vertex(-w/2, w/2, w/2+Math.sin(theta)*w, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v9[24] = new Vertex(-w/2, w/2, w/2, w/2, -w/2, -w/2, -w/2);
    v9[25] = new Vertex(-w/2, w/2, w/2+Math.sin(theta)*w, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v9[26] = new Vertex(-w/2, w/2, w/2, w/2, -w/2, w/2, -w/2);
    v9[27] = new Vertex(-w/2, w/2, w/2+Math.sin(theta)*w, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v9[28] = new Vertex(-w/2, w/2, w/2, w/2, w/2, -w/2, -w/2);
    v9[29] = new Vertex(-w/2, w/2, w/2+Math.sin(theta)*w, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v9[30] = new Vertex(-w/2, w/2, w/2, w/2, w/2, w/2, -w/2);
    v9[31] = new Vertex(-w/2, w/2, w/2+Math.sin(theta)*w, w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v9[32] = new Vertex(w/2, -w/2, w/2, -w/2, -w/2, -w/2, -w/2);
    v9[33] = new Vertex(w/2, -w/2, w/2+Math.sin(theta)*w, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v9[34] = new Vertex(w/2, -w/2, w/2, -w/2, -w/2, w/2, -w/2);
    v9[35] = new Vertex(w/2, -w/2, w/2+Math.sin(theta)*w, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v9[36] = new Vertex(w/2, -w/2, w/2, -w/2, w/2, -w/2, -w/2);
    v9[37] = new Vertex(w/2, -w/2, w/2+Math.sin(theta)*w, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v9[38] = new Vertex(w/2, -w/2, w/2, -w/2, w/2, w/2, -w/2);
    v9[39] = new Vertex(w/2, -w/2, w/2+Math.sin(theta)*w, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v9[40] = new Vertex(w/2, -w/2, w/2, w/2, -w/2, -w/2, -w/2);
    v9[41] = new Vertex(w/2, -w/2, w/2+Math.sin(theta)*w, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v9[42] = new Vertex(w/2, -w/2, w/2, w/2, -w/2, w/2, -w/2);
    v9[43] = new Vertex(w/2, -w/2, w/2+Math.sin(theta)*w, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v9[44] = new Vertex(w/2, -w/2, w/2, w/2, w/2, -w/2, -w/2);
    v9[45] = new Vertex(w/2, -w/2, w/2+Math.sin(theta)*w, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v9[46] = new Vertex(w/2, -w/2, w/2, w/2, w/2, w/2, -w/2);
    v9[47] = new Vertex(w/2, -w/2, w/2+Math.sin(theta)*w, w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v9[48] = new Vertex(w/2, w/2, w/2, -w/2, -w/2, -w/2, -w/2);
    v9[49] = new Vertex(w/2, w/2, w/2+Math.sin(theta)*w, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v9[50] = new Vertex(w/2, w/2, w/2, -w/2, -w/2, w/2, -w/2);
    v9[51] = new Vertex(w/2, w/2, w/2+Math.sin(theta)*w, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v9[52] = new Vertex(w/2, w/2, w/2, -w/2, w/2, -w/2, -w/2);
    v9[53] = new Vertex(w/2, w/2, w/2+Math.sin(theta)*w, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v9[54] = new Vertex(w/2, w/2, w/2, -w/2, w/2, w/2, -w/2);
    v9[55] = new Vertex(w/2, w/2, w/2+Math.sin(theta)*w, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v9[56] = new Vertex(w/2, w/2, w/2, w/2, -w/2, -w/2, -w/2);
    v9[57] = new Vertex(w/2, w/2, w/2+Math.sin(theta)*w, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v9[58] = new Vertex(w/2, w/2, w/2, w/2, -w/2, w/2, -w/2);
    v9[59] = new Vertex(w/2, w/2, w/2+Math.sin(theta)*w, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v9[60] = new Vertex(w/2, w/2, w/2, w/2, w/2, -w/2, -w/2);
    v9[61] = new Vertex(w/2, w/2, w/2+Math.sin(theta)*w, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v9[62] = new Vertex(w/2, w/2, w/2, w/2, w/2, w/2, -w/2);
    v9[63] = new Vertex(w/2, w/2, w/2+Math.sin(theta)*w, w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    faces.push(new Face(color9, v9[0], v9[1], v9[3], v9[2]));
    faces.push(new Face(color9, v9[0], v9[1], v9[5], v9[4]));
    faces.push(new Face(color9, v9[0], v9[1], v9[9], v9[8]));
    faces.push(new Face(color9, v9[0], v9[1], v9[17], v9[16]));
    faces.push(new Face(color9, v9[0], v9[1], v9[33], v9[32]));
    faces.push(new Face(color9, v9[0], v9[2], v9[6], v9[4]));
    faces.push(new Face(color9, v9[0], v9[2], v9[10], v9[8]));
    faces.push(new Face(color9, v9[0], v9[2], v9[18], v9[16]));
    faces.push(new Face(color9, v9[0], v9[2], v9[34], v9[32]));
    faces.push(new Face(color9, v9[0], v9[4], v9[12], v9[8]));
    faces.push(new Face(color9, v9[0], v9[4], v9[20], v9[16]));
    faces.push(new Face(color9, v9[0], v9[4], v9[36], v9[32]));
    faces.push(new Face(color9, v9[0], v9[8], v9[24], v9[16]));
    faces.push(new Face(color9, v9[0], v9[8], v9[40], v9[32]));
    faces.push(new Face(color9, v9[0], v9[16], v9[48], v9[32]));
    faces.push(new Face(color9, v9[1], v9[3], v9[7], v9[5]));
    faces.push(new Face(color9, v9[1], v9[3], v9[11], v9[9]));
    faces.push(new Face(color9, v9[1], v9[3], v9[19], v9[17]));
    faces.push(new Face(color9, v9[1], v9[3], v9[35], v9[33]));
    faces.push(new Face(color9, v9[1], v9[5], v9[13], v9[9]));
    faces.push(new Face(color9, v9[1], v9[5], v9[21], v9[17]));
    faces.push(new Face(color9, v9[1], v9[5], v9[37], v9[33]));
    faces.push(new Face(color9, v9[1], v9[9], v9[25], v9[17]));
    faces.push(new Face(color9, v9[1], v9[9], v9[41], v9[33]));
    faces.push(new Face(color9, v9[1], v9[17], v9[49], v9[33]));
    faces.push(new Face(color9, v9[2], v9[3], v9[7], v9[6]));
    faces.push(new Face(color9, v9[2], v9[3], v9[11], v9[10]));
    faces.push(new Face(color9, v9[2], v9[3], v9[19], v9[18]));
    faces.push(new Face(color9, v9[2], v9[3], v9[35], v9[34]));
    faces.push(new Face(color9, v9[2], v9[6], v9[14], v9[10]));
    faces.push(new Face(color9, v9[2], v9[6], v9[22], v9[18]));
    faces.push(new Face(color9, v9[2], v9[6], v9[38], v9[34]));
    faces.push(new Face(color9, v9[2], v9[10], v9[26], v9[18]));
    faces.push(new Face(color9, v9[2], v9[10], v9[42], v9[34]));
    faces.push(new Face(color9, v9[2], v9[18], v9[50], v9[34]));
    faces.push(new Face(color9, v9[3], v9[7], v9[15], v9[11]));
    faces.push(new Face(color9, v9[3], v9[7], v9[23], v9[19]));
    faces.push(new Face(color9, v9[3], v9[7], v9[39], v9[35]));
    faces.push(new Face(color9, v9[3], v9[11], v9[27], v9[19]));
    faces.push(new Face(color9, v9[3], v9[11], v9[43], v9[35]));
    faces.push(new Face(color9, v9[3], v9[19], v9[51], v9[35]));
    faces.push(new Face(color9, v9[4], v9[5], v9[7], v9[6]));
    faces.push(new Face(color9, v9[4], v9[5], v9[13], v9[12]));
    faces.push(new Face(color9, v9[4], v9[5], v9[21], v9[20]));
    faces.push(new Face(color9, v9[4], v9[5], v9[37], v9[36]));
    faces.push(new Face(color9, v9[4], v9[6], v9[14], v9[12]));
    faces.push(new Face(color9, v9[4], v9[6], v9[22], v9[20]));
    faces.push(new Face(color9, v9[4], v9[6], v9[38], v9[36]));
    faces.push(new Face(color9, v9[4], v9[12], v9[28], v9[20]));
    faces.push(new Face(color9, v9[4], v9[12], v9[44], v9[36]));
    faces.push(new Face(color9, v9[4], v9[20], v9[52], v9[36]));
    faces.push(new Face(color9, v9[5], v9[7], v9[15], v9[13]));
    faces.push(new Face(color9, v9[5], v9[7], v9[23], v9[21]));
    faces.push(new Face(color9, v9[5], v9[7], v9[39], v9[37]));
    faces.push(new Face(color9, v9[5], v9[13], v9[29], v9[21]));
    faces.push(new Face(color9, v9[5], v9[13], v9[45], v9[37]));
    faces.push(new Face(color9, v9[5], v9[21], v9[53], v9[37]));
    faces.push(new Face(color9, v9[6], v9[7], v9[15], v9[14]));
    faces.push(new Face(color9, v9[6], v9[7], v9[23], v9[22]));
    faces.push(new Face(color9, v9[6], v9[7], v9[39], v9[38]));
    faces.push(new Face(color9, v9[6], v9[14], v9[30], v9[22]));
    faces.push(new Face(color9, v9[6], v9[14], v9[46], v9[38]));
    faces.push(new Face(color9, v9[6], v9[22], v9[54], v9[38]));
    faces.push(new Face(color9, v9[7], v9[15], v9[31], v9[23]));
    faces.push(new Face(color9, v9[7], v9[15], v9[47], v9[39]));
    faces.push(new Face(color9, v9[7], v9[23], v9[55], v9[39]));
    faces.push(new Face(color9, v9[8], v9[9], v9[11], v9[10]));
    faces.push(new Face(color9, v9[8], v9[9], v9[13], v9[12]));
    faces.push(new Face(color9, v9[8], v9[9], v9[25], v9[24]));
    faces.push(new Face(color9, v9[8], v9[9], v9[41], v9[40]));
    faces.push(new Face(color9, v9[8], v9[10], v9[14], v9[12]));
    faces.push(new Face(color9, v9[8], v9[10], v9[26], v9[24]));
    faces.push(new Face(color9, v9[8], v9[10], v9[42], v9[40]));
    faces.push(new Face(color9, v9[8], v9[12], v9[28], v9[24]));
    faces.push(new Face(color9, v9[8], v9[12], v9[44], v9[40]));
    faces.push(new Face(color9, v9[8], v9[24], v9[56], v9[40]));
    faces.push(new Face(color9, v9[9], v9[11], v9[15], v9[13]));
    faces.push(new Face(color9, v9[9], v9[11], v9[27], v9[25]));
    faces.push(new Face(color9, v9[9], v9[11], v9[43], v9[41]));
    faces.push(new Face(color9, v9[9], v9[13], v9[29], v9[25]));
    faces.push(new Face(color9, v9[9], v9[13], v9[45], v9[41]));
    faces.push(new Face(color9, v9[9], v9[25], v9[57], v9[41]));
    faces.push(new Face(color9, v9[10], v9[11], v9[15], v9[14]));
    faces.push(new Face(color9, v9[10], v9[11], v9[27], v9[26]));
    faces.push(new Face(color9, v9[10], v9[11], v9[43], v9[42]));
    faces.push(new Face(color9, v9[10], v9[14], v9[30], v9[26]));
    faces.push(new Face(color9, v9[10], v9[14], v9[46], v9[42]));
    faces.push(new Face(color9, v9[10], v9[26], v9[58], v9[42]));
    faces.push(new Face(color9, v9[11], v9[15], v9[31], v9[27]));
    faces.push(new Face(color9, v9[11], v9[15], v9[47], v9[43]));
    faces.push(new Face(color9, v9[11], v9[27], v9[59], v9[43]));
    faces.push(new Face(color9, v9[12], v9[13], v9[15], v9[14]));
    faces.push(new Face(color9, v9[12], v9[13], v9[29], v9[28]));
    faces.push(new Face(color9, v9[12], v9[13], v9[45], v9[44]));
    faces.push(new Face(color9, v9[12], v9[14], v9[30], v9[28]));
    faces.push(new Face(color9, v9[12], v9[14], v9[46], v9[44]));
    faces.push(new Face(color9, v9[12], v9[28], v9[60], v9[44]));
    faces.push(new Face(color9, v9[13], v9[15], v9[31], v9[29]));
    faces.push(new Face(color9, v9[13], v9[15], v9[47], v9[45]));
    faces.push(new Face(color9, v9[13], v9[29], v9[61], v9[45]));
    faces.push(new Face(color9, v9[14], v9[15], v9[31], v9[30]));
    faces.push(new Face(color9, v9[14], v9[15], v9[47], v9[46]));
    faces.push(new Face(color9, v9[14], v9[30], v9[62], v9[46]));
    faces.push(new Face(color9, v9[15], v9[31], v9[63], v9[47]));
    faces.push(new Face(color9, v9[16], v9[17], v9[19], v9[18]));
    faces.push(new Face(color9, v9[16], v9[17], v9[21], v9[20]));
    faces.push(new Face(color9, v9[16], v9[17], v9[25], v9[24]));
    faces.push(new Face(color9, v9[16], v9[17], v9[49], v9[48]));
    faces.push(new Face(color9, v9[16], v9[18], v9[22], v9[20]));
    faces.push(new Face(color9, v9[16], v9[18], v9[26], v9[24]));
    faces.push(new Face(color9, v9[16], v9[18], v9[50], v9[48]));
    faces.push(new Face(color9, v9[16], v9[20], v9[28], v9[24]));
    faces.push(new Face(color9, v9[16], v9[20], v9[52], v9[48]));
    faces.push(new Face(color9, v9[16], v9[24], v9[56], v9[48]));
    faces.push(new Face(color9, v9[17], v9[19], v9[23], v9[21]));
    faces.push(new Face(color9, v9[17], v9[19], v9[27], v9[25]));
    faces.push(new Face(color9, v9[17], v9[19], v9[51], v9[49]));
    faces.push(new Face(color9, v9[17], v9[21], v9[29], v9[25]));
    faces.push(new Face(color9, v9[17], v9[21], v9[53], v9[49]));
    faces.push(new Face(color9, v9[17], v9[25], v9[57], v9[49]));
    faces.push(new Face(color9, v9[18], v9[19], v9[23], v9[22]));
    faces.push(new Face(color9, v9[18], v9[19], v9[27], v9[26]));
    faces.push(new Face(color9, v9[18], v9[19], v9[51], v9[50]));
    faces.push(new Face(color9, v9[18], v9[22], v9[30], v9[26]));
    faces.push(new Face(color9, v9[18], v9[22], v9[54], v9[50]));
    faces.push(new Face(color9, v9[18], v9[26], v9[58], v9[50]));
    faces.push(new Face(color9, v9[19], v9[23], v9[31], v9[27]));
    faces.push(new Face(color9, v9[19], v9[23], v9[55], v9[51]));
    faces.push(new Face(color9, v9[19], v9[27], v9[59], v9[51]));
    faces.push(new Face(color9, v9[20], v9[21], v9[23], v9[22]));
    faces.push(new Face(color9, v9[20], v9[21], v9[29], v9[28]));
    faces.push(new Face(color9, v9[20], v9[21], v9[53], v9[52]));
    faces.push(new Face(color9, v9[20], v9[22], v9[30], v9[28]));
    faces.push(new Face(color9, v9[20], v9[22], v9[54], v9[52]));
    faces.push(new Face(color9, v9[20], v9[28], v9[60], v9[52]));
    faces.push(new Face(color9, v9[21], v9[23], v9[31], v9[29]));
    faces.push(new Face(color9, v9[21], v9[23], v9[55], v9[53]));
    faces.push(new Face(color9, v9[21], v9[29], v9[61], v9[53]));
    faces.push(new Face(color9, v9[22], v9[23], v9[31], v9[30]));
    faces.push(new Face(color9, v9[22], v9[23], v9[55], v9[54]));
    faces.push(new Face(color9, v9[22], v9[30], v9[62], v9[54]));
    faces.push(new Face(color9, v9[23], v9[31], v9[63], v9[55]));
    faces.push(new Face(color9, v9[24], v9[25], v9[27], v9[26]));
    faces.push(new Face(color9, v9[24], v9[25], v9[29], v9[28]));
    faces.push(new Face(color9, v9[24], v9[25], v9[57], v9[56]));
    faces.push(new Face(color9, v9[24], v9[26], v9[30], v9[28]));
    faces.push(new Face(color9, v9[24], v9[26], v9[58], v9[56]));
    faces.push(new Face(color9, v9[24], v9[28], v9[60], v9[56]));
    faces.push(new Face(color9, v9[25], v9[27], v9[31], v9[29]));
    faces.push(new Face(color9, v9[25], v9[27], v9[59], v9[57]));
    faces.push(new Face(color9, v9[25], v9[29], v9[61], v9[57]));
    faces.push(new Face(color9, v9[26], v9[27], v9[31], v9[30]));
    faces.push(new Face(color9, v9[26], v9[27], v9[59], v9[58]));
    faces.push(new Face(color9, v9[26], v9[30], v9[62], v9[58]));
    faces.push(new Face(color9, v9[27], v9[31], v9[63], v9[59]));
    faces.push(new Face(color9, v9[28], v9[29], v9[31], v9[30]));
    faces.push(new Face(color9, v9[28], v9[29], v9[61], v9[60]));
    faces.push(new Face(color9, v9[28], v9[30], v9[62], v9[60]));
    faces.push(new Face(color9, v9[29], v9[31], v9[63], v9[61]));
    faces.push(new Face(color9, v9[30], v9[31], v9[63], v9[62]));
    faces.push(new Face(color9, v9[32], v9[33], v9[35], v9[34]));
    faces.push(new Face(color9, v9[32], v9[33], v9[37], v9[36]));
    faces.push(new Face(color9, v9[32], v9[33], v9[41], v9[40]));
    faces.push(new Face(color9, v9[32], v9[33], v9[49], v9[48]));
    faces.push(new Face(color9, v9[32], v9[34], v9[38], v9[36]));
    faces.push(new Face(color9, v9[32], v9[34], v9[42], v9[40]));
    faces.push(new Face(color9, v9[32], v9[34], v9[50], v9[48]));
    faces.push(new Face(color9, v9[32], v9[36], v9[44], v9[40]));
    faces.push(new Face(color9, v9[32], v9[36], v9[52], v9[48]));
    faces.push(new Face(color9, v9[32], v9[40], v9[56], v9[48]));
    faces.push(new Face(color9, v9[33], v9[35], v9[39], v9[37]));
    faces.push(new Face(color9, v9[33], v9[35], v9[43], v9[41]));
    faces.push(new Face(color9, v9[33], v9[35], v9[51], v9[49]));
    faces.push(new Face(color9, v9[33], v9[37], v9[45], v9[41]));
    faces.push(new Face(color9, v9[33], v9[37], v9[53], v9[49]));
    faces.push(new Face(color9, v9[33], v9[41], v9[57], v9[49]));
    faces.push(new Face(color9, v9[34], v9[35], v9[39], v9[38]));
    faces.push(new Face(color9, v9[34], v9[35], v9[43], v9[42]));
    faces.push(new Face(color9, v9[34], v9[35], v9[51], v9[50]));
    faces.push(new Face(color9, v9[34], v9[38], v9[46], v9[42]));
    faces.push(new Face(color9, v9[34], v9[38], v9[54], v9[50]));
    faces.push(new Face(color9, v9[34], v9[42], v9[58], v9[50]));
    faces.push(new Face(color9, v9[35], v9[39], v9[47], v9[43]));
    faces.push(new Face(color9, v9[35], v9[39], v9[55], v9[51]));
    faces.push(new Face(color9, v9[35], v9[43], v9[59], v9[51]));
    faces.push(new Face(color9, v9[36], v9[37], v9[39], v9[38]));
    faces.push(new Face(color9, v9[36], v9[37], v9[45], v9[44]));
    faces.push(new Face(color9, v9[36], v9[37], v9[53], v9[52]));
    faces.push(new Face(color9, v9[36], v9[38], v9[46], v9[44]));
    faces.push(new Face(color9, v9[36], v9[38], v9[54], v9[52]));
    faces.push(new Face(color9, v9[36], v9[44], v9[60], v9[52]));
    faces.push(new Face(color9, v9[37], v9[39], v9[47], v9[45]));
    faces.push(new Face(color9, v9[37], v9[39], v9[55], v9[53]));
    faces.push(new Face(color9, v9[37], v9[45], v9[61], v9[53]));
    faces.push(new Face(color9, v9[38], v9[39], v9[47], v9[46]));
    faces.push(new Face(color9, v9[38], v9[39], v9[55], v9[54]));
    faces.push(new Face(color9, v9[38], v9[46], v9[62], v9[54]));
    faces.push(new Face(color9, v9[39], v9[47], v9[63], v9[55]));
    faces.push(new Face(color9, v9[40], v9[41], v9[43], v9[42]));
    faces.push(new Face(color9, v9[40], v9[41], v9[45], v9[44]));
    faces.push(new Face(color9, v9[40], v9[41], v9[57], v9[56]));
    faces.push(new Face(color9, v9[40], v9[42], v9[46], v9[44]));
    faces.push(new Face(color9, v9[40], v9[42], v9[58], v9[56]));
    faces.push(new Face(color9, v9[40], v9[44], v9[60], v9[56]));
    faces.push(new Face(color9, v9[41], v9[43], v9[47], v9[45]));
    faces.push(new Face(color9, v9[41], v9[43], v9[59], v9[57]));
    faces.push(new Face(color9, v9[41], v9[45], v9[61], v9[57]));
    faces.push(new Face(color9, v9[42], v9[43], v9[47], v9[46]));
    faces.push(new Face(color9, v9[42], v9[43], v9[59], v9[58]));
    faces.push(new Face(color9, v9[42], v9[46], v9[62], v9[58]));
    faces.push(new Face(color9, v9[43], v9[47], v9[63], v9[59]));
    faces.push(new Face(color9, v9[44], v9[45], v9[47], v9[46]));
    faces.push(new Face(color9, v9[44], v9[45], v9[61], v9[60]));
    faces.push(new Face(color9, v9[44], v9[46], v9[62], v9[60]));
    faces.push(new Face(color9, v9[45], v9[47], v9[63], v9[61]));
    faces.push(new Face(color9, v9[46], v9[47], v9[63], v9[62]));
    faces.push(new Face(color9, v9[48], v9[49], v9[51], v9[50]));
    faces.push(new Face(color9, v9[48], v9[49], v9[53], v9[52]));
    faces.push(new Face(color9, v9[48], v9[49], v9[57], v9[56]));
    faces.push(new Face(color9, v9[48], v9[50], v9[54], v9[52]));
    faces.push(new Face(color9, v9[48], v9[50], v9[58], v9[56]));
    faces.push(new Face(color9, v9[48], v9[52], v9[60], v9[56]));
    faces.push(new Face(color9, v9[49], v9[51], v9[55], v9[53]));
    faces.push(new Face(color9, v9[49], v9[51], v9[59], v9[57]));
    faces.push(new Face(color9, v9[49], v9[53], v9[61], v9[57]));
    faces.push(new Face(color9, v9[50], v9[51], v9[55], v9[54]));
    faces.push(new Face(color9, v9[50], v9[51], v9[59], v9[58]));
    faces.push(new Face(color9, v9[50], v9[54], v9[62], v9[58]));
    faces.push(new Face(color9, v9[51], v9[55], v9[63], v9[59]));
    faces.push(new Face(color9, v9[52], v9[53], v9[55], v9[54]));
    faces.push(new Face(color9, v9[52], v9[53], v9[61], v9[60]));
    faces.push(new Face(color9, v9[52], v9[54], v9[62], v9[60]));
    faces.push(new Face(color9, v9[53], v9[55], v9[63], v9[61]));
    faces.push(new Face(color9, v9[54], v9[55], v9[63], v9[62]));
    faces.push(new Face(color9, v9[56], v9[57], v9[59], v9[58]));
    faces.push(new Face(color9, v9[56], v9[57], v9[61], v9[60]));
    faces.push(new Face(color9, v9[56], v9[58], v9[62], v9[60]));
    faces.push(new Face(color9, v9[57], v9[59], v9[63], v9[61]));
    faces.push(new Face(color9, v9[58], v9[59], v9[63], v9[62]));
    faces.push(new Face(color9, v9[60], v9[61], v9[63], v9[62]));
    for (let i = 0; i < v9.length; i++) {
        v9[i].rotate(r);
        v9[i].project();
    }

    v10[0] = new Vertex(-w/2, -w/2, -w/2, w/2, -w/2, -w/2, -w/2);
    v10[1] = new Vertex(-w/2, -w/2, -w/2, w/2+Math.sin(theta)*w, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v10[2] = new Vertex(-w/2, -w/2, -w/2, w/2, -w/2, w/2, -w/2);
    v10[3] = new Vertex(-w/2, -w/2, -w/2, w/2+Math.sin(theta)*w, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v10[4] = new Vertex(-w/2, -w/2, -w/2, w/2, w/2, -w/2, -w/2);
    v10[5] = new Vertex(-w/2, -w/2, -w/2, w/2+Math.sin(theta)*w, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v10[6] = new Vertex(-w/2, -w/2, -w/2, w/2, w/2, w/2, -w/2);
    v10[7] = new Vertex(-w/2, -w/2, -w/2, w/2+Math.sin(theta)*w, w/2, w/2, -w/2+Math.cos(theta)*w);
    v10[8] = new Vertex(-w/2, -w/2, w/2, w/2, -w/2, -w/2, -w/2);
    v10[9] = new Vertex(-w/2, -w/2, w/2, w/2+Math.sin(theta)*w, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v10[10] = new Vertex(-w/2, -w/2, w/2, w/2, -w/2, w/2, -w/2);
    v10[11] = new Vertex(-w/2, -w/2, w/2, w/2+Math.sin(theta)*w, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v10[12] = new Vertex(-w/2, -w/2, w/2, w/2, w/2, -w/2, -w/2);
    v10[13] = new Vertex(-w/2, -w/2, w/2, w/2+Math.sin(theta)*w, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v10[14] = new Vertex(-w/2, -w/2, w/2, w/2, w/2, w/2, -w/2);
    v10[15] = new Vertex(-w/2, -w/2, w/2, w/2+Math.sin(theta)*w, w/2, w/2, -w/2+Math.cos(theta)*w);
    v10[16] = new Vertex(-w/2, w/2, -w/2, w/2, -w/2, -w/2, -w/2);
    v10[17] = new Vertex(-w/2, w/2, -w/2, w/2+Math.sin(theta)*w, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v10[18] = new Vertex(-w/2, w/2, -w/2, w/2, -w/2, w/2, -w/2);
    v10[19] = new Vertex(-w/2, w/2, -w/2, w/2+Math.sin(theta)*w, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v10[20] = new Vertex(-w/2, w/2, -w/2, w/2, w/2, -w/2, -w/2);
    v10[21] = new Vertex(-w/2, w/2, -w/2, w/2+Math.sin(theta)*w, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v10[22] = new Vertex(-w/2, w/2, -w/2, w/2, w/2, w/2, -w/2);
    v10[23] = new Vertex(-w/2, w/2, -w/2, w/2+Math.sin(theta)*w, w/2, w/2, -w/2+Math.cos(theta)*w);
    v10[24] = new Vertex(-w/2, w/2, w/2, w/2, -w/2, -w/2, -w/2);
    v10[25] = new Vertex(-w/2, w/2, w/2, w/2+Math.sin(theta)*w, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v10[26] = new Vertex(-w/2, w/2, w/2, w/2, -w/2, w/2, -w/2);
    v10[27] = new Vertex(-w/2, w/2, w/2, w/2+Math.sin(theta)*w, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v10[28] = new Vertex(-w/2, w/2, w/2, w/2, w/2, -w/2, -w/2);
    v10[29] = new Vertex(-w/2, w/2, w/2, w/2+Math.sin(theta)*w, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v10[30] = new Vertex(-w/2, w/2, w/2, w/2, w/2, w/2, -w/2);
    v10[31] = new Vertex(-w/2, w/2, w/2, w/2+Math.sin(theta)*w, w/2, w/2, -w/2+Math.cos(theta)*w);
    v10[32] = new Vertex(w/2, -w/2, -w/2, w/2, -w/2, -w/2, -w/2);
    v10[33] = new Vertex(w/2, -w/2, -w/2, w/2+Math.sin(theta)*w, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v10[34] = new Vertex(w/2, -w/2, -w/2, w/2, -w/2, w/2, -w/2);
    v10[35] = new Vertex(w/2, -w/2, -w/2, w/2+Math.sin(theta)*w, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v10[36] = new Vertex(w/2, -w/2, -w/2, w/2, w/2, -w/2, -w/2);
    v10[37] = new Vertex(w/2, -w/2, -w/2, w/2+Math.sin(theta)*w, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v10[38] = new Vertex(w/2, -w/2, -w/2, w/2, w/2, w/2, -w/2);
    v10[39] = new Vertex(w/2, -w/2, -w/2, w/2+Math.sin(theta)*w, w/2, w/2, -w/2+Math.cos(theta)*w);
    v10[40] = new Vertex(w/2, -w/2, w/2, w/2, -w/2, -w/2, -w/2);
    v10[41] = new Vertex(w/2, -w/2, w/2, w/2+Math.sin(theta)*w, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v10[42] = new Vertex(w/2, -w/2, w/2, w/2, -w/2, w/2, -w/2);
    v10[43] = new Vertex(w/2, -w/2, w/2, w/2+Math.sin(theta)*w, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v10[44] = new Vertex(w/2, -w/2, w/2, w/2, w/2, -w/2, -w/2);
    v10[45] = new Vertex(w/2, -w/2, w/2, w/2+Math.sin(theta)*w, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v10[46] = new Vertex(w/2, -w/2, w/2, w/2, w/2, w/2, -w/2);
    v10[47] = new Vertex(w/2, -w/2, w/2, w/2+Math.sin(theta)*w, w/2, w/2, -w/2+Math.cos(theta)*w);
    v10[48] = new Vertex(w/2, w/2, -w/2, w/2, -w/2, -w/2, -w/2);
    v10[49] = new Vertex(w/2, w/2, -w/2, w/2+Math.sin(theta)*w, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v10[50] = new Vertex(w/2, w/2, -w/2, w/2, -w/2, w/2, -w/2);
    v10[51] = new Vertex(w/2, w/2, -w/2, w/2+Math.sin(theta)*w, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v10[52] = new Vertex(w/2, w/2, -w/2, w/2, w/2, -w/2, -w/2);
    v10[53] = new Vertex(w/2, w/2, -w/2, w/2+Math.sin(theta)*w, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v10[54] = new Vertex(w/2, w/2, -w/2, w/2, w/2, w/2, -w/2);
    v10[55] = new Vertex(w/2, w/2, -w/2, w/2+Math.sin(theta)*w, w/2, w/2, -w/2+Math.cos(theta)*w);
    v10[56] = new Vertex(w/2, w/2, w/2, w/2, -w/2, -w/2, -w/2);
    v10[57] = new Vertex(w/2, w/2, w/2, w/2+Math.sin(theta)*w, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v10[58] = new Vertex(w/2, w/2, w/2, w/2, -w/2, w/2, -w/2);
    v10[59] = new Vertex(w/2, w/2, w/2, w/2+Math.sin(theta)*w, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v10[60] = new Vertex(w/2, w/2, w/2, w/2, w/2, -w/2, -w/2);
    v10[61] = new Vertex(w/2, w/2, w/2, w/2+Math.sin(theta)*w, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v10[62] = new Vertex(w/2, w/2, w/2, w/2, w/2, w/2, -w/2);
    v10[63] = new Vertex(w/2, w/2, w/2, w/2+Math.sin(theta)*w, w/2, w/2, -w/2+Math.cos(theta)*w);
    faces.push(new Face(color10, v10[0], v10[1], v10[3], v10[2]));
    faces.push(new Face(color10, v10[0], v10[1], v10[5], v10[4]));
    faces.push(new Face(color10, v10[0], v10[1], v10[9], v10[8]));
    faces.push(new Face(color10, v10[0], v10[1], v10[17], v10[16]));
    faces.push(new Face(color10, v10[0], v10[1], v10[33], v10[32]));
    faces.push(new Face(color10, v10[0], v10[2], v10[6], v10[4]));
    faces.push(new Face(color10, v10[0], v10[2], v10[10], v10[8]));
    faces.push(new Face(color10, v10[0], v10[2], v10[18], v10[16]));
    faces.push(new Face(color10, v10[0], v10[2], v10[34], v10[32]));
    faces.push(new Face(color10, v10[0], v10[4], v10[12], v10[8]));
    faces.push(new Face(color10, v10[0], v10[4], v10[20], v10[16]));
    faces.push(new Face(color10, v10[0], v10[4], v10[36], v10[32]));
    faces.push(new Face(color10, v10[0], v10[8], v10[24], v10[16]));
    faces.push(new Face(color10, v10[0], v10[8], v10[40], v10[32]));
    faces.push(new Face(color10, v10[0], v10[16], v10[48], v10[32]));
    faces.push(new Face(color10, v10[1], v10[3], v10[7], v10[5]));
    faces.push(new Face(color10, v10[1], v10[3], v10[11], v10[9]));
    faces.push(new Face(color10, v10[1], v10[3], v10[19], v10[17]));
    faces.push(new Face(color10, v10[1], v10[3], v10[35], v10[33]));
    faces.push(new Face(color10, v10[1], v10[5], v10[13], v10[9]));
    faces.push(new Face(color10, v10[1], v10[5], v10[21], v10[17]));
    faces.push(new Face(color10, v10[1], v10[5], v10[37], v10[33]));
    faces.push(new Face(color10, v10[1], v10[9], v10[25], v10[17]));
    faces.push(new Face(color10, v10[1], v10[9], v10[41], v10[33]));
    faces.push(new Face(color10, v10[1], v10[17], v10[49], v10[33]));
    faces.push(new Face(color10, v10[2], v10[3], v10[7], v10[6]));
    faces.push(new Face(color10, v10[2], v10[3], v10[11], v10[10]));
    faces.push(new Face(color10, v10[2], v10[3], v10[19], v10[18]));
    faces.push(new Face(color10, v10[2], v10[3], v10[35], v10[34]));
    faces.push(new Face(color10, v10[2], v10[6], v10[14], v10[10]));
    faces.push(new Face(color10, v10[2], v10[6], v10[22], v10[18]));
    faces.push(new Face(color10, v10[2], v10[6], v10[38], v10[34]));
    faces.push(new Face(color10, v10[2], v10[10], v10[26], v10[18]));
    faces.push(new Face(color10, v10[2], v10[10], v10[42], v10[34]));
    faces.push(new Face(color10, v10[2], v10[18], v10[50], v10[34]));
    faces.push(new Face(color10, v10[3], v10[7], v10[15], v10[11]));
    faces.push(new Face(color10, v10[3], v10[7], v10[23], v10[19]));
    faces.push(new Face(color10, v10[3], v10[7], v10[39], v10[35]));
    faces.push(new Face(color10, v10[3], v10[11], v10[27], v10[19]));
    faces.push(new Face(color10, v10[3], v10[11], v10[43], v10[35]));
    faces.push(new Face(color10, v10[3], v10[19], v10[51], v10[35]));
    faces.push(new Face(color10, v10[4], v10[5], v10[7], v10[6]));
    faces.push(new Face(color10, v10[4], v10[5], v10[13], v10[12]));
    faces.push(new Face(color10, v10[4], v10[5], v10[21], v10[20]));
    faces.push(new Face(color10, v10[4], v10[5], v10[37], v10[36]));
    faces.push(new Face(color10, v10[4], v10[6], v10[14], v10[12]));
    faces.push(new Face(color10, v10[4], v10[6], v10[22], v10[20]));
    faces.push(new Face(color10, v10[4], v10[6], v10[38], v10[36]));
    faces.push(new Face(color10, v10[4], v10[12], v10[28], v10[20]));
    faces.push(new Face(color10, v10[4], v10[12], v10[44], v10[36]));
    faces.push(new Face(color10, v10[4], v10[20], v10[52], v10[36]));
    faces.push(new Face(color10, v10[5], v10[7], v10[15], v10[13]));
    faces.push(new Face(color10, v10[5], v10[7], v10[23], v10[21]));
    faces.push(new Face(color10, v10[5], v10[7], v10[39], v10[37]));
    faces.push(new Face(color10, v10[5], v10[13], v10[29], v10[21]));
    faces.push(new Face(color10, v10[5], v10[13], v10[45], v10[37]));
    faces.push(new Face(color10, v10[5], v10[21], v10[53], v10[37]));
    faces.push(new Face(color10, v10[6], v10[7], v10[15], v10[14]));
    faces.push(new Face(color10, v10[6], v10[7], v10[23], v10[22]));
    faces.push(new Face(color10, v10[6], v10[7], v10[39], v10[38]));
    faces.push(new Face(color10, v10[6], v10[14], v10[30], v10[22]));
    faces.push(new Face(color10, v10[6], v10[14], v10[46], v10[38]));
    faces.push(new Face(color10, v10[6], v10[22], v10[54], v10[38]));
    faces.push(new Face(color10, v10[7], v10[15], v10[31], v10[23]));
    faces.push(new Face(color10, v10[7], v10[15], v10[47], v10[39]));
    faces.push(new Face(color10, v10[7], v10[23], v10[55], v10[39]));
    faces.push(new Face(color10, v10[8], v10[9], v10[11], v10[10]));
    faces.push(new Face(color10, v10[8], v10[9], v10[13], v10[12]));
    faces.push(new Face(color10, v10[8], v10[9], v10[25], v10[24]));
    faces.push(new Face(color10, v10[8], v10[9], v10[41], v10[40]));
    faces.push(new Face(color10, v10[8], v10[10], v10[14], v10[12]));
    faces.push(new Face(color10, v10[8], v10[10], v10[26], v10[24]));
    faces.push(new Face(color10, v10[8], v10[10], v10[42], v10[40]));
    faces.push(new Face(color10, v10[8], v10[12], v10[28], v10[24]));
    faces.push(new Face(color10, v10[8], v10[12], v10[44], v10[40]));
    faces.push(new Face(color10, v10[8], v10[24], v10[56], v10[40]));
    faces.push(new Face(color10, v10[9], v10[11], v10[15], v10[13]));
    faces.push(new Face(color10, v10[9], v10[11], v10[27], v10[25]));
    faces.push(new Face(color10, v10[9], v10[11], v10[43], v10[41]));
    faces.push(new Face(color10, v10[9], v10[13], v10[29], v10[25]));
    faces.push(new Face(color10, v10[9], v10[13], v10[45], v10[41]));
    faces.push(new Face(color10, v10[9], v10[25], v10[57], v10[41]));
    faces.push(new Face(color10, v10[10], v10[11], v10[15], v10[14]));
    faces.push(new Face(color10, v10[10], v10[11], v10[27], v10[26]));
    faces.push(new Face(color10, v10[10], v10[11], v10[43], v10[42]));
    faces.push(new Face(color10, v10[10], v10[14], v10[30], v10[26]));
    faces.push(new Face(color10, v10[10], v10[14], v10[46], v10[42]));
    faces.push(new Face(color10, v10[10], v10[26], v10[58], v10[42]));
    faces.push(new Face(color10, v10[11], v10[15], v10[31], v10[27]));
    faces.push(new Face(color10, v10[11], v10[15], v10[47], v10[43]));
    faces.push(new Face(color10, v10[11], v10[27], v10[59], v10[43]));
    faces.push(new Face(color10, v10[12], v10[13], v10[15], v10[14]));
    faces.push(new Face(color10, v10[12], v10[13], v10[29], v10[28]));
    faces.push(new Face(color10, v10[12], v10[13], v10[45], v10[44]));
    faces.push(new Face(color10, v10[12], v10[14], v10[30], v10[28]));
    faces.push(new Face(color10, v10[12], v10[14], v10[46], v10[44]));
    faces.push(new Face(color10, v10[12], v10[28], v10[60], v10[44]));
    faces.push(new Face(color10, v10[13], v10[15], v10[31], v10[29]));
    faces.push(new Face(color10, v10[13], v10[15], v10[47], v10[45]));
    faces.push(new Face(color10, v10[13], v10[29], v10[61], v10[45]));
    faces.push(new Face(color10, v10[14], v10[15], v10[31], v10[30]));
    faces.push(new Face(color10, v10[14], v10[15], v10[47], v10[46]));
    faces.push(new Face(color10, v10[14], v10[30], v10[62], v10[46]));
    faces.push(new Face(color10, v10[15], v10[31], v10[63], v10[47]));
    faces.push(new Face(color10, v10[16], v10[17], v10[19], v10[18]));
    faces.push(new Face(color10, v10[16], v10[17], v10[21], v10[20]));
    faces.push(new Face(color10, v10[16], v10[17], v10[25], v10[24]));
    faces.push(new Face(color10, v10[16], v10[17], v10[49], v10[48]));
    faces.push(new Face(color10, v10[16], v10[18], v10[22], v10[20]));
    faces.push(new Face(color10, v10[16], v10[18], v10[26], v10[24]));
    faces.push(new Face(color10, v10[16], v10[18], v10[50], v10[48]));
    faces.push(new Face(color10, v10[16], v10[20], v10[28], v10[24]));
    faces.push(new Face(color10, v10[16], v10[20], v10[52], v10[48]));
    faces.push(new Face(color10, v10[16], v10[24], v10[56], v10[48]));
    faces.push(new Face(color10, v10[17], v10[19], v10[23], v10[21]));
    faces.push(new Face(color10, v10[17], v10[19], v10[27], v10[25]));
    faces.push(new Face(color10, v10[17], v10[19], v10[51], v10[49]));
    faces.push(new Face(color10, v10[17], v10[21], v10[29], v10[25]));
    faces.push(new Face(color10, v10[17], v10[21], v10[53], v10[49]));
    faces.push(new Face(color10, v10[17], v10[25], v10[57], v10[49]));
    faces.push(new Face(color10, v10[18], v10[19], v10[23], v10[22]));
    faces.push(new Face(color10, v10[18], v10[19], v10[27], v10[26]));
    faces.push(new Face(color10, v10[18], v10[19], v10[51], v10[50]));
    faces.push(new Face(color10, v10[18], v10[22], v10[30], v10[26]));
    faces.push(new Face(color10, v10[18], v10[22], v10[54], v10[50]));
    faces.push(new Face(color10, v10[18], v10[26], v10[58], v10[50]));
    faces.push(new Face(color10, v10[19], v10[23], v10[31], v10[27]));
    faces.push(new Face(color10, v10[19], v10[23], v10[55], v10[51]));
    faces.push(new Face(color10, v10[19], v10[27], v10[59], v10[51]));
    faces.push(new Face(color10, v10[20], v10[21], v10[23], v10[22]));
    faces.push(new Face(color10, v10[20], v10[21], v10[29], v10[28]));
    faces.push(new Face(color10, v10[20], v10[21], v10[53], v10[52]));
    faces.push(new Face(color10, v10[20], v10[22], v10[30], v10[28]));
    faces.push(new Face(color10, v10[20], v10[22], v10[54], v10[52]));
    faces.push(new Face(color10, v10[20], v10[28], v10[60], v10[52]));
    faces.push(new Face(color10, v10[21], v10[23], v10[31], v10[29]));
    faces.push(new Face(color10, v10[21], v10[23], v10[55], v10[53]));
    faces.push(new Face(color10, v10[21], v10[29], v10[61], v10[53]));
    faces.push(new Face(color10, v10[22], v10[23], v10[31], v10[30]));
    faces.push(new Face(color10, v10[22], v10[23], v10[55], v10[54]));
    faces.push(new Face(color10, v10[22], v10[30], v10[62], v10[54]));
    faces.push(new Face(color10, v10[23], v10[31], v10[63], v10[55]));
    faces.push(new Face(color10, v10[24], v10[25], v10[27], v10[26]));
    faces.push(new Face(color10, v10[24], v10[25], v10[29], v10[28]));
    faces.push(new Face(color10, v10[24], v10[25], v10[57], v10[56]));
    faces.push(new Face(color10, v10[24], v10[26], v10[30], v10[28]));
    faces.push(new Face(color10, v10[24], v10[26], v10[58], v10[56]));
    faces.push(new Face(color10, v10[24], v10[28], v10[60], v10[56]));
    faces.push(new Face(color10, v10[25], v10[27], v10[31], v10[29]));
    faces.push(new Face(color10, v10[25], v10[27], v10[59], v10[57]));
    faces.push(new Face(color10, v10[25], v10[29], v10[61], v10[57]));
    faces.push(new Face(color10, v10[26], v10[27], v10[31], v10[30]));
    faces.push(new Face(color10, v10[26], v10[27], v10[59], v10[58]));
    faces.push(new Face(color10, v10[26], v10[30], v10[62], v10[58]));
    faces.push(new Face(color10, v10[27], v10[31], v10[63], v10[59]));
    faces.push(new Face(color10, v10[28], v10[29], v10[31], v10[30]));
    faces.push(new Face(color10, v10[28], v10[29], v10[61], v10[60]));
    faces.push(new Face(color10, v10[28], v10[30], v10[62], v10[60]));
    faces.push(new Face(color10, v10[29], v10[31], v10[63], v10[61]));
    faces.push(new Face(color10, v10[30], v10[31], v10[63], v10[62]));
    faces.push(new Face(color10, v10[32], v10[33], v10[35], v10[34]));
    faces.push(new Face(color10, v10[32], v10[33], v10[37], v10[36]));
    faces.push(new Face(color10, v10[32], v10[33], v10[41], v10[40]));
    faces.push(new Face(color10, v10[32], v10[33], v10[49], v10[48]));
    faces.push(new Face(color10, v10[32], v10[34], v10[38], v10[36]));
    faces.push(new Face(color10, v10[32], v10[34], v10[42], v10[40]));
    faces.push(new Face(color10, v10[32], v10[34], v10[50], v10[48]));
    faces.push(new Face(color10, v10[32], v10[36], v10[44], v10[40]));
    faces.push(new Face(color10, v10[32], v10[36], v10[52], v10[48]));
    faces.push(new Face(color10, v10[32], v10[40], v10[56], v10[48]));
    faces.push(new Face(color10, v10[33], v10[35], v10[39], v10[37]));
    faces.push(new Face(color10, v10[33], v10[35], v10[43], v10[41]));
    faces.push(new Face(color10, v10[33], v10[35], v10[51], v10[49]));
    faces.push(new Face(color10, v10[33], v10[37], v10[45], v10[41]));
    faces.push(new Face(color10, v10[33], v10[37], v10[53], v10[49]));
    faces.push(new Face(color10, v10[33], v10[41], v10[57], v10[49]));
    faces.push(new Face(color10, v10[34], v10[35], v10[39], v10[38]));
    faces.push(new Face(color10, v10[34], v10[35], v10[43], v10[42]));
    faces.push(new Face(color10, v10[34], v10[35], v10[51], v10[50]));
    faces.push(new Face(color10, v10[34], v10[38], v10[46], v10[42]));
    faces.push(new Face(color10, v10[34], v10[38], v10[54], v10[50]));
    faces.push(new Face(color10, v10[34], v10[42], v10[58], v10[50]));
    faces.push(new Face(color10, v10[35], v10[39], v10[47], v10[43]));
    faces.push(new Face(color10, v10[35], v10[39], v10[55], v10[51]));
    faces.push(new Face(color10, v10[35], v10[43], v10[59], v10[51]));
    faces.push(new Face(color10, v10[36], v10[37], v10[39], v10[38]));
    faces.push(new Face(color10, v10[36], v10[37], v10[45], v10[44]));
    faces.push(new Face(color10, v10[36], v10[37], v10[53], v10[52]));
    faces.push(new Face(color10, v10[36], v10[38], v10[46], v10[44]));
    faces.push(new Face(color10, v10[36], v10[38], v10[54], v10[52]));
    faces.push(new Face(color10, v10[36], v10[44], v10[60], v10[52]));
    faces.push(new Face(color10, v10[37], v10[39], v10[47], v10[45]));
    faces.push(new Face(color10, v10[37], v10[39], v10[55], v10[53]));
    faces.push(new Face(color10, v10[37], v10[45], v10[61], v10[53]));
    faces.push(new Face(color10, v10[38], v10[39], v10[47], v10[46]));
    faces.push(new Face(color10, v10[38], v10[39], v10[55], v10[54]));
    faces.push(new Face(color10, v10[38], v10[46], v10[62], v10[54]));
    faces.push(new Face(color10, v10[39], v10[47], v10[63], v10[55]));
    faces.push(new Face(color10, v10[40], v10[41], v10[43], v10[42]));
    faces.push(new Face(color10, v10[40], v10[41], v10[45], v10[44]));
    faces.push(new Face(color10, v10[40], v10[41], v10[57], v10[56]));
    faces.push(new Face(color10, v10[40], v10[42], v10[46], v10[44]));
    faces.push(new Face(color10, v10[40], v10[42], v10[58], v10[56]));
    faces.push(new Face(color10, v10[40], v10[44], v10[60], v10[56]));
    faces.push(new Face(color10, v10[41], v10[43], v10[47], v10[45]));
    faces.push(new Face(color10, v10[41], v10[43], v10[59], v10[57]));
    faces.push(new Face(color10, v10[41], v10[45], v10[61], v10[57]));
    faces.push(new Face(color10, v10[42], v10[43], v10[47], v10[46]));
    faces.push(new Face(color10, v10[42], v10[43], v10[59], v10[58]));
    faces.push(new Face(color10, v10[42], v10[46], v10[62], v10[58]));
    faces.push(new Face(color10, v10[43], v10[47], v10[63], v10[59]));
    faces.push(new Face(color10, v10[44], v10[45], v10[47], v10[46]));
    faces.push(new Face(color10, v10[44], v10[45], v10[61], v10[60]));
    faces.push(new Face(color10, v10[44], v10[46], v10[62], v10[60]));
    faces.push(new Face(color10, v10[45], v10[47], v10[63], v10[61]));
    faces.push(new Face(color10, v10[46], v10[47], v10[63], v10[62]));
    faces.push(new Face(color10, v10[48], v10[49], v10[51], v10[50]));
    faces.push(new Face(color10, v10[48], v10[49], v10[53], v10[52]));
    faces.push(new Face(color10, v10[48], v10[49], v10[57], v10[56]));
    faces.push(new Face(color10, v10[48], v10[50], v10[54], v10[52]));
    faces.push(new Face(color10, v10[48], v10[50], v10[58], v10[56]));
    faces.push(new Face(color10, v10[48], v10[52], v10[60], v10[56]));
    faces.push(new Face(color10, v10[49], v10[51], v10[55], v10[53]));
    faces.push(new Face(color10, v10[49], v10[51], v10[59], v10[57]));
    faces.push(new Face(color10, v10[49], v10[53], v10[61], v10[57]));
    faces.push(new Face(color10, v10[50], v10[51], v10[55], v10[54]));
    faces.push(new Face(color10, v10[50], v10[51], v10[59], v10[58]));
    faces.push(new Face(color10, v10[50], v10[54], v10[62], v10[58]));
    faces.push(new Face(color10, v10[51], v10[55], v10[63], v10[59]));
    faces.push(new Face(color10, v10[52], v10[53], v10[55], v10[54]));
    faces.push(new Face(color10, v10[52], v10[53], v10[61], v10[60]));
    faces.push(new Face(color10, v10[52], v10[54], v10[62], v10[60]));
    faces.push(new Face(color10, v10[53], v10[55], v10[63], v10[61]));
    faces.push(new Face(color10, v10[54], v10[55], v10[63], v10[62]));
    faces.push(new Face(color10, v10[56], v10[57], v10[59], v10[58]));
    faces.push(new Face(color10, v10[56], v10[57], v10[61], v10[60]));
    faces.push(new Face(color10, v10[56], v10[58], v10[62], v10[60]));
    faces.push(new Face(color10, v10[57], v10[59], v10[63], v10[61]));
    faces.push(new Face(color10, v10[58], v10[59], v10[63], v10[62]));
    faces.push(new Face(color10, v10[60], v10[61], v10[63], v10[62]));
    for (let i = 0; i < v10.length; i++) {
        v10[i].rotate(r);
        v10[i].project();
    }

    v11[0] = new Vertex(-w/2, -w/2, -w/2, -w/2, w/2, -w/2, -w/2);
    v11[1] = new Vertex(-w/2, -w/2, -w/2, -w/2, w/2+Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v11[2] = new Vertex(-w/2, -w/2, -w/2, -w/2, w/2, w/2, -w/2);
    v11[3] = new Vertex(-w/2, -w/2, -w/2, -w/2, w/2+Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v11[4] = new Vertex(-w/2, -w/2, -w/2, w/2, w/2, -w/2, -w/2);
    v11[5] = new Vertex(-w/2, -w/2, -w/2, w/2, w/2+Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v11[6] = new Vertex(-w/2, -w/2, -w/2, w/2, w/2, w/2, -w/2);
    v11[7] = new Vertex(-w/2, -w/2, -w/2, w/2, w/2+Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v11[8] = new Vertex(-w/2, -w/2, w/2, -w/2, w/2, -w/2, -w/2);
    v11[9] = new Vertex(-w/2, -w/2, w/2, -w/2, w/2+Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v11[10] = new Vertex(-w/2, -w/2, w/2, -w/2, w/2, w/2, -w/2);
    v11[11] = new Vertex(-w/2, -w/2, w/2, -w/2, w/2+Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v11[12] = new Vertex(-w/2, -w/2, w/2, w/2, w/2, -w/2, -w/2);
    v11[13] = new Vertex(-w/2, -w/2, w/2, w/2, w/2+Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v11[14] = new Vertex(-w/2, -w/2, w/2, w/2, w/2, w/2, -w/2);
    v11[15] = new Vertex(-w/2, -w/2, w/2, w/2, w/2+Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v11[16] = new Vertex(-w/2, w/2, -w/2, -w/2, w/2, -w/2, -w/2);
    v11[17] = new Vertex(-w/2, w/2, -w/2, -w/2, w/2+Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v11[18] = new Vertex(-w/2, w/2, -w/2, -w/2, w/2, w/2, -w/2);
    v11[19] = new Vertex(-w/2, w/2, -w/2, -w/2, w/2+Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v11[20] = new Vertex(-w/2, w/2, -w/2, w/2, w/2, -w/2, -w/2);
    v11[21] = new Vertex(-w/2, w/2, -w/2, w/2, w/2+Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v11[22] = new Vertex(-w/2, w/2, -w/2, w/2, w/2, w/2, -w/2);
    v11[23] = new Vertex(-w/2, w/2, -w/2, w/2, w/2+Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v11[24] = new Vertex(-w/2, w/2, w/2, -w/2, w/2, -w/2, -w/2);
    v11[25] = new Vertex(-w/2, w/2, w/2, -w/2, w/2+Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v11[26] = new Vertex(-w/2, w/2, w/2, -w/2, w/2, w/2, -w/2);
    v11[27] = new Vertex(-w/2, w/2, w/2, -w/2, w/2+Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v11[28] = new Vertex(-w/2, w/2, w/2, w/2, w/2, -w/2, -w/2);
    v11[29] = new Vertex(-w/2, w/2, w/2, w/2, w/2+Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v11[30] = new Vertex(-w/2, w/2, w/2, w/2, w/2, w/2, -w/2);
    v11[31] = new Vertex(-w/2, w/2, w/2, w/2, w/2+Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v11[32] = new Vertex(w/2, -w/2, -w/2, -w/2, w/2, -w/2, -w/2);
    v11[33] = new Vertex(w/2, -w/2, -w/2, -w/2, w/2+Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v11[34] = new Vertex(w/2, -w/2, -w/2, -w/2, w/2, w/2, -w/2);
    v11[35] = new Vertex(w/2, -w/2, -w/2, -w/2, w/2+Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v11[36] = new Vertex(w/2, -w/2, -w/2, w/2, w/2, -w/2, -w/2);
    v11[37] = new Vertex(w/2, -w/2, -w/2, w/2, w/2+Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v11[38] = new Vertex(w/2, -w/2, -w/2, w/2, w/2, w/2, -w/2);
    v11[39] = new Vertex(w/2, -w/2, -w/2, w/2, w/2+Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v11[40] = new Vertex(w/2, -w/2, w/2, -w/2, w/2, -w/2, -w/2);
    v11[41] = new Vertex(w/2, -w/2, w/2, -w/2, w/2+Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v11[42] = new Vertex(w/2, -w/2, w/2, -w/2, w/2, w/2, -w/2);
    v11[43] = new Vertex(w/2, -w/2, w/2, -w/2, w/2+Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v11[44] = new Vertex(w/2, -w/2, w/2, w/2, w/2, -w/2, -w/2);
    v11[45] = new Vertex(w/2, -w/2, w/2, w/2, w/2+Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v11[46] = new Vertex(w/2, -w/2, w/2, w/2, w/2, w/2, -w/2);
    v11[47] = new Vertex(w/2, -w/2, w/2, w/2, w/2+Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v11[48] = new Vertex(w/2, w/2, -w/2, -w/2, w/2, -w/2, -w/2);
    v11[49] = new Vertex(w/2, w/2, -w/2, -w/2, w/2+Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v11[50] = new Vertex(w/2, w/2, -w/2, -w/2, w/2, w/2, -w/2);
    v11[51] = new Vertex(w/2, w/2, -w/2, -w/2, w/2+Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v11[52] = new Vertex(w/2, w/2, -w/2, w/2, w/2, -w/2, -w/2);
    v11[53] = new Vertex(w/2, w/2, -w/2, w/2, w/2+Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v11[54] = new Vertex(w/2, w/2, -w/2, w/2, w/2, w/2, -w/2);
    v11[55] = new Vertex(w/2, w/2, -w/2, w/2, w/2+Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v11[56] = new Vertex(w/2, w/2, w/2, -w/2, w/2, -w/2, -w/2);
    v11[57] = new Vertex(w/2, w/2, w/2, -w/2, w/2+Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v11[58] = new Vertex(w/2, w/2, w/2, -w/2, w/2, w/2, -w/2);
    v11[59] = new Vertex(w/2, w/2, w/2, -w/2, w/2+Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    v11[60] = new Vertex(w/2, w/2, w/2, w/2, w/2, -w/2, -w/2);
    v11[61] = new Vertex(w/2, w/2, w/2, w/2, w/2+Math.sin(theta)*w, -w/2, -w/2+Math.cos(theta)*w);
    v11[62] = new Vertex(w/2, w/2, w/2, w/2, w/2, w/2, -w/2);
    v11[63] = new Vertex(w/2, w/2, w/2, w/2, w/2+Math.sin(theta)*w, w/2, -w/2+Math.cos(theta)*w);
    faces.push(new Face(color11, v11[0], v11[1], v11[3], v11[2]));
    faces.push(new Face(color11, v11[0], v11[1], v11[5], v11[4]));
    faces.push(new Face(color11, v11[0], v11[1], v11[9], v11[8]));
    faces.push(new Face(color11, v11[0], v11[1], v11[17], v11[16]));
    faces.push(new Face(color11, v11[0], v11[1], v11[33], v11[32]));
    faces.push(new Face(color11, v11[0], v11[2], v11[6], v11[4]));
    faces.push(new Face(color11, v11[0], v11[2], v11[10], v11[8]));
    faces.push(new Face(color11, v11[0], v11[2], v11[18], v11[16]));
    faces.push(new Face(color11, v11[0], v11[2], v11[34], v11[32]));
    faces.push(new Face(color11, v11[0], v11[4], v11[12], v11[8]));
    faces.push(new Face(color11, v11[0], v11[4], v11[20], v11[16]));
    faces.push(new Face(color11, v11[0], v11[4], v11[36], v11[32]));
    faces.push(new Face(color11, v11[0], v11[8], v11[24], v11[16]));
    faces.push(new Face(color11, v11[0], v11[8], v11[40], v11[32]));
    faces.push(new Face(color11, v11[0], v11[16], v11[48], v11[32]));
    faces.push(new Face(color11, v11[1], v11[3], v11[7], v11[5]));
    faces.push(new Face(color11, v11[1], v11[3], v11[11], v11[9]));
    faces.push(new Face(color11, v11[1], v11[3], v11[19], v11[17]));
    faces.push(new Face(color11, v11[1], v11[3], v11[35], v11[33]));
    faces.push(new Face(color11, v11[1], v11[5], v11[13], v11[9]));
    faces.push(new Face(color11, v11[1], v11[5], v11[21], v11[17]));
    faces.push(new Face(color11, v11[1], v11[5], v11[37], v11[33]));
    faces.push(new Face(color11, v11[1], v11[9], v11[25], v11[17]));
    faces.push(new Face(color11, v11[1], v11[9], v11[41], v11[33]));
    faces.push(new Face(color11, v11[1], v11[17], v11[49], v11[33]));
    faces.push(new Face(color11, v11[2], v11[3], v11[7], v11[6]));
    faces.push(new Face(color11, v11[2], v11[3], v11[11], v11[10]));
    faces.push(new Face(color11, v11[2], v11[3], v11[19], v11[18]));
    faces.push(new Face(color11, v11[2], v11[3], v11[35], v11[34]));
    faces.push(new Face(color11, v11[2], v11[6], v11[14], v11[10]));
    faces.push(new Face(color11, v11[2], v11[6], v11[22], v11[18]));
    faces.push(new Face(color11, v11[2], v11[6], v11[38], v11[34]));
    faces.push(new Face(color11, v11[2], v11[10], v11[26], v11[18]));
    faces.push(new Face(color11, v11[2], v11[10], v11[42], v11[34]));
    faces.push(new Face(color11, v11[2], v11[18], v11[50], v11[34]));
    faces.push(new Face(color11, v11[3], v11[7], v11[15], v11[11]));
    faces.push(new Face(color11, v11[3], v11[7], v11[23], v11[19]));
    faces.push(new Face(color11, v11[3], v11[7], v11[39], v11[35]));
    faces.push(new Face(color11, v11[3], v11[11], v11[27], v11[19]));
    faces.push(new Face(color11, v11[3], v11[11], v11[43], v11[35]));
    faces.push(new Face(color11, v11[3], v11[19], v11[51], v11[35]));
    faces.push(new Face(color11, v11[4], v11[5], v11[7], v11[6]));
    faces.push(new Face(color11, v11[4], v11[5], v11[13], v11[12]));
    faces.push(new Face(color11, v11[4], v11[5], v11[21], v11[20]));
    faces.push(new Face(color11, v11[4], v11[5], v11[37], v11[36]));
    faces.push(new Face(color11, v11[4], v11[6], v11[14], v11[12]));
    faces.push(new Face(color11, v11[4], v11[6], v11[22], v11[20]));
    faces.push(new Face(color11, v11[4], v11[6], v11[38], v11[36]));
    faces.push(new Face(color11, v11[4], v11[12], v11[28], v11[20]));
    faces.push(new Face(color11, v11[4], v11[12], v11[44], v11[36]));
    faces.push(new Face(color11, v11[4], v11[20], v11[52], v11[36]));
    faces.push(new Face(color11, v11[5], v11[7], v11[15], v11[13]));
    faces.push(new Face(color11, v11[5], v11[7], v11[23], v11[21]));
    faces.push(new Face(color11, v11[5], v11[7], v11[39], v11[37]));
    faces.push(new Face(color11, v11[5], v11[13], v11[29], v11[21]));
    faces.push(new Face(color11, v11[5], v11[13], v11[45], v11[37]));
    faces.push(new Face(color11, v11[5], v11[21], v11[53], v11[37]));
    faces.push(new Face(color11, v11[6], v11[7], v11[15], v11[14]));
    faces.push(new Face(color11, v11[6], v11[7], v11[23], v11[22]));
    faces.push(new Face(color11, v11[6], v11[7], v11[39], v11[38]));
    faces.push(new Face(color11, v11[6], v11[14], v11[30], v11[22]));
    faces.push(new Face(color11, v11[6], v11[14], v11[46], v11[38]));
    faces.push(new Face(color11, v11[6], v11[22], v11[54], v11[38]));
    faces.push(new Face(color11, v11[7], v11[15], v11[31], v11[23]));
    faces.push(new Face(color11, v11[7], v11[15], v11[47], v11[39]));
    faces.push(new Face(color11, v11[7], v11[23], v11[55], v11[39]));
    faces.push(new Face(color11, v11[8], v11[9], v11[11], v11[10]));
    faces.push(new Face(color11, v11[8], v11[9], v11[13], v11[12]));
    faces.push(new Face(color11, v11[8], v11[9], v11[25], v11[24]));
    faces.push(new Face(color11, v11[8], v11[9], v11[41], v11[40]));
    faces.push(new Face(color11, v11[8], v11[10], v11[14], v11[12]));
    faces.push(new Face(color11, v11[8], v11[10], v11[26], v11[24]));
    faces.push(new Face(color11, v11[8], v11[10], v11[42], v11[40]));
    faces.push(new Face(color11, v11[8], v11[12], v11[28], v11[24]));
    faces.push(new Face(color11, v11[8], v11[12], v11[44], v11[40]));
    faces.push(new Face(color11, v11[8], v11[24], v11[56], v11[40]));
    faces.push(new Face(color11, v11[9], v11[11], v11[15], v11[13]));
    faces.push(new Face(color11, v11[9], v11[11], v11[27], v11[25]));
    faces.push(new Face(color11, v11[9], v11[11], v11[43], v11[41]));
    faces.push(new Face(color11, v11[9], v11[13], v11[29], v11[25]));
    faces.push(new Face(color11, v11[9], v11[13], v11[45], v11[41]));
    faces.push(new Face(color11, v11[9], v11[25], v11[57], v11[41]));
    faces.push(new Face(color11, v11[10], v11[11], v11[15], v11[14]));
    faces.push(new Face(color11, v11[10], v11[11], v11[27], v11[26]));
    faces.push(new Face(color11, v11[10], v11[11], v11[43], v11[42]));
    faces.push(new Face(color11, v11[10], v11[14], v11[30], v11[26]));
    faces.push(new Face(color11, v11[10], v11[14], v11[46], v11[42]));
    faces.push(new Face(color11, v11[10], v11[26], v11[58], v11[42]));
    faces.push(new Face(color11, v11[11], v11[15], v11[31], v11[27]));
    faces.push(new Face(color11, v11[11], v11[15], v11[47], v11[43]));
    faces.push(new Face(color11, v11[11], v11[27], v11[59], v11[43]));
    faces.push(new Face(color11, v11[12], v11[13], v11[15], v11[14]));
    faces.push(new Face(color11, v11[12], v11[13], v11[29], v11[28]));
    faces.push(new Face(color11, v11[12], v11[13], v11[45], v11[44]));
    faces.push(new Face(color11, v11[12], v11[14], v11[30], v11[28]));
    faces.push(new Face(color11, v11[12], v11[14], v11[46], v11[44]));
    faces.push(new Face(color11, v11[12], v11[28], v11[60], v11[44]));
    faces.push(new Face(color11, v11[13], v11[15], v11[31], v11[29]));
    faces.push(new Face(color11, v11[13], v11[15], v11[47], v11[45]));
    faces.push(new Face(color11, v11[13], v11[29], v11[61], v11[45]));
    faces.push(new Face(color11, v11[14], v11[15], v11[31], v11[30]));
    faces.push(new Face(color11, v11[14], v11[15], v11[47], v11[46]));
    faces.push(new Face(color11, v11[14], v11[30], v11[62], v11[46]));
    faces.push(new Face(color11, v11[15], v11[31], v11[63], v11[47]));
    faces.push(new Face(color11, v11[16], v11[17], v11[19], v11[18]));
    faces.push(new Face(color11, v11[16], v11[17], v11[21], v11[20]));
    faces.push(new Face(color11, v11[16], v11[17], v11[25], v11[24]));
    faces.push(new Face(color11, v11[16], v11[17], v11[49], v11[48]));
    faces.push(new Face(color11, v11[16], v11[18], v11[22], v11[20]));
    faces.push(new Face(color11, v11[16], v11[18], v11[26], v11[24]));
    faces.push(new Face(color11, v11[16], v11[18], v11[50], v11[48]));
    faces.push(new Face(color11, v11[16], v11[20], v11[28], v11[24]));
    faces.push(new Face(color11, v11[16], v11[20], v11[52], v11[48]));
    faces.push(new Face(color11, v11[16], v11[24], v11[56], v11[48]));
    faces.push(new Face(color11, v11[17], v11[19], v11[23], v11[21]));
    faces.push(new Face(color11, v11[17], v11[19], v11[27], v11[25]));
    faces.push(new Face(color11, v11[17], v11[19], v11[51], v11[49]));
    faces.push(new Face(color11, v11[17], v11[21], v11[29], v11[25]));
    faces.push(new Face(color11, v11[17], v11[21], v11[53], v11[49]));
    faces.push(new Face(color11, v11[17], v11[25], v11[57], v11[49]));
    faces.push(new Face(color11, v11[18], v11[19], v11[23], v11[22]));
    faces.push(new Face(color11, v11[18], v11[19], v11[27], v11[26]));
    faces.push(new Face(color11, v11[18], v11[19], v11[51], v11[50]));
    faces.push(new Face(color11, v11[18], v11[22], v11[30], v11[26]));
    faces.push(new Face(color11, v11[18], v11[22], v11[54], v11[50]));
    faces.push(new Face(color11, v11[18], v11[26], v11[58], v11[50]));
    faces.push(new Face(color11, v11[19], v11[23], v11[31], v11[27]));
    faces.push(new Face(color11, v11[19], v11[23], v11[55], v11[51]));
    faces.push(new Face(color11, v11[19], v11[27], v11[59], v11[51]));
    faces.push(new Face(color11, v11[20], v11[21], v11[23], v11[22]));
    faces.push(new Face(color11, v11[20], v11[21], v11[29], v11[28]));
    faces.push(new Face(color11, v11[20], v11[21], v11[53], v11[52]));
    faces.push(new Face(color11, v11[20], v11[22], v11[30], v11[28]));
    faces.push(new Face(color11, v11[20], v11[22], v11[54], v11[52]));
    faces.push(new Face(color11, v11[20], v11[28], v11[60], v11[52]));
    faces.push(new Face(color11, v11[21], v11[23], v11[31], v11[29]));
    faces.push(new Face(color11, v11[21], v11[23], v11[55], v11[53]));
    faces.push(new Face(color11, v11[21], v11[29], v11[61], v11[53]));
    faces.push(new Face(color11, v11[22], v11[23], v11[31], v11[30]));
    faces.push(new Face(color11, v11[22], v11[23], v11[55], v11[54]));
    faces.push(new Face(color11, v11[22], v11[30], v11[62], v11[54]));
    faces.push(new Face(color11, v11[23], v11[31], v11[63], v11[55]));
    faces.push(new Face(color11, v11[24], v11[25], v11[27], v11[26]));
    faces.push(new Face(color11, v11[24], v11[25], v11[29], v11[28]));
    faces.push(new Face(color11, v11[24], v11[25], v11[57], v11[56]));
    faces.push(new Face(color11, v11[24], v11[26], v11[30], v11[28]));
    faces.push(new Face(color11, v11[24], v11[26], v11[58], v11[56]));
    faces.push(new Face(color11, v11[24], v11[28], v11[60], v11[56]));
    faces.push(new Face(color11, v11[25], v11[27], v11[31], v11[29]));
    faces.push(new Face(color11, v11[25], v11[27], v11[59], v11[57]));
    faces.push(new Face(color11, v11[25], v11[29], v11[61], v11[57]));
    faces.push(new Face(color11, v11[26], v11[27], v11[31], v11[30]));
    faces.push(new Face(color11, v11[26], v11[27], v11[59], v11[58]));
    faces.push(new Face(color11, v11[26], v11[30], v11[62], v11[58]));
    faces.push(new Face(color11, v11[27], v11[31], v11[63], v11[59]));
    faces.push(new Face(color11, v11[28], v11[29], v11[31], v11[30]));
    faces.push(new Face(color11, v11[28], v11[29], v11[61], v11[60]));
    faces.push(new Face(color11, v11[28], v11[30], v11[62], v11[60]));
    faces.push(new Face(color11, v11[29], v11[31], v11[63], v11[61]));
    faces.push(new Face(color11, v11[30], v11[31], v11[63], v11[62]));
    faces.push(new Face(color11, v11[32], v11[33], v11[35], v11[34]));
    faces.push(new Face(color11, v11[32], v11[33], v11[37], v11[36]));
    faces.push(new Face(color11, v11[32], v11[33], v11[41], v11[40]));
    faces.push(new Face(color11, v11[32], v11[33], v11[49], v11[48]));
    faces.push(new Face(color11, v11[32], v11[34], v11[38], v11[36]));
    faces.push(new Face(color11, v11[32], v11[34], v11[42], v11[40]));
    faces.push(new Face(color11, v11[32], v11[34], v11[50], v11[48]));
    faces.push(new Face(color11, v11[32], v11[36], v11[44], v11[40]));
    faces.push(new Face(color11, v11[32], v11[36], v11[52], v11[48]));
    faces.push(new Face(color11, v11[32], v11[40], v11[56], v11[48]));
    faces.push(new Face(color11, v11[33], v11[35], v11[39], v11[37]));
    faces.push(new Face(color11, v11[33], v11[35], v11[43], v11[41]));
    faces.push(new Face(color11, v11[33], v11[35], v11[51], v11[49]));
    faces.push(new Face(color11, v11[33], v11[37], v11[45], v11[41]));
    faces.push(new Face(color11, v11[33], v11[37], v11[53], v11[49]));
    faces.push(new Face(color11, v11[33], v11[41], v11[57], v11[49]));
    faces.push(new Face(color11, v11[34], v11[35], v11[39], v11[38]));
    faces.push(new Face(color11, v11[34], v11[35], v11[43], v11[42]));
    faces.push(new Face(color11, v11[34], v11[35], v11[51], v11[50]));
    faces.push(new Face(color11, v11[34], v11[38], v11[46], v11[42]));
    faces.push(new Face(color11, v11[34], v11[38], v11[54], v11[50]));
    faces.push(new Face(color11, v11[34], v11[42], v11[58], v11[50]));
    faces.push(new Face(color11, v11[35], v11[39], v11[47], v11[43]));
    faces.push(new Face(color11, v11[35], v11[39], v11[55], v11[51]));
    faces.push(new Face(color11, v11[35], v11[43], v11[59], v11[51]));
    faces.push(new Face(color11, v11[36], v11[37], v11[39], v11[38]));
    faces.push(new Face(color11, v11[36], v11[37], v11[45], v11[44]));
    faces.push(new Face(color11, v11[36], v11[37], v11[53], v11[52]));
    faces.push(new Face(color11, v11[36], v11[38], v11[46], v11[44]));
    faces.push(new Face(color11, v11[36], v11[38], v11[54], v11[52]));
    faces.push(new Face(color11, v11[36], v11[44], v11[60], v11[52]));
    faces.push(new Face(color11, v11[37], v11[39], v11[47], v11[45]));
    faces.push(new Face(color11, v11[37], v11[39], v11[55], v11[53]));
    faces.push(new Face(color11, v11[37], v11[45], v11[61], v11[53]));
    faces.push(new Face(color11, v11[38], v11[39], v11[47], v11[46]));
    faces.push(new Face(color11, v11[38], v11[39], v11[55], v11[54]));
    faces.push(new Face(color11, v11[38], v11[46], v11[62], v11[54]));
    faces.push(new Face(color11, v11[39], v11[47], v11[63], v11[55]));
    faces.push(new Face(color11, v11[40], v11[41], v11[43], v11[42]));
    faces.push(new Face(color11, v11[40], v11[41], v11[45], v11[44]));
    faces.push(new Face(color11, v11[40], v11[41], v11[57], v11[56]));
    faces.push(new Face(color11, v11[40], v11[42], v11[46], v11[44]));
    faces.push(new Face(color11, v11[40], v11[42], v11[58], v11[56]));
    faces.push(new Face(color11, v11[40], v11[44], v11[60], v11[56]));
    faces.push(new Face(color11, v11[41], v11[43], v11[47], v11[45]));
    faces.push(new Face(color11, v11[41], v11[43], v11[59], v11[57]));
    faces.push(new Face(color11, v11[41], v11[45], v11[61], v11[57]));
    faces.push(new Face(color11, v11[42], v11[43], v11[47], v11[46]));
    faces.push(new Face(color11, v11[42], v11[43], v11[59], v11[58]));
    faces.push(new Face(color11, v11[42], v11[46], v11[62], v11[58]));
    faces.push(new Face(color11, v11[43], v11[47], v11[63], v11[59]));
    faces.push(new Face(color11, v11[44], v11[45], v11[47], v11[46]));
    faces.push(new Face(color11, v11[44], v11[45], v11[61], v11[60]));
    faces.push(new Face(color11, v11[44], v11[46], v11[62], v11[60]));
    faces.push(new Face(color11, v11[45], v11[47], v11[63], v11[61]));
    faces.push(new Face(color11, v11[46], v11[47], v11[63], v11[62]));
    faces.push(new Face(color11, v11[48], v11[49], v11[51], v11[50]));
    faces.push(new Face(color11, v11[48], v11[49], v11[53], v11[52]));
    faces.push(new Face(color11, v11[48], v11[49], v11[57], v11[56]));
    faces.push(new Face(color11, v11[48], v11[50], v11[54], v11[52]));
    faces.push(new Face(color11, v11[48], v11[50], v11[58], v11[56]));
    faces.push(new Face(color11, v11[48], v11[52], v11[60], v11[56]));
    faces.push(new Face(color11, v11[49], v11[51], v11[55], v11[53]));
    faces.push(new Face(color11, v11[49], v11[51], v11[59], v11[57]));
    faces.push(new Face(color11, v11[49], v11[53], v11[61], v11[57]));
    faces.push(new Face(color11, v11[50], v11[51], v11[55], v11[54]));
    faces.push(new Face(color11, v11[50], v11[51], v11[59], v11[58]));
    faces.push(new Face(color11, v11[50], v11[54], v11[62], v11[58]));
    faces.push(new Face(color11, v11[51], v11[55], v11[63], v11[59]));
    faces.push(new Face(color11, v11[52], v11[53], v11[55], v11[54]));
    faces.push(new Face(color11, v11[52], v11[53], v11[61], v11[60]));
    faces.push(new Face(color11, v11[52], v11[54], v11[62], v11[60]));
    faces.push(new Face(color11, v11[53], v11[55], v11[63], v11[61]));
    faces.push(new Face(color11, v11[54], v11[55], v11[63], v11[62]));
    faces.push(new Face(color11, v11[56], v11[57], v11[59], v11[58]));
    faces.push(new Face(color11, v11[56], v11[57], v11[61], v11[60]));
    faces.push(new Face(color11, v11[56], v11[58], v11[62], v11[60]));
    faces.push(new Face(color11, v11[57], v11[59], v11[63], v11[61]));
    faces.push(new Face(color11, v11[58], v11[59], v11[63], v11[62]));
    faces.push(new Face(color11, v11[60], v11[61], v11[63], v11[62]));
    for (let i = 0; i < v11.length; i++) {
        v11[i].rotate(r);
        v11[i].project();
    }

    v12[0] = new Vertex(-w/2, -w/2, -w/2, -w/2, -w/2, w/2, -w/2);
    v12[1] = new Vertex(-w/2, -w/2, -w/2, -w/2, -w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[2] = new Vertex(-w/2, -w/2, -w/2, -w/2, w/2, w/2, -w/2);
    v12[3] = new Vertex(-w/2, -w/2, -w/2, -w/2, w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[4] = new Vertex(-w/2, -w/2, -w/2, w/2, -w/2, w/2, -w/2);
    v12[5] = new Vertex(-w/2, -w/2, -w/2, w/2, -w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[6] = new Vertex(-w/2, -w/2, -w/2, w/2, w/2, w/2, -w/2);
    v12[7] = new Vertex(-w/2, -w/2, -w/2, w/2, w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[8] = new Vertex(-w/2, -w/2, w/2, -w/2, -w/2, w/2, -w/2);
    v12[9] = new Vertex(-w/2, -w/2, w/2, -w/2, -w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[10] = new Vertex(-w/2, -w/2, w/2, -w/2, w/2, w/2, -w/2);
    v12[11] = new Vertex(-w/2, -w/2, w/2, -w/2, w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[12] = new Vertex(-w/2, -w/2, w/2, w/2, -w/2, w/2, -w/2);
    v12[13] = new Vertex(-w/2, -w/2, w/2, w/2, -w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[14] = new Vertex(-w/2, -w/2, w/2, w/2, w/2, w/2, -w/2);
    v12[15] = new Vertex(-w/2, -w/2, w/2, w/2, w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[16] = new Vertex(-w/2, w/2, -w/2, -w/2, -w/2, w/2, -w/2);
    v12[17] = new Vertex(-w/2, w/2, -w/2, -w/2, -w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[18] = new Vertex(-w/2, w/2, -w/2, -w/2, w/2, w/2, -w/2);
    v12[19] = new Vertex(-w/2, w/2, -w/2, -w/2, w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[20] = new Vertex(-w/2, w/2, -w/2, w/2, -w/2, w/2, -w/2);
    v12[21] = new Vertex(-w/2, w/2, -w/2, w/2, -w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[22] = new Vertex(-w/2, w/2, -w/2, w/2, w/2, w/2, -w/2);
    v12[23] = new Vertex(-w/2, w/2, -w/2, w/2, w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[24] = new Vertex(-w/2, w/2, w/2, -w/2, -w/2, w/2, -w/2);
    v12[25] = new Vertex(-w/2, w/2, w/2, -w/2, -w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[26] = new Vertex(-w/2, w/2, w/2, -w/2, w/2, w/2, -w/2);
    v12[27] = new Vertex(-w/2, w/2, w/2, -w/2, w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[28] = new Vertex(-w/2, w/2, w/2, w/2, -w/2, w/2, -w/2);
    v12[29] = new Vertex(-w/2, w/2, w/2, w/2, -w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[30] = new Vertex(-w/2, w/2, w/2, w/2, w/2, w/2, -w/2);
    v12[31] = new Vertex(-w/2, w/2, w/2, w/2, w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[32] = new Vertex(w/2, -w/2, -w/2, -w/2, -w/2, w/2, -w/2);
    v12[33] = new Vertex(w/2, -w/2, -w/2, -w/2, -w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[34] = new Vertex(w/2, -w/2, -w/2, -w/2, w/2, w/2, -w/2);
    v12[35] = new Vertex(w/2, -w/2, -w/2, -w/2, w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[36] = new Vertex(w/2, -w/2, -w/2, w/2, -w/2, w/2, -w/2);
    v12[37] = new Vertex(w/2, -w/2, -w/2, w/2, -w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[38] = new Vertex(w/2, -w/2, -w/2, w/2, w/2, w/2, -w/2);
    v12[39] = new Vertex(w/2, -w/2, -w/2, w/2, w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[40] = new Vertex(w/2, -w/2, w/2, -w/2, -w/2, w/2, -w/2);
    v12[41] = new Vertex(w/2, -w/2, w/2, -w/2, -w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[42] = new Vertex(w/2, -w/2, w/2, -w/2, w/2, w/2, -w/2);
    v12[43] = new Vertex(w/2, -w/2, w/2, -w/2, w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[44] = new Vertex(w/2, -w/2, w/2, w/2, -w/2, w/2, -w/2);
    v12[45] = new Vertex(w/2, -w/2, w/2, w/2, -w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[46] = new Vertex(w/2, -w/2, w/2, w/2, w/2, w/2, -w/2);
    v12[47] = new Vertex(w/2, -w/2, w/2, w/2, w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[48] = new Vertex(w/2, w/2, -w/2, -w/2, -w/2, w/2, -w/2);
    v12[49] = new Vertex(w/2, w/2, -w/2, -w/2, -w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[50] = new Vertex(w/2, w/2, -w/2, -w/2, w/2, w/2, -w/2);
    v12[51] = new Vertex(w/2, w/2, -w/2, -w/2, w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[52] = new Vertex(w/2, w/2, -w/2, w/2, -w/2, w/2, -w/2);
    v12[53] = new Vertex(w/2, w/2, -w/2, w/2, -w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[54] = new Vertex(w/2, w/2, -w/2, w/2, w/2, w/2, -w/2);
    v12[55] = new Vertex(w/2, w/2, -w/2, w/2, w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[56] = new Vertex(w/2, w/2, w/2, -w/2, -w/2, w/2, -w/2);
    v12[57] = new Vertex(w/2, w/2, w/2, -w/2, -w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[58] = new Vertex(w/2, w/2, w/2, -w/2, w/2, w/2, -w/2);
    v12[59] = new Vertex(w/2, w/2, w/2, -w/2, w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[60] = new Vertex(w/2, w/2, w/2, w/2, -w/2, w/2, -w/2);
    v12[61] = new Vertex(w/2, w/2, w/2, w/2, -w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    v12[62] = new Vertex(w/2, w/2, w/2, w/2, w/2, w/2, -w/2);
    v12[63] = new Vertex(w/2, w/2, w/2, w/2, w/2, w/2+Math.sin(theta)*w, -w/2+Math.cos(theta)*w);
    faces.push(new Face(color12, v12[0], v12[1], v12[3], v12[2]));
    faces.push(new Face(color12, v12[0], v12[1], v12[5], v12[4]));
    faces.push(new Face(color12, v12[0], v12[1], v12[9], v12[8]));
    faces.push(new Face(color12, v12[0], v12[1], v12[17], v12[16]));
    faces.push(new Face(color12, v12[0], v12[1], v12[33], v12[32]));
    faces.push(new Face(color12, v12[0], v12[2], v12[6], v12[4]));
    faces.push(new Face(color12, v12[0], v12[2], v12[10], v12[8]));
    faces.push(new Face(color12, v12[0], v12[2], v12[18], v12[16]));
    faces.push(new Face(color12, v12[0], v12[2], v12[34], v12[32]));
    faces.push(new Face(color12, v12[0], v12[4], v12[12], v12[8]));
    faces.push(new Face(color12, v12[0], v12[4], v12[20], v12[16]));
    faces.push(new Face(color12, v12[0], v12[4], v12[36], v12[32]));
    faces.push(new Face(color12, v12[0], v12[8], v12[24], v12[16]));
    faces.push(new Face(color12, v12[0], v12[8], v12[40], v12[32]));
    faces.push(new Face(color12, v12[0], v12[16], v12[48], v12[32]));
    faces.push(new Face(color12, v12[1], v12[3], v12[7], v12[5]));
    faces.push(new Face(color12, v12[1], v12[3], v12[11], v12[9]));
    faces.push(new Face(color12, v12[1], v12[3], v12[19], v12[17]));
    faces.push(new Face(color12, v12[1], v12[3], v12[35], v12[33]));
    faces.push(new Face(color12, v12[1], v12[5], v12[13], v12[9]));
    faces.push(new Face(color12, v12[1], v12[5], v12[21], v12[17]));
    faces.push(new Face(color12, v12[1], v12[5], v12[37], v12[33]));
    faces.push(new Face(color12, v12[1], v12[9], v12[25], v12[17]));
    faces.push(new Face(color12, v12[1], v12[9], v12[41], v12[33]));
    faces.push(new Face(color12, v12[1], v12[17], v12[49], v12[33]));
    faces.push(new Face(color12, v12[2], v12[3], v12[7], v12[6]));
    faces.push(new Face(color12, v12[2], v12[3], v12[11], v12[10]));
    faces.push(new Face(color12, v12[2], v12[3], v12[19], v12[18]));
    faces.push(new Face(color12, v12[2], v12[3], v12[35], v12[34]));
    faces.push(new Face(color12, v12[2], v12[6], v12[14], v12[10]));
    faces.push(new Face(color12, v12[2], v12[6], v12[22], v12[18]));
    faces.push(new Face(color12, v12[2], v12[6], v12[38], v12[34]));
    faces.push(new Face(color12, v12[2], v12[10], v12[26], v12[18]));
    faces.push(new Face(color12, v12[2], v12[10], v12[42], v12[34]));
    faces.push(new Face(color12, v12[2], v12[18], v12[50], v12[34]));
    faces.push(new Face(color12, v12[3], v12[7], v12[15], v12[11]));
    faces.push(new Face(color12, v12[3], v12[7], v12[23], v12[19]));
    faces.push(new Face(color12, v12[3], v12[7], v12[39], v12[35]));
    faces.push(new Face(color12, v12[3], v12[11], v12[27], v12[19]));
    faces.push(new Face(color12, v12[3], v12[11], v12[43], v12[35]));
    faces.push(new Face(color12, v12[3], v12[19], v12[51], v12[35]));
    faces.push(new Face(color12, v12[4], v12[5], v12[7], v12[6]));
    faces.push(new Face(color12, v12[4], v12[5], v12[13], v12[12]));
    faces.push(new Face(color12, v12[4], v12[5], v12[21], v12[20]));
    faces.push(new Face(color12, v12[4], v12[5], v12[37], v12[36]));
    faces.push(new Face(color12, v12[4], v12[6], v12[14], v12[12]));
    faces.push(new Face(color12, v12[4], v12[6], v12[22], v12[20]));
    faces.push(new Face(color12, v12[4], v12[6], v12[38], v12[36]));
    faces.push(new Face(color12, v12[4], v12[12], v12[28], v12[20]));
    faces.push(new Face(color12, v12[4], v12[12], v12[44], v12[36]));
    faces.push(new Face(color12, v12[4], v12[20], v12[52], v12[36]));
    faces.push(new Face(color12, v12[5], v12[7], v12[15], v12[13]));
    faces.push(new Face(color12, v12[5], v12[7], v12[23], v12[21]));
    faces.push(new Face(color12, v12[5], v12[7], v12[39], v12[37]));
    faces.push(new Face(color12, v12[5], v12[13], v12[29], v12[21]));
    faces.push(new Face(color12, v12[5], v12[13], v12[45], v12[37]));
    faces.push(new Face(color12, v12[5], v12[21], v12[53], v12[37]));
    faces.push(new Face(color12, v12[6], v12[7], v12[15], v12[14]));
    faces.push(new Face(color12, v12[6], v12[7], v12[23], v12[22]));
    faces.push(new Face(color12, v12[6], v12[7], v12[39], v12[38]));
    faces.push(new Face(color12, v12[6], v12[14], v12[30], v12[22]));
    faces.push(new Face(color12, v12[6], v12[14], v12[46], v12[38]));
    faces.push(new Face(color12, v12[6], v12[22], v12[54], v12[38]));
    faces.push(new Face(color12, v12[7], v12[15], v12[31], v12[23]));
    faces.push(new Face(color12, v12[7], v12[15], v12[47], v12[39]));
    faces.push(new Face(color12, v12[7], v12[23], v12[55], v12[39]));
    faces.push(new Face(color12, v12[8], v12[9], v12[11], v12[10]));
    faces.push(new Face(color12, v12[8], v12[9], v12[13], v12[12]));
    faces.push(new Face(color12, v12[8], v12[9], v12[25], v12[24]));
    faces.push(new Face(color12, v12[8], v12[9], v12[41], v12[40]));
    faces.push(new Face(color12, v12[8], v12[10], v12[14], v12[12]));
    faces.push(new Face(color12, v12[8], v12[10], v12[26], v12[24]));
    faces.push(new Face(color12, v12[8], v12[10], v12[42], v12[40]));
    faces.push(new Face(color12, v12[8], v12[12], v12[28], v12[24]));
    faces.push(new Face(color12, v12[8], v12[12], v12[44], v12[40]));
    faces.push(new Face(color12, v12[8], v12[24], v12[56], v12[40]));
    faces.push(new Face(color12, v12[9], v12[11], v12[15], v12[13]));
    faces.push(new Face(color12, v12[9], v12[11], v12[27], v12[25]));
    faces.push(new Face(color12, v12[9], v12[11], v12[43], v12[41]));
    faces.push(new Face(color12, v12[9], v12[13], v12[29], v12[25]));
    faces.push(new Face(color12, v12[9], v12[13], v12[45], v12[41]));
    faces.push(new Face(color12, v12[9], v12[25], v12[57], v12[41]));
    faces.push(new Face(color12, v12[10], v12[11], v12[15], v12[14]));
    faces.push(new Face(color12, v12[10], v12[11], v12[27], v12[26]));
    faces.push(new Face(color12, v12[10], v12[11], v12[43], v12[42]));
    faces.push(new Face(color12, v12[10], v12[14], v12[30], v12[26]));
    faces.push(new Face(color12, v12[10], v12[14], v12[46], v12[42]));
    faces.push(new Face(color12, v12[10], v12[26], v12[58], v12[42]));
    faces.push(new Face(color12, v12[11], v12[15], v12[31], v12[27]));
    faces.push(new Face(color12, v12[11], v12[15], v12[47], v12[43]));
    faces.push(new Face(color12, v12[11], v12[27], v12[59], v12[43]));
    faces.push(new Face(color12, v12[12], v12[13], v12[15], v12[14]));
    faces.push(new Face(color12, v12[12], v12[13], v12[29], v12[28]));
    faces.push(new Face(color12, v12[12], v12[13], v12[45], v12[44]));
    faces.push(new Face(color12, v12[12], v12[14], v12[30], v12[28]));
    faces.push(new Face(color12, v12[12], v12[14], v12[46], v12[44]));
    faces.push(new Face(color12, v12[12], v12[28], v12[60], v12[44]));
    faces.push(new Face(color12, v12[13], v12[15], v12[31], v12[29]));
    faces.push(new Face(color12, v12[13], v12[15], v12[47], v12[45]));
    faces.push(new Face(color12, v12[13], v12[29], v12[61], v12[45]));
    faces.push(new Face(color12, v12[14], v12[15], v12[31], v12[30]));
    faces.push(new Face(color12, v12[14], v12[15], v12[47], v12[46]));
    faces.push(new Face(color12, v12[14], v12[30], v12[62], v12[46]));
    faces.push(new Face(color12, v12[15], v12[31], v12[63], v12[47]));
    faces.push(new Face(color12, v12[16], v12[17], v12[19], v12[18]));
    faces.push(new Face(color12, v12[16], v12[17], v12[21], v12[20]));
    faces.push(new Face(color12, v12[16], v12[17], v12[25], v12[24]));
    faces.push(new Face(color12, v12[16], v12[17], v12[49], v12[48]));
    faces.push(new Face(color12, v12[16], v12[18], v12[22], v12[20]));
    faces.push(new Face(color12, v12[16], v12[18], v12[26], v12[24]));
    faces.push(new Face(color12, v12[16], v12[18], v12[50], v12[48]));
    faces.push(new Face(color12, v12[16], v12[20], v12[28], v12[24]));
    faces.push(new Face(color12, v12[16], v12[20], v12[52], v12[48]));
    faces.push(new Face(color12, v12[16], v12[24], v12[56], v12[48]));
    faces.push(new Face(color12, v12[17], v12[19], v12[23], v12[21]));
    faces.push(new Face(color12, v12[17], v12[19], v12[27], v12[25]));
    faces.push(new Face(color12, v12[17], v12[19], v12[51], v12[49]));
    faces.push(new Face(color12, v12[17], v12[21], v12[29], v12[25]));
    faces.push(new Face(color12, v12[17], v12[21], v12[53], v12[49]));
    faces.push(new Face(color12, v12[17], v12[25], v12[57], v12[49]));
    faces.push(new Face(color12, v12[18], v12[19], v12[23], v12[22]));
    faces.push(new Face(color12, v12[18], v12[19], v12[27], v12[26]));
    faces.push(new Face(color12, v12[18], v12[19], v12[51], v12[50]));
    faces.push(new Face(color12, v12[18], v12[22], v12[30], v12[26]));
    faces.push(new Face(color12, v12[18], v12[22], v12[54], v12[50]));
    faces.push(new Face(color12, v12[18], v12[26], v12[58], v12[50]));
    faces.push(new Face(color12, v12[19], v12[23], v12[31], v12[27]));
    faces.push(new Face(color12, v12[19], v12[23], v12[55], v12[51]));
    faces.push(new Face(color12, v12[19], v12[27], v12[59], v12[51]));
    faces.push(new Face(color12, v12[20], v12[21], v12[23], v12[22]));
    faces.push(new Face(color12, v12[20], v12[21], v12[29], v12[28]));
    faces.push(new Face(color12, v12[20], v12[21], v12[53], v12[52]));
    faces.push(new Face(color12, v12[20], v12[22], v12[30], v12[28]));
    faces.push(new Face(color12, v12[20], v12[22], v12[54], v12[52]));
    faces.push(new Face(color12, v12[20], v12[28], v12[60], v12[52]));
    faces.push(new Face(color12, v12[21], v12[23], v12[31], v12[29]));
    faces.push(new Face(color12, v12[21], v12[23], v12[55], v12[53]));
    faces.push(new Face(color12, v12[21], v12[29], v12[61], v12[53]));
    faces.push(new Face(color12, v12[22], v12[23], v12[31], v12[30]));
    faces.push(new Face(color12, v12[22], v12[23], v12[55], v12[54]));
    faces.push(new Face(color12, v12[22], v12[30], v12[62], v12[54]));
    faces.push(new Face(color12, v12[23], v12[31], v12[63], v12[55]));
    faces.push(new Face(color12, v12[24], v12[25], v12[27], v12[26]));
    faces.push(new Face(color12, v12[24], v12[25], v12[29], v12[28]));
    faces.push(new Face(color12, v12[24], v12[25], v12[57], v12[56]));
    faces.push(new Face(color12, v12[24], v12[26], v12[30], v12[28]));
    faces.push(new Face(color12, v12[24], v12[26], v12[58], v12[56]));
    faces.push(new Face(color12, v12[24], v12[28], v12[60], v12[56]));
    faces.push(new Face(color12, v12[25], v12[27], v12[31], v12[29]));
    faces.push(new Face(color12, v12[25], v12[27], v12[59], v12[57]));
    faces.push(new Face(color12, v12[25], v12[29], v12[61], v12[57]));
    faces.push(new Face(color12, v12[26], v12[27], v12[31], v12[30]));
    faces.push(new Face(color12, v12[26], v12[27], v12[59], v12[58]));
    faces.push(new Face(color12, v12[26], v12[30], v12[62], v12[58]));
    faces.push(new Face(color12, v12[27], v12[31], v12[63], v12[59]));
    faces.push(new Face(color12, v12[28], v12[29], v12[31], v12[30]));
    faces.push(new Face(color12, v12[28], v12[29], v12[61], v12[60]));
    faces.push(new Face(color12, v12[28], v12[30], v12[62], v12[60]));
    faces.push(new Face(color12, v12[29], v12[31], v12[63], v12[61]));
    faces.push(new Face(color12, v12[30], v12[31], v12[63], v12[62]));
    faces.push(new Face(color12, v12[32], v12[33], v12[35], v12[34]));
    faces.push(new Face(color12, v12[32], v12[33], v12[37], v12[36]));
    faces.push(new Face(color12, v12[32], v12[33], v12[41], v12[40]));
    faces.push(new Face(color12, v12[32], v12[33], v12[49], v12[48]));
    faces.push(new Face(color12, v12[32], v12[34], v12[38], v12[36]));
    faces.push(new Face(color12, v12[32], v12[34], v12[42], v12[40]));
    faces.push(new Face(color12, v12[32], v12[34], v12[50], v12[48]));
    faces.push(new Face(color12, v12[32], v12[36], v12[44], v12[40]));
    faces.push(new Face(color12, v12[32], v12[36], v12[52], v12[48]));
    faces.push(new Face(color12, v12[32], v12[40], v12[56], v12[48]));
    faces.push(new Face(color12, v12[33], v12[35], v12[39], v12[37]));
    faces.push(new Face(color12, v12[33], v12[35], v12[43], v12[41]));
    faces.push(new Face(color12, v12[33], v12[35], v12[51], v12[49]));
    faces.push(new Face(color12, v12[33], v12[37], v12[45], v12[41]));
    faces.push(new Face(color12, v12[33], v12[37], v12[53], v12[49]));
    faces.push(new Face(color12, v12[33], v12[41], v12[57], v12[49]));
    faces.push(new Face(color12, v12[34], v12[35], v12[39], v12[38]));
    faces.push(new Face(color12, v12[34], v12[35], v12[43], v12[42]));
    faces.push(new Face(color12, v12[34], v12[35], v12[51], v12[50]));
    faces.push(new Face(color12, v12[34], v12[38], v12[46], v12[42]));
    faces.push(new Face(color12, v12[34], v12[38], v12[54], v12[50]));
    faces.push(new Face(color12, v12[34], v12[42], v12[58], v12[50]));
    faces.push(new Face(color12, v12[35], v12[39], v12[47], v12[43]));
    faces.push(new Face(color12, v12[35], v12[39], v12[55], v12[51]));
    faces.push(new Face(color12, v12[35], v12[43], v12[59], v12[51]));
    faces.push(new Face(color12, v12[36], v12[37], v12[39], v12[38]));
    faces.push(new Face(color12, v12[36], v12[37], v12[45], v12[44]));
    faces.push(new Face(color12, v12[36], v12[37], v12[53], v12[52]));
    faces.push(new Face(color12, v12[36], v12[38], v12[46], v12[44]));
    faces.push(new Face(color12, v12[36], v12[38], v12[54], v12[52]));
    faces.push(new Face(color12, v12[36], v12[44], v12[60], v12[52]));
    faces.push(new Face(color12, v12[37], v12[39], v12[47], v12[45]));
    faces.push(new Face(color12, v12[37], v12[39], v12[55], v12[53]));
    faces.push(new Face(color12, v12[37], v12[45], v12[61], v12[53]));
    faces.push(new Face(color12, v12[38], v12[39], v12[47], v12[46]));
    faces.push(new Face(color12, v12[38], v12[39], v12[55], v12[54]));
    faces.push(new Face(color12, v12[38], v12[46], v12[62], v12[54]));
    faces.push(new Face(color12, v12[39], v12[47], v12[63], v12[55]));
    faces.push(new Face(color12, v12[40], v12[41], v12[43], v12[42]));
    faces.push(new Face(color12, v12[40], v12[41], v12[45], v12[44]));
    faces.push(new Face(color12, v12[40], v12[41], v12[57], v12[56]));
    faces.push(new Face(color12, v12[40], v12[42], v12[46], v12[44]));
    faces.push(new Face(color12, v12[40], v12[42], v12[58], v12[56]));
    faces.push(new Face(color12, v12[40], v12[44], v12[60], v12[56]));
    faces.push(new Face(color12, v12[41], v12[43], v12[47], v12[45]));
    faces.push(new Face(color12, v12[41], v12[43], v12[59], v12[57]));
    faces.push(new Face(color12, v12[41], v12[45], v12[61], v12[57]));
    faces.push(new Face(color12, v12[42], v12[43], v12[47], v12[46]));
    faces.push(new Face(color12, v12[42], v12[43], v12[59], v12[58]));
    faces.push(new Face(color12, v12[42], v12[46], v12[62], v12[58]));
    faces.push(new Face(color12, v12[43], v12[47], v12[63], v12[59]));
    faces.push(new Face(color12, v12[44], v12[45], v12[47], v12[46]));
    faces.push(new Face(color12, v12[44], v12[45], v12[61], v12[60]));
    faces.push(new Face(color12, v12[44], v12[46], v12[62], v12[60]));
    faces.push(new Face(color12, v12[45], v12[47], v12[63], v12[61]));
    faces.push(new Face(color12, v12[46], v12[47], v12[63], v12[62]));
    faces.push(new Face(color12, v12[48], v12[49], v12[51], v12[50]));
    faces.push(new Face(color12, v12[48], v12[49], v12[53], v12[52]));
    faces.push(new Face(color12, v12[48], v12[49], v12[57], v12[56]));
    faces.push(new Face(color12, v12[48], v12[50], v12[54], v12[52]));
    faces.push(new Face(color12, v12[48], v12[50], v12[58], v12[56]));
    faces.push(new Face(color12, v12[48], v12[52], v12[60], v12[56]));
    faces.push(new Face(color12, v12[49], v12[51], v12[55], v12[53]));
    faces.push(new Face(color12, v12[49], v12[51], v12[59], v12[57]));
    faces.push(new Face(color12, v12[49], v12[53], v12[61], v12[57]));
    faces.push(new Face(color12, v12[50], v12[51], v12[55], v12[54]));
    faces.push(new Face(color12, v12[50], v12[51], v12[59], v12[58]));
    faces.push(new Face(color12, v12[50], v12[54], v12[62], v12[58]));
    faces.push(new Face(color12, v12[51], v12[55], v12[63], v12[59]));
    faces.push(new Face(color12, v12[52], v12[53], v12[55], v12[54]));
    faces.push(new Face(color12, v12[52], v12[53], v12[61], v12[60]));
    faces.push(new Face(color12, v12[52], v12[54], v12[62], v12[60]));
    faces.push(new Face(color12, v12[53], v12[55], v12[63], v12[61]));
    faces.push(new Face(color12, v12[54], v12[55], v12[63], v12[62]));
    faces.push(new Face(color12, v12[56], v12[57], v12[59], v12[58]));
    faces.push(new Face(color12, v12[56], v12[57], v12[61], v12[60]));
    faces.push(new Face(color12, v12[56], v12[58], v12[62], v12[60]));
    faces.push(new Face(color12, v12[57], v12[59], v12[63], v12[61]));
    faces.push(new Face(color12, v12[58], v12[59], v12[63], v12[62]));
    faces.push(new Face(color12, v12[60], v12[61], v12[63], v12[62]));
    for (let i = 0; i < v12.length; i++) {
        v12[i].rotate(r);
        v12[i].project();
    }

    v13[0] = new Vertex(-w/2, -w/2, -w/2, -w/2, -w/2, -w/2, -w/2);
    v13[1] = new Vertex(-w/2, -w/2, -w/2, -w/2, -w/2, w/2, -w/2);
    v13[2] = new Vertex(-w/2, -w/2, -w/2, -w/2, w/2, -w/2, -w/2);
    v13[3] = new Vertex(-w/2, -w/2, -w/2, -w/2, w/2, w/2, -w/2);
    v13[4] = new Vertex(-w/2, -w/2, -w/2, w/2, -w/2, -w/2, -w/2);
    v13[5] = new Vertex(-w/2, -w/2, -w/2, w/2, -w/2, w/2, -w/2);
    v13[6] = new Vertex(-w/2, -w/2, -w/2, w/2, w/2, -w/2, -w/2);
    v13[7] = new Vertex(-w/2, -w/2, -w/2, w/2, w/2, w/2, -w/2);
    v13[8] = new Vertex(-w/2, -w/2, w/2, -w/2, -w/2, -w/2, -w/2);
    v13[9] = new Vertex(-w/2, -w/2, w/2, -w/2, -w/2, w/2, -w/2);
    v13[10] = new Vertex(-w/2, -w/2, w/2, -w/2, w/2, -w/2, -w/2);
    v13[11] = new Vertex(-w/2, -w/2, w/2, -w/2, w/2, w/2, -w/2);
    v13[12] = new Vertex(-w/2, -w/2, w/2, w/2, -w/2, -w/2, -w/2);
    v13[13] = new Vertex(-w/2, -w/2, w/2, w/2, -w/2, w/2, -w/2);
    v13[14] = new Vertex(-w/2, -w/2, w/2, w/2, w/2, -w/2, -w/2);
    v13[15] = new Vertex(-w/2, -w/2, w/2, w/2, w/2, w/2, -w/2);
    v13[16] = new Vertex(-w/2, w/2, -w/2, -w/2, -w/2, -w/2, -w/2);
    v13[17] = new Vertex(-w/2, w/2, -w/2, -w/2, -w/2, w/2, -w/2);
    v13[18] = new Vertex(-w/2, w/2, -w/2, -w/2, w/2, -w/2, -w/2);
    v13[19] = new Vertex(-w/2, w/2, -w/2, -w/2, w/2, w/2, -w/2);
    v13[20] = new Vertex(-w/2, w/2, -w/2, w/2, -w/2, -w/2, -w/2);
    v13[21] = new Vertex(-w/2, w/2, -w/2, w/2, -w/2, w/2, -w/2);
    v13[22] = new Vertex(-w/2, w/2, -w/2, w/2, w/2, -w/2, -w/2);
    v13[23] = new Vertex(-w/2, w/2, -w/2, w/2, w/2, w/2, -w/2);
    v13[24] = new Vertex(-w/2, w/2, w/2, -w/2, -w/2, -w/2, -w/2);
    v13[25] = new Vertex(-w/2, w/2, w/2, -w/2, -w/2, w/2, -w/2);
    v13[26] = new Vertex(-w/2, w/2, w/2, -w/2, w/2, -w/2, -w/2);
    v13[27] = new Vertex(-w/2, w/2, w/2, -w/2, w/2, w/2, -w/2);
    v13[28] = new Vertex(-w/2, w/2, w/2, w/2, -w/2, -w/2, -w/2);
    v13[29] = new Vertex(-w/2, w/2, w/2, w/2, -w/2, w/2, -w/2);
    v13[30] = new Vertex(-w/2, w/2, w/2, w/2, w/2, -w/2, -w/2);
    v13[31] = new Vertex(-w/2, w/2, w/2, w/2, w/2, w/2, -w/2);
    v13[32] = new Vertex(w/2, -w/2, -w/2, -w/2, -w/2, -w/2, -w/2);
    v13[33] = new Vertex(w/2, -w/2, -w/2, -w/2, -w/2, w/2, -w/2);
    v13[34] = new Vertex(w/2, -w/2, -w/2, -w/2, w/2, -w/2, -w/2);
    v13[35] = new Vertex(w/2, -w/2, -w/2, -w/2, w/2, w/2, -w/2);
    v13[36] = new Vertex(w/2, -w/2, -w/2, w/2, -w/2, -w/2, -w/2);
    v13[37] = new Vertex(w/2, -w/2, -w/2, w/2, -w/2, w/2, -w/2);
    v13[38] = new Vertex(w/2, -w/2, -w/2, w/2, w/2, -w/2, -w/2);
    v13[39] = new Vertex(w/2, -w/2, -w/2, w/2, w/2, w/2, -w/2);
    v13[40] = new Vertex(w/2, -w/2, w/2, -w/2, -w/2, -w/2, -w/2);
    v13[41] = new Vertex(w/2, -w/2, w/2, -w/2, -w/2, w/2, -w/2);
    v13[42] = new Vertex(w/2, -w/2, w/2, -w/2, w/2, -w/2, -w/2);
    v13[43] = new Vertex(w/2, -w/2, w/2, -w/2, w/2, w/2, -w/2);
    v13[44] = new Vertex(w/2, -w/2, w/2, w/2, -w/2, -w/2, -w/2);
    v13[45] = new Vertex(w/2, -w/2, w/2, w/2, -w/2, w/2, -w/2);
    v13[46] = new Vertex(w/2, -w/2, w/2, w/2, w/2, -w/2, -w/2);
    v13[47] = new Vertex(w/2, -w/2, w/2, w/2, w/2, w/2, -w/2);
    v13[48] = new Vertex(w/2, w/2, -w/2, -w/2, -w/2, -w/2, -w/2);
    v13[49] = new Vertex(w/2, w/2, -w/2, -w/2, -w/2, w/2, -w/2);
    v13[50] = new Vertex(w/2, w/2, -w/2, -w/2, w/2, -w/2, -w/2);
    v13[51] = new Vertex(w/2, w/2, -w/2, -w/2, w/2, w/2, -w/2);
    v13[52] = new Vertex(w/2, w/2, -w/2, w/2, -w/2, -w/2, -w/2);
    v13[53] = new Vertex(w/2, w/2, -w/2, w/2, -w/2, w/2, -w/2);
    v13[54] = new Vertex(w/2, w/2, -w/2, w/2, w/2, -w/2, -w/2);
    v13[55] = new Vertex(w/2, w/2, -w/2, w/2, w/2, w/2, -w/2);
    v13[56] = new Vertex(w/2, w/2, w/2, -w/2, -w/2, -w/2, -w/2);
    v13[57] = new Vertex(w/2, w/2, w/2, -w/2, -w/2, w/2, -w/2);
    v13[58] = new Vertex(w/2, w/2, w/2, -w/2, w/2, -w/2, -w/2);
    v13[59] = new Vertex(w/2, w/2, w/2, -w/2, w/2, w/2, -w/2);
    v13[60] = new Vertex(w/2, w/2, w/2, w/2, -w/2, -w/2, -w/2);
    v13[61] = new Vertex(w/2, w/2, w/2, w/2, -w/2, w/2, -w/2);
    v13[62] = new Vertex(w/2, w/2, w/2, w/2, w/2, -w/2, -w/2);
    v13[63] = new Vertex(w/2, w/2, w/2, w/2, w/2, w/2, -w/2);
    faces.push(new Face(color13, v13[0], v13[1], v13[3], v13[2]));
    faces.push(new Face(color13, v13[0], v13[1], v13[5], v13[4]));
    faces.push(new Face(color13, v13[0], v13[1], v13[9], v13[8]));
    faces.push(new Face(color13, v13[0], v13[1], v13[17], v13[16]));
    faces.push(new Face(color13, v13[0], v13[1], v13[33], v13[32]));
    faces.push(new Face(color13, v13[0], v13[2], v13[6], v13[4]));
    faces.push(new Face(color13, v13[0], v13[2], v13[10], v13[8]));
    faces.push(new Face(color13, v13[0], v13[2], v13[18], v13[16]));
    faces.push(new Face(color13, v13[0], v13[2], v13[34], v13[32]));
    faces.push(new Face(color13, v13[0], v13[4], v13[12], v13[8]));
    faces.push(new Face(color13, v13[0], v13[4], v13[20], v13[16]));
    faces.push(new Face(color13, v13[0], v13[4], v13[36], v13[32]));
    faces.push(new Face(color13, v13[0], v13[8], v13[24], v13[16]));
    faces.push(new Face(color13, v13[0], v13[8], v13[40], v13[32]));
    faces.push(new Face(color13, v13[0], v13[16], v13[48], v13[32]));
    faces.push(new Face(color13, v13[1], v13[3], v13[7], v13[5]));
    faces.push(new Face(color13, v13[1], v13[3], v13[11], v13[9]));
    faces.push(new Face(color13, v13[1], v13[3], v13[19], v13[17]));
    faces.push(new Face(color13, v13[1], v13[3], v13[35], v13[33]));
    faces.push(new Face(color13, v13[1], v13[5], v13[13], v13[9]));
    faces.push(new Face(color13, v13[1], v13[5], v13[21], v13[17]));
    faces.push(new Face(color13, v13[1], v13[5], v13[37], v13[33]));
    faces.push(new Face(color13, v13[1], v13[9], v13[25], v13[17]));
    faces.push(new Face(color13, v13[1], v13[9], v13[41], v13[33]));
    faces.push(new Face(color13, v13[1], v13[17], v13[49], v13[33]));
    faces.push(new Face(color13, v13[2], v13[3], v13[7], v13[6]));
    faces.push(new Face(color13, v13[2], v13[3], v13[11], v13[10]));
    faces.push(new Face(color13, v13[2], v13[3], v13[19], v13[18]));
    faces.push(new Face(color13, v13[2], v13[3], v13[35], v13[34]));
    faces.push(new Face(color13, v13[2], v13[6], v13[14], v13[10]));
    faces.push(new Face(color13, v13[2], v13[6], v13[22], v13[18]));
    faces.push(new Face(color13, v13[2], v13[6], v13[38], v13[34]));
    faces.push(new Face(color13, v13[2], v13[10], v13[26], v13[18]));
    faces.push(new Face(color13, v13[2], v13[10], v13[42], v13[34]));
    faces.push(new Face(color13, v13[2], v13[18], v13[50], v13[34]));
    faces.push(new Face(color13, v13[3], v13[7], v13[15], v13[11]));
    faces.push(new Face(color13, v13[3], v13[7], v13[23], v13[19]));
    faces.push(new Face(color13, v13[3], v13[7], v13[39], v13[35]));
    faces.push(new Face(color13, v13[3], v13[11], v13[27], v13[19]));
    faces.push(new Face(color13, v13[3], v13[11], v13[43], v13[35]));
    faces.push(new Face(color13, v13[3], v13[19], v13[51], v13[35]));
    faces.push(new Face(color13, v13[4], v13[5], v13[7], v13[6]));
    faces.push(new Face(color13, v13[4], v13[5], v13[13], v13[12]));
    faces.push(new Face(color13, v13[4], v13[5], v13[21], v13[20]));
    faces.push(new Face(color13, v13[4], v13[5], v13[37], v13[36]));
    faces.push(new Face(color13, v13[4], v13[6], v13[14], v13[12]));
    faces.push(new Face(color13, v13[4], v13[6], v13[22], v13[20]));
    faces.push(new Face(color13, v13[4], v13[6], v13[38], v13[36]));
    faces.push(new Face(color13, v13[4], v13[12], v13[28], v13[20]));
    faces.push(new Face(color13, v13[4], v13[12], v13[44], v13[36]));
    faces.push(new Face(color13, v13[4], v13[20], v13[52], v13[36]));
    faces.push(new Face(color13, v13[5], v13[7], v13[15], v13[13]));
    faces.push(new Face(color13, v13[5], v13[7], v13[23], v13[21]));
    faces.push(new Face(color13, v13[5], v13[7], v13[39], v13[37]));
    faces.push(new Face(color13, v13[5], v13[13], v13[29], v13[21]));
    faces.push(new Face(color13, v13[5], v13[13], v13[45], v13[37]));
    faces.push(new Face(color13, v13[5], v13[21], v13[53], v13[37]));
    faces.push(new Face(color13, v13[6], v13[7], v13[15], v13[14]));
    faces.push(new Face(color13, v13[6], v13[7], v13[23], v13[22]));
    faces.push(new Face(color13, v13[6], v13[7], v13[39], v13[38]));
    faces.push(new Face(color13, v13[6], v13[14], v13[30], v13[22]));
    faces.push(new Face(color13, v13[6], v13[14], v13[46], v13[38]));
    faces.push(new Face(color13, v13[6], v13[22], v13[54], v13[38]));
    faces.push(new Face(color13, v13[7], v13[15], v13[31], v13[23]));
    faces.push(new Face(color13, v13[7], v13[15], v13[47], v13[39]));
    faces.push(new Face(color13, v13[7], v13[23], v13[55], v13[39]));
    faces.push(new Face(color13, v13[8], v13[9], v13[11], v13[10]));
    faces.push(new Face(color13, v13[8], v13[9], v13[13], v13[12]));
    faces.push(new Face(color13, v13[8], v13[9], v13[25], v13[24]));
    faces.push(new Face(color13, v13[8], v13[9], v13[41], v13[40]));
    faces.push(new Face(color13, v13[8], v13[10], v13[14], v13[12]));
    faces.push(new Face(color13, v13[8], v13[10], v13[26], v13[24]));
    faces.push(new Face(color13, v13[8], v13[10], v13[42], v13[40]));
    faces.push(new Face(color13, v13[8], v13[12], v13[28], v13[24]));
    faces.push(new Face(color13, v13[8], v13[12], v13[44], v13[40]));
    faces.push(new Face(color13, v13[8], v13[24], v13[56], v13[40]));
    faces.push(new Face(color13, v13[9], v13[11], v13[15], v13[13]));
    faces.push(new Face(color13, v13[9], v13[11], v13[27], v13[25]));
    faces.push(new Face(color13, v13[9], v13[11], v13[43], v13[41]));
    faces.push(new Face(color13, v13[9], v13[13], v13[29], v13[25]));
    faces.push(new Face(color13, v13[9], v13[13], v13[45], v13[41]));
    faces.push(new Face(color13, v13[9], v13[25], v13[57], v13[41]));
    faces.push(new Face(color13, v13[10], v13[11], v13[15], v13[14]));
    faces.push(new Face(color13, v13[10], v13[11], v13[27], v13[26]));
    faces.push(new Face(color13, v13[10], v13[11], v13[43], v13[42]));
    faces.push(new Face(color13, v13[10], v13[14], v13[30], v13[26]));
    faces.push(new Face(color13, v13[10], v13[14], v13[46], v13[42]));
    faces.push(new Face(color13, v13[10], v13[26], v13[58], v13[42]));
    faces.push(new Face(color13, v13[11], v13[15], v13[31], v13[27]));
    faces.push(new Face(color13, v13[11], v13[15], v13[47], v13[43]));
    faces.push(new Face(color13, v13[11], v13[27], v13[59], v13[43]));
    faces.push(new Face(color13, v13[12], v13[13], v13[15], v13[14]));
    faces.push(new Face(color13, v13[12], v13[13], v13[29], v13[28]));
    faces.push(new Face(color13, v13[12], v13[13], v13[45], v13[44]));
    faces.push(new Face(color13, v13[12], v13[14], v13[30], v13[28]));
    faces.push(new Face(color13, v13[12], v13[14], v13[46], v13[44]));
    faces.push(new Face(color13, v13[12], v13[28], v13[60], v13[44]));
    faces.push(new Face(color13, v13[13], v13[15], v13[31], v13[29]));
    faces.push(new Face(color13, v13[13], v13[15], v13[47], v13[45]));
    faces.push(new Face(color13, v13[13], v13[29], v13[61], v13[45]));
    faces.push(new Face(color13, v13[14], v13[15], v13[31], v13[30]));
    faces.push(new Face(color13, v13[14], v13[15], v13[47], v13[46]));
    faces.push(new Face(color13, v13[14], v13[30], v13[62], v13[46]));
    faces.push(new Face(color13, v13[15], v13[31], v13[63], v13[47]));
    faces.push(new Face(color13, v13[16], v13[17], v13[19], v13[18]));
    faces.push(new Face(color13, v13[16], v13[17], v13[21], v13[20]));
    faces.push(new Face(color13, v13[16], v13[17], v13[25], v13[24]));
    faces.push(new Face(color13, v13[16], v13[17], v13[49], v13[48]));
    faces.push(new Face(color13, v13[16], v13[18], v13[22], v13[20]));
    faces.push(new Face(color13, v13[16], v13[18], v13[26], v13[24]));
    faces.push(new Face(color13, v13[16], v13[18], v13[50], v13[48]));
    faces.push(new Face(color13, v13[16], v13[20], v13[28], v13[24]));
    faces.push(new Face(color13, v13[16], v13[20], v13[52], v13[48]));
    faces.push(new Face(color13, v13[16], v13[24], v13[56], v13[48]));
    faces.push(new Face(color13, v13[17], v13[19], v13[23], v13[21]));
    faces.push(new Face(color13, v13[17], v13[19], v13[27], v13[25]));
    faces.push(new Face(color13, v13[17], v13[19], v13[51], v13[49]));
    faces.push(new Face(color13, v13[17], v13[21], v13[29], v13[25]));
    faces.push(new Face(color13, v13[17], v13[21], v13[53], v13[49]));
    faces.push(new Face(color13, v13[17], v13[25], v13[57], v13[49]));
    faces.push(new Face(color13, v13[18], v13[19], v13[23], v13[22]));
    faces.push(new Face(color13, v13[18], v13[19], v13[27], v13[26]));
    faces.push(new Face(color13, v13[18], v13[19], v13[51], v13[50]));
    faces.push(new Face(color13, v13[18], v13[22], v13[30], v13[26]));
    faces.push(new Face(color13, v13[18], v13[22], v13[54], v13[50]));
    faces.push(new Face(color13, v13[18], v13[26], v13[58], v13[50]));
    faces.push(new Face(color13, v13[19], v13[23], v13[31], v13[27]));
    faces.push(new Face(color13, v13[19], v13[23], v13[55], v13[51]));
    faces.push(new Face(color13, v13[19], v13[27], v13[59], v13[51]));
    faces.push(new Face(color13, v13[20], v13[21], v13[23], v13[22]));
    faces.push(new Face(color13, v13[20], v13[21], v13[29], v13[28]));
    faces.push(new Face(color13, v13[20], v13[21], v13[53], v13[52]));
    faces.push(new Face(color13, v13[20], v13[22], v13[30], v13[28]));
    faces.push(new Face(color13, v13[20], v13[22], v13[54], v13[52]));
    faces.push(new Face(color13, v13[20], v13[28], v13[60], v13[52]));
    faces.push(new Face(color13, v13[21], v13[23], v13[31], v13[29]));
    faces.push(new Face(color13, v13[21], v13[23], v13[55], v13[53]));
    faces.push(new Face(color13, v13[21], v13[29], v13[61], v13[53]));
    faces.push(new Face(color13, v13[22], v13[23], v13[31], v13[30]));
    faces.push(new Face(color13, v13[22], v13[23], v13[55], v13[54]));
    faces.push(new Face(color13, v13[22], v13[30], v13[62], v13[54]));
    faces.push(new Face(color13, v13[23], v13[31], v13[63], v13[55]));
    faces.push(new Face(color13, v13[24], v13[25], v13[27], v13[26]));
    faces.push(new Face(color13, v13[24], v13[25], v13[29], v13[28]));
    faces.push(new Face(color13, v13[24], v13[25], v13[57], v13[56]));
    faces.push(new Face(color13, v13[24], v13[26], v13[30], v13[28]));
    faces.push(new Face(color13, v13[24], v13[26], v13[58], v13[56]));
    faces.push(new Face(color13, v13[24], v13[28], v13[60], v13[56]));
    faces.push(new Face(color13, v13[25], v13[27], v13[31], v13[29]));
    faces.push(new Face(color13, v13[25], v13[27], v13[59], v13[57]));
    faces.push(new Face(color13, v13[25], v13[29], v13[61], v13[57]));
    faces.push(new Face(color13, v13[26], v13[27], v13[31], v13[30]));
    faces.push(new Face(color13, v13[26], v13[27], v13[59], v13[58]));
    faces.push(new Face(color13, v13[26], v13[30], v13[62], v13[58]));
    faces.push(new Face(color13, v13[27], v13[31], v13[63], v13[59]));
    faces.push(new Face(color13, v13[28], v13[29], v13[31], v13[30]));
    faces.push(new Face(color13, v13[28], v13[29], v13[61], v13[60]));
    faces.push(new Face(color13, v13[28], v13[30], v13[62], v13[60]));
    faces.push(new Face(color13, v13[29], v13[31], v13[63], v13[61]));
    faces.push(new Face(color13, v13[30], v13[31], v13[63], v13[62]));
    faces.push(new Face(color13, v13[32], v13[33], v13[35], v13[34]));
    faces.push(new Face(color13, v13[32], v13[33], v13[37], v13[36]));
    faces.push(new Face(color13, v13[32], v13[33], v13[41], v13[40]));
    faces.push(new Face(color13, v13[32], v13[33], v13[49], v13[48]));
    faces.push(new Face(color13, v13[32], v13[34], v13[38], v13[36]));
    faces.push(new Face(color13, v13[32], v13[34], v13[42], v13[40]));
    faces.push(new Face(color13, v13[32], v13[34], v13[50], v13[48]));
    faces.push(new Face(color13, v13[32], v13[36], v13[44], v13[40]));
    faces.push(new Face(color13, v13[32], v13[36], v13[52], v13[48]));
    faces.push(new Face(color13, v13[32], v13[40], v13[56], v13[48]));
    faces.push(new Face(color13, v13[33], v13[35], v13[39], v13[37]));
    faces.push(new Face(color13, v13[33], v13[35], v13[43], v13[41]));
    faces.push(new Face(color13, v13[33], v13[35], v13[51], v13[49]));
    faces.push(new Face(color13, v13[33], v13[37], v13[45], v13[41]));
    faces.push(new Face(color13, v13[33], v13[37], v13[53], v13[49]));
    faces.push(new Face(color13, v13[33], v13[41], v13[57], v13[49]));
    faces.push(new Face(color13, v13[34], v13[35], v13[39], v13[38]));
    faces.push(new Face(color13, v13[34], v13[35], v13[43], v13[42]));
    faces.push(new Face(color13, v13[34], v13[35], v13[51], v13[50]));
    faces.push(new Face(color13, v13[34], v13[38], v13[46], v13[42]));
    faces.push(new Face(color13, v13[34], v13[38], v13[54], v13[50]));
    faces.push(new Face(color13, v13[34], v13[42], v13[58], v13[50]));
    faces.push(new Face(color13, v13[35], v13[39], v13[47], v13[43]));
    faces.push(new Face(color13, v13[35], v13[39], v13[55], v13[51]));
    faces.push(new Face(color13, v13[35], v13[43], v13[59], v13[51]));
    faces.push(new Face(color13, v13[36], v13[37], v13[39], v13[38]));
    faces.push(new Face(color13, v13[36], v13[37], v13[45], v13[44]));
    faces.push(new Face(color13, v13[36], v13[37], v13[53], v13[52]));
    faces.push(new Face(color13, v13[36], v13[38], v13[46], v13[44]));
    faces.push(new Face(color13, v13[36], v13[38], v13[54], v13[52]));
    faces.push(new Face(color13, v13[36], v13[44], v13[60], v13[52]));
    faces.push(new Face(color13, v13[37], v13[39], v13[47], v13[45]));
    faces.push(new Face(color13, v13[37], v13[39], v13[55], v13[53]));
    faces.push(new Face(color13, v13[37], v13[45], v13[61], v13[53]));
    faces.push(new Face(color13, v13[38], v13[39], v13[47], v13[46]));
    faces.push(new Face(color13, v13[38], v13[39], v13[55], v13[54]));
    faces.push(new Face(color13, v13[38], v13[46], v13[62], v13[54]));
    faces.push(new Face(color13, v13[39], v13[47], v13[63], v13[55]));
    faces.push(new Face(color13, v13[40], v13[41], v13[43], v13[42]));
    faces.push(new Face(color13, v13[40], v13[41], v13[45], v13[44]));
    faces.push(new Face(color13, v13[40], v13[41], v13[57], v13[56]));
    faces.push(new Face(color13, v13[40], v13[42], v13[46], v13[44]));
    faces.push(new Face(color13, v13[40], v13[42], v13[58], v13[56]));
    faces.push(new Face(color13, v13[40], v13[44], v13[60], v13[56]));
    faces.push(new Face(color13, v13[41], v13[43], v13[47], v13[45]));
    faces.push(new Face(color13, v13[41], v13[43], v13[59], v13[57]));
    faces.push(new Face(color13, v13[41], v13[45], v13[61], v13[57]));
    faces.push(new Face(color13, v13[42], v13[43], v13[47], v13[46]));
    faces.push(new Face(color13, v13[42], v13[43], v13[59], v13[58]));
    faces.push(new Face(color13, v13[42], v13[46], v13[62], v13[58]));
    faces.push(new Face(color13, v13[43], v13[47], v13[63], v13[59]));
    faces.push(new Face(color13, v13[44], v13[45], v13[47], v13[46]));
    faces.push(new Face(color13, v13[44], v13[45], v13[61], v13[60]));
    faces.push(new Face(color13, v13[44], v13[46], v13[62], v13[60]));
    faces.push(new Face(color13, v13[45], v13[47], v13[63], v13[61]));
    faces.push(new Face(color13, v13[46], v13[47], v13[63], v13[62]));
    faces.push(new Face(color13, v13[48], v13[49], v13[51], v13[50]));
    faces.push(new Face(color13, v13[48], v13[49], v13[53], v13[52]));
    faces.push(new Face(color13, v13[48], v13[49], v13[57], v13[56]));
    faces.push(new Face(color13, v13[48], v13[50], v13[54], v13[52]));
    faces.push(new Face(color13, v13[48], v13[50], v13[58], v13[56]));
    faces.push(new Face(color13, v13[48], v13[52], v13[60], v13[56]));
    faces.push(new Face(color13, v13[49], v13[51], v13[55], v13[53]));
    faces.push(new Face(color13, v13[49], v13[51], v13[59], v13[57]));
    faces.push(new Face(color13, v13[49], v13[53], v13[61], v13[57]));
    faces.push(new Face(color13, v13[50], v13[51], v13[55], v13[54]));
    faces.push(new Face(color13, v13[50], v13[51], v13[59], v13[58]));
    faces.push(new Face(color13, v13[50], v13[54], v13[62], v13[58]));
    faces.push(new Face(color13, v13[51], v13[55], v13[63], v13[59]));
    faces.push(new Face(color13, v13[52], v13[53], v13[55], v13[54]));
    faces.push(new Face(color13, v13[52], v13[53], v13[61], v13[60]));
    faces.push(new Face(color13, v13[52], v13[54], v13[62], v13[60]));
    faces.push(new Face(color13, v13[53], v13[55], v13[63], v13[61]));
    faces.push(new Face(color13, v13[54], v13[55], v13[63], v13[62]));
    faces.push(new Face(color13, v13[56], v13[57], v13[59], v13[58]));
    faces.push(new Face(color13, v13[56], v13[57], v13[61], v13[60]));
    faces.push(new Face(color13, v13[56], v13[58], v13[62], v13[60]));
    faces.push(new Face(color13, v13[57], v13[59], v13[63], v13[61]));
    faces.push(new Face(color13, v13[58], v13[59], v13[63], v13[62]));
    faces.push(new Face(color13, v13[60], v13[61], v13[63], v13[62]));
    for (let i = 0; i < v13.length; i++) {
        v13[i].rotate(r);
        v13[i].project();
    }

    v14[0] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, -w/2, -w/2, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[1] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, -w/2, -w/2, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[2] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, -w/2, -w/2, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[3] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, -w/2, -w/2, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[4] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, -w/2, -w/2, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[5] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, -w/2, -w/2, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[6] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, -w/2, -w/2, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[7] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, -w/2, -w/2, w/2, w/2, w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[8] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, -w/2, w/2, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[9] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, -w/2, w/2, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[10] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, -w/2, w/2, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[11] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, -w/2, w/2, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[12] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, -w/2, w/2, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[13] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, -w/2, w/2, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[14] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, -w/2, w/2, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[15] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, -w/2, w/2, w/2, w/2, w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[16] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, w/2, -w/2, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[17] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, w/2, -w/2, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[18] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, w/2, -w/2, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[19] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, w/2, -w/2, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[20] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, w/2, -w/2, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[21] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, w/2, -w/2, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[22] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, w/2, -w/2, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[23] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, w/2, -w/2, w/2, w/2, w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[24] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, w/2, w/2, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[25] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, w/2, w/2, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[26] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, w/2, w/2, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[27] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, w/2, w/2, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[28] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, w/2, w/2, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[29] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, w/2, w/2, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[30] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, w/2, w/2, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[31] = new Vertex(w/2+Math.sin(theta)*w-Math.cos(theta*2)*w, w/2, w/2, w/2, w/2, w/2, -w/2+Math.cos(theta)*w+Math.sin(theta*2)*w);
    v14[32] = new Vertex(w/2+Math.sin(theta)*w, -w/2, -w/2, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v14[33] = new Vertex(w/2+Math.sin(theta)*w, -w/2, -w/2, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v14[34] = new Vertex(w/2+Math.sin(theta)*w, -w/2, -w/2, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v14[35] = new Vertex(w/2+Math.sin(theta)*w, -w/2, -w/2, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v14[36] = new Vertex(w/2+Math.sin(theta)*w, -w/2, -w/2, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v14[37] = new Vertex(w/2+Math.sin(theta)*w, -w/2, -w/2, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v14[38] = new Vertex(w/2+Math.sin(theta)*w, -w/2, -w/2, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v14[39] = new Vertex(w/2+Math.sin(theta)*w, -w/2, -w/2, w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v14[40] = new Vertex(w/2+Math.sin(theta)*w, -w/2, w/2, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v14[41] = new Vertex(w/2+Math.sin(theta)*w, -w/2, w/2, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v14[42] = new Vertex(w/2+Math.sin(theta)*w, -w/2, w/2, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v14[43] = new Vertex(w/2+Math.sin(theta)*w, -w/2, w/2, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v14[44] = new Vertex(w/2+Math.sin(theta)*w, -w/2, w/2, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v14[45] = new Vertex(w/2+Math.sin(theta)*w, -w/2, w/2, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v14[46] = new Vertex(w/2+Math.sin(theta)*w, -w/2, w/2, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v14[47] = new Vertex(w/2+Math.sin(theta)*w, -w/2, w/2, w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v14[48] = new Vertex(w/2+Math.sin(theta)*w, w/2, -w/2, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v14[49] = new Vertex(w/2+Math.sin(theta)*w, w/2, -w/2, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v14[50] = new Vertex(w/2+Math.sin(theta)*w, w/2, -w/2, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v14[51] = new Vertex(w/2+Math.sin(theta)*w, w/2, -w/2, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v14[52] = new Vertex(w/2+Math.sin(theta)*w, w/2, -w/2, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v14[53] = new Vertex(w/2+Math.sin(theta)*w, w/2, -w/2, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v14[54] = new Vertex(w/2+Math.sin(theta)*w, w/2, -w/2, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v14[55] = new Vertex(w/2+Math.sin(theta)*w, w/2, -w/2, w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v14[56] = new Vertex(w/2+Math.sin(theta)*w, w/2, w/2, -w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v14[57] = new Vertex(w/2+Math.sin(theta)*w, w/2, w/2, -w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v14[58] = new Vertex(w/2+Math.sin(theta)*w, w/2, w/2, -w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v14[59] = new Vertex(w/2+Math.sin(theta)*w, w/2, w/2, -w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    v14[60] = new Vertex(w/2+Math.sin(theta)*w, w/2, w/2, w/2, -w/2, -w/2, -w/2+Math.cos(theta)*w);
    v14[61] = new Vertex(w/2+Math.sin(theta)*w, w/2, w/2, w/2, -w/2, w/2, -w/2+Math.cos(theta)*w);
    v14[62] = new Vertex(w/2+Math.sin(theta)*w, w/2, w/2, w/2, w/2, -w/2, -w/2+Math.cos(theta)*w);
    v14[63] = new Vertex(w/2+Math.sin(theta)*w, w/2, w/2, w/2, w/2, w/2, -w/2+Math.cos(theta)*w);
    faces.push(new Face(color14, v14[0], v14[1], v14[3], v14[2]));
    faces.push(new Face(color14, v14[0], v14[1], v14[5], v14[4]));
    faces.push(new Face(color14, v14[0], v14[1], v14[9], v14[8]));
    faces.push(new Face(color14, v14[0], v14[1], v14[17], v14[16]));
    faces.push(new Face(color14, v14[0], v14[1], v14[33], v14[32]));
    faces.push(new Face(color14, v14[0], v14[2], v14[6], v14[4]));
    faces.push(new Face(color14, v14[0], v14[2], v14[10], v14[8]));
    faces.push(new Face(color14, v14[0], v14[2], v14[18], v14[16]));
    faces.push(new Face(color14, v14[0], v14[2], v14[34], v14[32]));
    faces.push(new Face(color14, v14[0], v14[4], v14[12], v14[8]));
    faces.push(new Face(color14, v14[0], v14[4], v14[20], v14[16]));
    faces.push(new Face(color14, v14[0], v14[4], v14[36], v14[32]));
    faces.push(new Face(color14, v14[0], v14[8], v14[24], v14[16]));
    faces.push(new Face(color14, v14[0], v14[8], v14[40], v14[32]));
    faces.push(new Face(color14, v14[0], v14[16], v14[48], v14[32]));
    faces.push(new Face(color14, v14[1], v14[3], v14[7], v14[5]));
    faces.push(new Face(color14, v14[1], v14[3], v14[11], v14[9]));
    faces.push(new Face(color14, v14[1], v14[3], v14[19], v14[17]));
    faces.push(new Face(color14, v14[1], v14[3], v14[35], v14[33]));
    faces.push(new Face(color14, v14[1], v14[5], v14[13], v14[9]));
    faces.push(new Face(color14, v14[1], v14[5], v14[21], v14[17]));
    faces.push(new Face(color14, v14[1], v14[5], v14[37], v14[33]));
    faces.push(new Face(color14, v14[1], v14[9], v14[25], v14[17]));
    faces.push(new Face(color14, v14[1], v14[9], v14[41], v14[33]));
    faces.push(new Face(color14, v14[1], v14[17], v14[49], v14[33]));
    faces.push(new Face(color14, v14[2], v14[3], v14[7], v14[6]));
    faces.push(new Face(color14, v14[2], v14[3], v14[11], v14[10]));
    faces.push(new Face(color14, v14[2], v14[3], v14[19], v14[18]));
    faces.push(new Face(color14, v14[2], v14[3], v14[35], v14[34]));
    faces.push(new Face(color14, v14[2], v14[6], v14[14], v14[10]));
    faces.push(new Face(color14, v14[2], v14[6], v14[22], v14[18]));
    faces.push(new Face(color14, v14[2], v14[6], v14[38], v14[34]));
    faces.push(new Face(color14, v14[2], v14[10], v14[26], v14[18]));
    faces.push(new Face(color14, v14[2], v14[10], v14[42], v14[34]));
    faces.push(new Face(color14, v14[2], v14[18], v14[50], v14[34]));
    faces.push(new Face(color14, v14[3], v14[7], v14[15], v14[11]));
    faces.push(new Face(color14, v14[3], v14[7], v14[23], v14[19]));
    faces.push(new Face(color14, v14[3], v14[7], v14[39], v14[35]));
    faces.push(new Face(color14, v14[3], v14[11], v14[27], v14[19]));
    faces.push(new Face(color14, v14[3], v14[11], v14[43], v14[35]));
    faces.push(new Face(color14, v14[3], v14[19], v14[51], v14[35]));
    faces.push(new Face(color14, v14[4], v14[5], v14[7], v14[6]));
    faces.push(new Face(color14, v14[4], v14[5], v14[13], v14[12]));
    faces.push(new Face(color14, v14[4], v14[5], v14[21], v14[20]));
    faces.push(new Face(color14, v14[4], v14[5], v14[37], v14[36]));
    faces.push(new Face(color14, v14[4], v14[6], v14[14], v14[12]));
    faces.push(new Face(color14, v14[4], v14[6], v14[22], v14[20]));
    faces.push(new Face(color14, v14[4], v14[6], v14[38], v14[36]));
    faces.push(new Face(color14, v14[4], v14[12], v14[28], v14[20]));
    faces.push(new Face(color14, v14[4], v14[12], v14[44], v14[36]));
    faces.push(new Face(color14, v14[4], v14[20], v14[52], v14[36]));
    faces.push(new Face(color14, v14[5], v14[7], v14[15], v14[13]));
    faces.push(new Face(color14, v14[5], v14[7], v14[23], v14[21]));
    faces.push(new Face(color14, v14[5], v14[7], v14[39], v14[37]));
    faces.push(new Face(color14, v14[5], v14[13], v14[29], v14[21]));
    faces.push(new Face(color14, v14[5], v14[13], v14[45], v14[37]));
    faces.push(new Face(color14, v14[5], v14[21], v14[53], v14[37]));
    faces.push(new Face(color14, v14[6], v14[7], v14[15], v14[14]));
    faces.push(new Face(color14, v14[6], v14[7], v14[23], v14[22]));
    faces.push(new Face(color14, v14[6], v14[7], v14[39], v14[38]));
    faces.push(new Face(color14, v14[6], v14[14], v14[30], v14[22]));
    faces.push(new Face(color14, v14[6], v14[14], v14[46], v14[38]));
    faces.push(new Face(color14, v14[6], v14[22], v14[54], v14[38]));
    faces.push(new Face(color14, v14[7], v14[15], v14[31], v14[23]));
    faces.push(new Face(color14, v14[7], v14[15], v14[47], v14[39]));
    faces.push(new Face(color14, v14[7], v14[23], v14[55], v14[39]));
    faces.push(new Face(color14, v14[8], v14[9], v14[11], v14[10]));
    faces.push(new Face(color14, v14[8], v14[9], v14[13], v14[12]));
    faces.push(new Face(color14, v14[8], v14[9], v14[25], v14[24]));
    faces.push(new Face(color14, v14[8], v14[9], v14[41], v14[40]));
    faces.push(new Face(color14, v14[8], v14[10], v14[14], v14[12]));
    faces.push(new Face(color14, v14[8], v14[10], v14[26], v14[24]));
    faces.push(new Face(color14, v14[8], v14[10], v14[42], v14[40]));
    faces.push(new Face(color14, v14[8], v14[12], v14[28], v14[24]));
    faces.push(new Face(color14, v14[8], v14[12], v14[44], v14[40]));
    faces.push(new Face(color14, v14[8], v14[24], v14[56], v14[40]));
    faces.push(new Face(color14, v14[9], v14[11], v14[15], v14[13]));
    faces.push(new Face(color14, v14[9], v14[11], v14[27], v14[25]));
    faces.push(new Face(color14, v14[9], v14[11], v14[43], v14[41]));
    faces.push(new Face(color14, v14[9], v14[13], v14[29], v14[25]));
    faces.push(new Face(color14, v14[9], v14[13], v14[45], v14[41]));
    faces.push(new Face(color14, v14[9], v14[25], v14[57], v14[41]));
    faces.push(new Face(color14, v14[10], v14[11], v14[15], v14[14]));
    faces.push(new Face(color14, v14[10], v14[11], v14[27], v14[26]));
    faces.push(new Face(color14, v14[10], v14[11], v14[43], v14[42]));
    faces.push(new Face(color14, v14[10], v14[14], v14[30], v14[26]));
    faces.push(new Face(color14, v14[10], v14[14], v14[46], v14[42]));
    faces.push(new Face(color14, v14[10], v14[26], v14[58], v14[42]));
    faces.push(new Face(color14, v14[11], v14[15], v14[31], v14[27]));
    faces.push(new Face(color14, v14[11], v14[15], v14[47], v14[43]));
    faces.push(new Face(color14, v14[11], v14[27], v14[59], v14[43]));
    faces.push(new Face(color14, v14[12], v14[13], v14[15], v14[14]));
    faces.push(new Face(color14, v14[12], v14[13], v14[29], v14[28]));
    faces.push(new Face(color14, v14[12], v14[13], v14[45], v14[44]));
    faces.push(new Face(color14, v14[12], v14[14], v14[30], v14[28]));
    faces.push(new Face(color14, v14[12], v14[14], v14[46], v14[44]));
    faces.push(new Face(color14, v14[12], v14[28], v14[60], v14[44]));
    faces.push(new Face(color14, v14[13], v14[15], v14[31], v14[29]));
    faces.push(new Face(color14, v14[13], v14[15], v14[47], v14[45]));
    faces.push(new Face(color14, v14[13], v14[29], v14[61], v14[45]));
    faces.push(new Face(color14, v14[14], v14[15], v14[31], v14[30]));
    faces.push(new Face(color14, v14[14], v14[15], v14[47], v14[46]));
    faces.push(new Face(color14, v14[14], v14[30], v14[62], v14[46]));
    faces.push(new Face(color14, v14[15], v14[31], v14[63], v14[47]));
    faces.push(new Face(color14, v14[16], v14[17], v14[19], v14[18]));
    faces.push(new Face(color14, v14[16], v14[17], v14[21], v14[20]));
    faces.push(new Face(color14, v14[16], v14[17], v14[25], v14[24]));
    faces.push(new Face(color14, v14[16], v14[17], v14[49], v14[48]));
    faces.push(new Face(color14, v14[16], v14[18], v14[22], v14[20]));
    faces.push(new Face(color14, v14[16], v14[18], v14[26], v14[24]));
    faces.push(new Face(color14, v14[16], v14[18], v14[50], v14[48]));
    faces.push(new Face(color14, v14[16], v14[20], v14[28], v14[24]));
    faces.push(new Face(color14, v14[16], v14[20], v14[52], v14[48]));
    faces.push(new Face(color14, v14[16], v14[24], v14[56], v14[48]));
    faces.push(new Face(color14, v14[17], v14[19], v14[23], v14[21]));
    faces.push(new Face(color14, v14[17], v14[19], v14[27], v14[25]));
    faces.push(new Face(color14, v14[17], v14[19], v14[51], v14[49]));
    faces.push(new Face(color14, v14[17], v14[21], v14[29], v14[25]));
    faces.push(new Face(color14, v14[17], v14[21], v14[53], v14[49]));
    faces.push(new Face(color14, v14[17], v14[25], v14[57], v14[49]));
    faces.push(new Face(color14, v14[18], v14[19], v14[23], v14[22]));
    faces.push(new Face(color14, v14[18], v14[19], v14[27], v14[26]));
    faces.push(new Face(color14, v14[18], v14[19], v14[51], v14[50]));
    faces.push(new Face(color14, v14[18], v14[22], v14[30], v14[26]));
    faces.push(new Face(color14, v14[18], v14[22], v14[54], v14[50]));
    faces.push(new Face(color14, v14[18], v14[26], v14[58], v14[50]));
    faces.push(new Face(color14, v14[19], v14[23], v14[31], v14[27]));
    faces.push(new Face(color14, v14[19], v14[23], v14[55], v14[51]));
    faces.push(new Face(color14, v14[19], v14[27], v14[59], v14[51]));
    faces.push(new Face(color14, v14[20], v14[21], v14[23], v14[22]));
    faces.push(new Face(color14, v14[20], v14[21], v14[29], v14[28]));
    faces.push(new Face(color14, v14[20], v14[21], v14[53], v14[52]));
    faces.push(new Face(color14, v14[20], v14[22], v14[30], v14[28]));
    faces.push(new Face(color14, v14[20], v14[22], v14[54], v14[52]));
    faces.push(new Face(color14, v14[20], v14[28], v14[60], v14[52]));
    faces.push(new Face(color14, v14[21], v14[23], v14[31], v14[29]));
    faces.push(new Face(color14, v14[21], v14[23], v14[55], v14[53]));
    faces.push(new Face(color14, v14[21], v14[29], v14[61], v14[53]));
    faces.push(new Face(color14, v14[22], v14[23], v14[31], v14[30]));
    faces.push(new Face(color14, v14[22], v14[23], v14[55], v14[54]));
    faces.push(new Face(color14, v14[22], v14[30], v14[62], v14[54]));
    faces.push(new Face(color14, v14[23], v14[31], v14[63], v14[55]));
    faces.push(new Face(color14, v14[24], v14[25], v14[27], v14[26]));
    faces.push(new Face(color14, v14[24], v14[25], v14[29], v14[28]));
    faces.push(new Face(color14, v14[24], v14[25], v14[57], v14[56]));
    faces.push(new Face(color14, v14[24], v14[26], v14[30], v14[28]));
    faces.push(new Face(color14, v14[24], v14[26], v14[58], v14[56]));
    faces.push(new Face(color14, v14[24], v14[28], v14[60], v14[56]));
    faces.push(new Face(color14, v14[25], v14[27], v14[31], v14[29]));
    faces.push(new Face(color14, v14[25], v14[27], v14[59], v14[57]));
    faces.push(new Face(color14, v14[25], v14[29], v14[61], v14[57]));
    faces.push(new Face(color14, v14[26], v14[27], v14[31], v14[30]));
    faces.push(new Face(color14, v14[26], v14[27], v14[59], v14[58]));
    faces.push(new Face(color14, v14[26], v14[30], v14[62], v14[58]));
    faces.push(new Face(color14, v14[27], v14[31], v14[63], v14[59]));
    faces.push(new Face(color14, v14[28], v14[29], v14[31], v14[30]));
    faces.push(new Face(color14, v14[28], v14[29], v14[61], v14[60]));
    faces.push(new Face(color14, v14[28], v14[30], v14[62], v14[60]));
    faces.push(new Face(color14, v14[29], v14[31], v14[63], v14[61]));
    faces.push(new Face(color14, v14[30], v14[31], v14[63], v14[62]));
    faces.push(new Face(color14, v14[32], v14[33], v14[35], v14[34]));
    faces.push(new Face(color14, v14[32], v14[33], v14[37], v14[36]));
    faces.push(new Face(color14, v14[32], v14[33], v14[41], v14[40]));
    faces.push(new Face(color14, v14[32], v14[33], v14[49], v14[48]));
    faces.push(new Face(color14, v14[32], v14[34], v14[38], v14[36]));
    faces.push(new Face(color14, v14[32], v14[34], v14[42], v14[40]));
    faces.push(new Face(color14, v14[32], v14[34], v14[50], v14[48]));
    faces.push(new Face(color14, v14[32], v14[36], v14[44], v14[40]));
    faces.push(new Face(color14, v14[32], v14[36], v14[52], v14[48]));
    faces.push(new Face(color14, v14[32], v14[40], v14[56], v14[48]));
    faces.push(new Face(color14, v14[33], v14[35], v14[39], v14[37]));
    faces.push(new Face(color14, v14[33], v14[35], v14[43], v14[41]));
    faces.push(new Face(color14, v14[33], v14[35], v14[51], v14[49]));
    faces.push(new Face(color14, v14[33], v14[37], v14[45], v14[41]));
    faces.push(new Face(color14, v14[33], v14[37], v14[53], v14[49]));
    faces.push(new Face(color14, v14[33], v14[41], v14[57], v14[49]));
    faces.push(new Face(color14, v14[34], v14[35], v14[39], v14[38]));
    faces.push(new Face(color14, v14[34], v14[35], v14[43], v14[42]));
    faces.push(new Face(color14, v14[34], v14[35], v14[51], v14[50]));
    faces.push(new Face(color14, v14[34], v14[38], v14[46], v14[42]));
    faces.push(new Face(color14, v14[34], v14[38], v14[54], v14[50]));
    faces.push(new Face(color14, v14[34], v14[42], v14[58], v14[50]));
    faces.push(new Face(color14, v14[35], v14[39], v14[47], v14[43]));
    faces.push(new Face(color14, v14[35], v14[39], v14[55], v14[51]));
    faces.push(new Face(color14, v14[35], v14[43], v14[59], v14[51]));
    faces.push(new Face(color14, v14[36], v14[37], v14[39], v14[38]));
    faces.push(new Face(color14, v14[36], v14[37], v14[45], v14[44]));
    faces.push(new Face(color14, v14[36], v14[37], v14[53], v14[52]));
    faces.push(new Face(color14, v14[36], v14[38], v14[46], v14[44]));
    faces.push(new Face(color14, v14[36], v14[38], v14[54], v14[52]));
    faces.push(new Face(color14, v14[36], v14[44], v14[60], v14[52]));
    faces.push(new Face(color14, v14[37], v14[39], v14[47], v14[45]));
    faces.push(new Face(color14, v14[37], v14[39], v14[55], v14[53]));
    faces.push(new Face(color14, v14[37], v14[45], v14[61], v14[53]));
    faces.push(new Face(color14, v14[38], v14[39], v14[47], v14[46]));
    faces.push(new Face(color14, v14[38], v14[39], v14[55], v14[54]));
    faces.push(new Face(color14, v14[38], v14[46], v14[62], v14[54]));
    faces.push(new Face(color14, v14[39], v14[47], v14[63], v14[55]));
    faces.push(new Face(color14, v14[40], v14[41], v14[43], v14[42]));
    faces.push(new Face(color14, v14[40], v14[41], v14[45], v14[44]));
    faces.push(new Face(color14, v14[40], v14[41], v14[57], v14[56]));
    faces.push(new Face(color14, v14[40], v14[42], v14[46], v14[44]));
    faces.push(new Face(color14, v14[40], v14[42], v14[58], v14[56]));
    faces.push(new Face(color14, v14[40], v14[44], v14[60], v14[56]));
    faces.push(new Face(color14, v14[41], v14[43], v14[47], v14[45]));
    faces.push(new Face(color14, v14[41], v14[43], v14[59], v14[57]));
    faces.push(new Face(color14, v14[41], v14[45], v14[61], v14[57]));
    faces.push(new Face(color14, v14[42], v14[43], v14[47], v14[46]));
    faces.push(new Face(color14, v14[42], v14[43], v14[59], v14[58]));
    faces.push(new Face(color14, v14[42], v14[46], v14[62], v14[58]));
    faces.push(new Face(color14, v14[43], v14[47], v14[63], v14[59]));
    faces.push(new Face(color14, v14[44], v14[45], v14[47], v14[46]));
    faces.push(new Face(color14, v14[44], v14[45], v14[61], v14[60]));
    faces.push(new Face(color14, v14[44], v14[46], v14[62], v14[60]));
    faces.push(new Face(color14, v14[45], v14[47], v14[63], v14[61]));
    faces.push(new Face(color14, v14[46], v14[47], v14[63], v14[62]));
    faces.push(new Face(color14, v14[48], v14[49], v14[51], v14[50]));
    faces.push(new Face(color14, v14[48], v14[49], v14[53], v14[52]));
    faces.push(new Face(color14, v14[48], v14[49], v14[57], v14[56]));
    faces.push(new Face(color14, v14[48], v14[50], v14[54], v14[52]));
    faces.push(new Face(color14, v14[48], v14[50], v14[58], v14[56]));
    faces.push(new Face(color14, v14[48], v14[52], v14[60], v14[56]));
    faces.push(new Face(color14, v14[49], v14[51], v14[55], v14[53]));
    faces.push(new Face(color14, v14[49], v14[51], v14[59], v14[57]));
    faces.push(new Face(color14, v14[49], v14[53], v14[61], v14[57]));
    faces.push(new Face(color14, v14[50], v14[51], v14[55], v14[54]));
    faces.push(new Face(color14, v14[50], v14[51], v14[59], v14[58]));
    faces.push(new Face(color14, v14[50], v14[54], v14[62], v14[58]));
    faces.push(new Face(color14, v14[51], v14[55], v14[63], v14[59]));
    faces.push(new Face(color14, v14[52], v14[53], v14[55], v14[54]));
    faces.push(new Face(color14, v14[52], v14[53], v14[61], v14[60]));
    faces.push(new Face(color14, v14[52], v14[54], v14[62], v14[60]));
    faces.push(new Face(color14, v14[53], v14[55], v14[63], v14[61]));
    faces.push(new Face(color14, v14[54], v14[55], v14[63], v14[62]));
    faces.push(new Face(color14, v14[56], v14[57], v14[59], v14[58]));
    faces.push(new Face(color14, v14[56], v14[57], v14[61], v14[60]));
    faces.push(new Face(color14, v14[56], v14[58], v14[62], v14[60]));
    faces.push(new Face(color14, v14[57], v14[59], v14[63], v14[61]));
    faces.push(new Face(color14, v14[58], v14[59], v14[63], v14[62]));
    faces.push(new Face(color14, v14[60], v14[61], v14[63], v14[62]));
    for (let i = 0; i < v14.length; i++) {
        v14[i].rotate(r);
        v14[i].project();
    }
	
	
	for(let i=0; i<faces.length; i++) faces[i].render();
}

draw();